[1,["70Tt7O50JHepJcXCYvntMx","a5NNSpJktHyav4uhkdQOGV","d4p0C50E9DF4iwvQ6X8kcR","e4YrDY2NhJsa6OJq83sxrQ","c6jVLxLvlP+I8WKA/CVnf5","a3zQCfCrBCDZJ4uf2rk5u8","9cXArX22RACqI9Q9lFJcZv@93c4b","1brw/JvvpFnIvdrxpFCgMZ","b13RWntzRNl5Uwt+EXKne6@b8a2d","531oItS59LZInbe1OuLepf","ce5X974EpFe5FDqTxiJjZM@4b1f1","75NKrX+lhIPrYKT8BWBAhv","e1Wbye4MJJGKiU3KZDrjQ7","1emrmw0iRFy7+lll2Ou2mW","5cjkxLU2dOCYPCHd8V9pK2@6e268","ce5X974EpFe5FDqTxiJjZM@3087a","92fqYxQ1BIeIgCRyS+QTs3@ba694","ce5X974EpFe5FDqTxiJjZM@37508","a9gFyIWdlJhKuRilbvTwrS","6eKb47judBiYwRl7zwryLW@8119d","b1GFPWjdpMRJ8DG/w15qZ5@6c48a","d1NGQ2rJZCcbhjH0/erZWw","3cVmOIu7hKHIeQDucgnpHU@6c48a","2d/iTfZghDzLVUwowHkEHv@d3851","84lFU+MmdMYqJbanNFPXEi@08c68","b5snqx50BDmLQHhI/CssiX@6c48a","a83p0qF5FLTbbvDbTsWaaB","caJRkgxvpLIKhsGZW3nc3y@46540","78V973VpNJSLxN3zi0G4rx@6c48a","46TaRJkKZMZLcpAdyY3isB@6c48a","68ORI2KW1GGroimpdgEXEu@6c48a","d655nVFzNPWadNXf4HY5My@6c48a","f9TK2D9fBCdbNxoIJfFHWN","86y3KFdGtHo5ivJXiaKAdf@e9fee","d1hgJWhmFAc4IwYpV4t904","e7fn7Ipp9BLZ2tuBRlxXcz","40/is+DHVDe49Mrw4swTet","6022MYFBdDPa2Fz/4epAxm","3biJvXS3hOQ5uDnaHppwjd","65a/mlLyFGhKSOvbigV9My","b79iR0ptBIsZBTgIkIL7FA","5cjkxLU2dOCYPCHd8V9pK2@06173","5cjkxLU2dOCYPCHd8V9pK2@be67d","4dgpmaeLxMQ765egUenU8C","eadHiwQI1AUrcD8NI1Xglf","5atNKKRw1BBI9h4M1vRegc","d9yDILUFJHF5/d73rGzBEB","1b6RT2TvVPkbKLFnBd8X/u","613m5EFktPfaAT+fJbVGwP@6c48a","9b+eA8SBJOy6AYcOJLxa5A@6c48a","52E6/lXldCg78IPX9NNLp6@6c48a","bdYW+IfCpKEJg5MfWe1Wym@6c48a","c5Oo/a32VCm6yKwauK+v1J@6c48a","62zQ49RxFJ7IdOFy+H+4EZ@6c48a","e0vaCQGqBENYxI66GekJad@6c48a","6eci5Zt1FB7YOr6Xj7rqQS@6c48a","d5+cbqcohMfItUpRtXBJdY@6c48a","e390WrwhxEhrZ1Nfy/a5uQ@6c48a","b2LNOqq8JJqKJAkcpn3YVD@6c48a","35KYdcU+VIr7HNaNc+N3g3@6c48a","2087hAn6NIcasAS46XXANO@6c48a","0ch/zM9ORLEowkbc6/Phb1@6c48a","38Jncd9tZEwbappyzNxNFy","46i53xwZBDtJrpB1WonF3N@0842b","88223zNtBMroKN5Mhm4K3r","b4JC+GswJPtKmtETCf46Yo@20a92","a6qtIWhapDWJciaB0lqPny","b1AhzxCfJLDoHjXtLyVpDZ@39acf","f5qEUXLi5NXI6eRVIJmRlh","b1AhzxCfJLDoHjXtLyVpDZ@578e2","4b6d0vsz9M36ZKtqD0yJOY@30738","05mj6A2jhMNpQLceJZkOEz@a9729","4cz5mQbHBGj4qczUIzhDEx@ae8d3","05mj6A2jhMNpQLceJZkOEz@f051b","05mj6A2jhMNpQLceJZkOEz@0878f","e3mTZ/vUVMZZo/vygPP4zw@9f554","05mj6A2jhMNpQLceJZkOEz@2bfaf","05mj6A2jhMNpQLceJZkOEz@4658f","05mj6A2jhMNpQLceJZkOEz@f02be","05mj6A2jhMNpQLceJZkOEz@85cde","05mj6A2jhMNpQLceJZkOEz@99c90","05mj6A2jhMNpQLceJZkOEz@acf2f","05mj6A2jhMNpQLceJZkOEz@b818c","05mj6A2jhMNpQLceJZkOEz@69eaa","92yaZsSWRMfY8rIf0UA9+y","e2QzdpNY1OdIt8f8TxZyQT@3cf57","17nOAmxKdN1bPuiWVnbOaO","e2QzdpNY1OdIt8f8TxZyQT@f9796","e2QzdpNY1OdIt8f8TxZyQT@3dda8","e2QzdpNY1OdIt8f8TxZyQT@c58a8","24OZFoLSFG7L2bQbh/5LJq","05txcd/AdMt4cuDfl8J6b8","53MotaW31MErrZMdwris7F@ceb99","53MotaW31MErrZMdwris7F@db981","53MotaW31MErrZMdwris7F@9a9f4","53MotaW31MErrZMdwris7F@f6222","53MotaW31MErrZMdwris7F@9dd66","53MotaW31MErrZMdwris7F@6cc10","53MotaW31MErrZMdwris7F@bbfa4","53MotaW31MErrZMdwris7F@b8aa2","53MotaW31MErrZMdwris7F@919f2","53MotaW31MErrZMdwris7F@60fff","53MotaW31MErrZMdwris7F@7b6e0","53MotaW31MErrZMdwris7F@a18e6","53MotaW31MErrZMdwris7F@a942a","53MotaW31MErrZMdwris7F@6af36","53MotaW31MErrZMdwris7F@d915b","53MotaW31MErrZMdwris7F@90a7d","53MotaW31MErrZMdwris7F@fc2bd","53MotaW31MErrZMdwris7F@09110","53MotaW31MErrZMdwris7F@93925","53MotaW31MErrZMdwris7F@a6d4e","53MotaW31MErrZMdwris7F@6116b","53MotaW31MErrZMdwris7F@2857a","53MotaW31MErrZMdwris7F@a784a","53MotaW31MErrZMdwris7F@25cc3","53MotaW31MErrZMdwris7F@4cb0d","53MotaW31MErrZMdwris7F@f4647","53MotaW31MErrZMdwris7F@10b75","53MotaW31MErrZMdwris7F@4e533","53MotaW31MErrZMdwris7F@f9550","53MotaW31MErrZMdwris7F@ff9f1","53MotaW31MErrZMdwris7F@73445","53MotaW31MErrZMdwris7F@339c4","53MotaW31MErrZMdwris7F@1ef55","53MotaW31MErrZMdwris7F@6d756","53MotaW31MErrZMdwris7F@a8796","53MotaW31MErrZMdwris7F@1e121","53MotaW31MErrZMdwris7F@b0bf9","53MotaW31MErrZMdwris7F@5f459","53MotaW31MErrZMdwris7F@fd584","f1P4i6mR9Mp4H8cC2K4fa3","bbtpGgLRRHaIpIU1oc5O0h","bbTirST95EE7Fm08rNdiQs@9166f","bbTirST95EE7Fm08rNdiQs@c58e6","bbTirST95EE7Fm08rNdiQs@7acf5","bbTirST95EE7Fm08rNdiQs@478cd","bbTirST95EE7Fm08rNdiQs@7b2f9","bbTirST95EE7Fm08rNdiQs@c9f30","bbTirST95EE7Fm08rNdiQs@38927","bbTirST95EE7Fm08rNdiQs@51e40","bbTirST95EE7Fm08rNdiQs@a28bd","bbTirST95EE7Fm08rNdiQs@2cc2b","bbTirST95EE7Fm08rNdiQs@349c8","bbTirST95EE7Fm08rNdiQs@4f1f5","bbTirST95EE7Fm08rNdiQs@9579e","bbTirST95EE7Fm08rNdiQs@7c7e3","bbTirST95EE7Fm08rNdiQs@0d6d9","bbTirST95EE7Fm08rNdiQs@83d40","bbTirST95EE7Fm08rNdiQs@8de6a","bbTirST95EE7Fm08rNdiQs@9db4d","bbTirST95EE7Fm08rNdiQs@31386","bbTirST95EE7Fm08rNdiQs@0cc52","bbTirST95EE7Fm08rNdiQs@54eef","bbTirST95EE7Fm08rNdiQs@a0e73","bbTirST95EE7Fm08rNdiQs@4b427","bbTirST95EE7Fm08rNdiQs@bd9fe","bbTirST95EE7Fm08rNdiQs@ff8d7","bbTirST95EE7Fm08rNdiQs@14837","690Lm6bu5Avr973sdG2TZ1","93o1UN2ohD0bdaj59OfD9E","69CvrlMulPRLDla8VghdNW@a9472","69CvrlMulPRLDla8VghdNW@26526","69CvrlMulPRLDla8VghdNW@874d6","69CvrlMulPRLDla8VghdNW@eb638","69CvrlMulPRLDla8VghdNW@3247d","69CvrlMulPRLDla8VghdNW@18c2c","69CvrlMulPRLDla8VghdNW@48365","69CvrlMulPRLDla8VghdNW@db302","69CvrlMulPRLDla8VghdNW@5e632","69CvrlMulPRLDla8VghdNW@981fe","69CvrlMulPRLDla8VghdNW@c4460","69CvrlMulPRLDla8VghdNW@2f2e7","69CvrlMulPRLDla8VghdNW@fb323","69CvrlMulPRLDla8VghdNW@91b6c","69CvrlMulPRLDla8VghdNW@34187","69CvrlMulPRLDla8VghdNW@8f523","96JMz56lJNo5vRNw9n3Q9F","38PwS2nEtO7LQZzo8fVMxy","94NjuuciZBc540EcGVCIRg@30ac8","94NjuuciZBc540EcGVCIRg@fd006","94NjuuciZBc540EcGVCIRg@17c16","94NjuuciZBc540EcGVCIRg@4e539","94NjuuciZBc540EcGVCIRg@75abb","94NjuuciZBc540EcGVCIRg@e5a6b","94NjuuciZBc540EcGVCIRg@1c3e6","94NjuuciZBc540EcGVCIRg@b221c","94NjuuciZBc540EcGVCIRg@a8bf4","94NjuuciZBc540EcGVCIRg@2c2da","94NjuuciZBc540EcGVCIRg@490e2","94NjuuciZBc540EcGVCIRg@5ef4c","94NjuuciZBc540EcGVCIRg@5522d","94NjuuciZBc540EcGVCIRg@baa01","94NjuuciZBc540EcGVCIRg@5c448","94NjuuciZBc540EcGVCIRg@61537","94NjuuciZBc540EcGVCIRg@2eba3","94NjuuciZBc540EcGVCIRg@dd4fd","94NjuuciZBc540EcGVCIRg@dc739","94NjuuciZBc540EcGVCIRg@39746","94NjuuciZBc540EcGVCIRg@cfd7f","94NjuuciZBc540EcGVCIRg@788a8","94NjuuciZBc540EcGVCIRg@f445d","94NjuuciZBc540EcGVCIRg@dfcb3","94NjuuciZBc540EcGVCIRg@fc082","94NjuuciZBc540EcGVCIRg@2e58f","94NjuuciZBc540EcGVCIRg@817c1","94NjuuciZBc540EcGVCIRg@7babf","94NjuuciZBc540EcGVCIRg@5324c","94NjuuciZBc540EcGVCIRg@f43c4","94NjuuciZBc540EcGVCIRg@c255e","94NjuuciZBc540EcGVCIRg@4dc07","a7EnlgxR5BGKMrSvx7j8FA","9d52ubud1LC4+HGCZ/Wkp3","4cz5mQbHBGj4qczUIzhDEx@2f40a","4cz5mQbHBGj4qczUIzhDEx@388bc","aaom07lU1ODLYBnPDdiO4K","47NETZpeNBoJuBKhY1IGpi@f17ba","11H9yMV85EtLg6vMo9fUKW","278uWgiJFBX6UhzeQq7gWM","29R+H8U0xGhYOwiVhDDWFN","faeLmfKNRIVIyrpc9N0KLR","30z90teNZCGYBLb6mEMLFZ","e2mr1Zb8RE763+oWrlgr+u@8d0b4","1bM+C3c/tPBqR/aksGpN+m","depqhk6jtAR6cqHNvKZIeu","7e254tPS5B9JtUkesezjCJ","80E8n+9l5PgL+xxwojW9++@6c48a","59xz7y8rdDJbVJaok5YbMh@6c48a","518HCOaL9CmKVMTKNS1Xvt@6c48a","9caUGgS2RF4b+p0rhCo5vT@6c48a","dbLINgz4hFR7KdPbUxNzyf@6c48a","2bgzl5fPdPp40N5fHUcvyO@6c48a","54/QAXabVARb0In270pOO4@6c48a","83rbsf2GhLp63N5HyRizqI@6c48a","55f/T00/FAHJ4o9NCP+QmE@6c48a","72us19SjVOpZSzabopi/zq@6c48a"],["node","_mesh","_effectAsset","mainTexture","_parent","emissiveMap","_particleSystem","_mainTexture","_defaultClip","root","data"],[["cc.Node",["_name","_active","_prefab","_parent","_children","_components","_lpos","_euler","_lrot","_lscale"],1,4,1,2,9,5,5,5,5],["cc.MeshRenderer",["_shadowCastingMode","_shadowReceivingMode","node","__prefab","_materials","lightmapSettings","_mesh"],1,1,4,3,4,6],["cc.CurveRange",["mode","constant","multiplier","spline"],0,4],["cc.RealKeyframeValue",["interpolationMode","rightTangentWeight","leftTangentWeight","value","rightTangent","leftTangent"],-3],["cc.Material",["_defines","_states","_techIdx","_props"],0,12],["8f1871qB5BLN4SPXdLouIdi",["id","sid","node","__prefab"],1,1,4],["388b0KuytlDebueysMAyexs",["id","sid","isVideoFood","node","__prefab"],0,1,4],["cc.ParticleSystem",["duration","_capacity","simulationSpeed","node","__prefab","_materials","startColor","startSizeX","startSizeY","startSizeZ","startSpeed","startRotationX","startRotationY","startRotationZ","startDelay","startLifetime","gravityModifier","rateOverTime","rateOverDistance","_colorOverLifetimeModule","_shapeModule","_sizeOvertimeModule","_velocityOvertimeModule","_forceOvertimeModule","_limitVelocityOvertimeModule","_rotationOvertimeModule","_textureAnimationModule","_trailModule","renderer"],0,1,4,12,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4],["cc.GradientRange",["color"],3,5],["cc.ColorOvertimeModule",["_enable","color"],2,4],["cc.ShapeModule",["_enable","_shapeType","_angle","radius","arcSpeed","_scale"],-1,4,5],["cc.ForceOvertimeModule",["_enable","x","y","z"],2,4,4,4],["cc.Mesh",["_native","_hash","_struct"],1,11],["cc.Prefab",["_name"],2],["cc.Node",["_name","_parent","_children","_components","_prefab","_lpos"],2,1,12,9,4,5],["cc.Node",["_name","_parent","_components","_prefab","_lpos","_lrot","_lscale","_euler"],2,1,2,4,5,5,5,5],["cc.PrefabInfo",["fileId","root","asset"],2,1,1],["cc.Animation",["playOnLoad","node","__prefab","_clips","_defaultClip"],2,1,4,3,6],["cc.CompPrefabInfo",["fileId"],2],["bffebvvxp5DRLTSkJdG02ga",["node","__prefab"],3,1,4],["cc.ModelLightmapSettings",[],3],["eaa3aT6crpN/6jxYJJ1eRpI",["isCircle","node","__prefab"],2,1,4],["cc.SizeOvertimeModule",["_enable","size","x","y","z"],2,4,4,4,4],["cc.RealCurve",["_times","_values"],2,9],["cc.VelocityOvertimeModule",["x","y","z","speedModifier"],3,4,4,4,4],["cc.LimitVelocityOvertimeModule",["limitX","limitY","limitZ","limit"],3,4,4,4,4],["cc.RotationOvertimeModule",["x","y","z"],3,4,4,4],["cc.TextureAnimationModule",["frameOverTime","startFrame"],3,4,4],["cc.TrailModule",["lifeTime","widthRatio","colorOverTrail","colorOvertime","_particleSystem"],3,4,4,4,4,1],["cc.ParticleSystemRenderer",["_mainTexture"],3,6],["cc.EffectAsset",["_name","shaders","techniques"],0]],[[16,0,1,2,2],[18,0,2],[20,1],[2,1],[12,0,1,2,3],[1,0,1,2,3,4,5,6,3],[0,0,3,5,2,6,8,7,2],[0,0,3,5,2,6,8,9,7,2],[1,1,2,3,4,5,6,2],[2,1,2],[4,2,1,0,3,4],[3,0,3,3],[8,1],[1,2,3,4,5,6,1],[23,0,1,2],[4,1,0,3,3],[0,0,3,4,5,2,6,8,9,7,2],[1,0,2,3,4,5,6,2],[2,0,3,2],[0,0,3,4,2,8,7,2],[0,0,3,4,2,2],[0,0,1,3,4,2,8,7,3],[0,0,3,5,2,6,9,7,2],[15,0,1,2,3,4,5,6,7,2],[8,0,1],[22,0,1,2,3,4,2],[3,0,1,2,4],[24,0,1,2,3,1],[25,0,1,2,3,1],[26,0,1,2,1],[27,0,1,1],[28,0,1,2,3,4,1],[29,0,1],[0,0,4,2,2],[0,0,3,5,2,2],[0,0,3,2,2],[5,0,1,2,3,3],[7,0,2,1,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,4],[2,0,2,3,3],[9,1,1],[10,0,1,2,4,5,4],[3,0,3,1,2,5],[11,0,1,2,3,2],[0,0,3,4,5,2,6,8,7,2],[0,0,3,5,2,6,9,2],[17,0,1,2,3,4,2],[6,0,1,3,4,3],[0,0,4,5,2,6,2],[0,0,3,4,2,6,9,2],[0,0,4,2,8,7,2],[0,0,3,4,2,6,8,9,7,2],[0,0,3,4,5,2,6,2],[0,0,1,3,5,2,6,8,9,7,3],[0,0,3,5,2,8,9,7,2],[14,0,1,2,3,4,5,2],[7,0,1,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,3],[9,0,1,2],[10,0,1,3,2,4,5,5],[3,0,4,1,5,2,6],[11,1,2,3,1],[4,0,3,2],[13,0,2],[0,0,3,4,5,2,6,9,2],[0,0,4,5,2,9,2],[0,0,1,3,4,2,3],[0,0,3,5,2,6,2],[0,0,3,4,2,9,2],[0,0,3,4,2,6,8,7,2],[0,0,3,5,2,8,7,2],[5,0,2,3,2],[19,0,1,1],[6,0,1,2,3,4,4],[21,0,1,2,2],[30,0,1,2,4]],[[[[4,".bin",2332218291,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":8544,"length":1968,"count":492,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":8544,"count":178,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.006164535414427519,-2.1244497827588305e-10,-8.497799131035322e-10],"maxPosition",8,[1,0.0061645214445889,0.011224960908293724,0.001960923196747899]]],-1],0,0,[],[],[]],[[[4,".bin",2420522826,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":39216,"length":6168,"count":1542,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":39216,"count":817,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.011063814163208008,-0.007959434762597084,0.0008887368603609502],"maxPosition",8,[1,-0.0023887110874056816,0.007626600097864866,0.0011800932697951794]]],-1],0,0,[],[],[]],[[[4,".bin",2342819532,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":13824,"length":2736,"count":684,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":13824,"count":288,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.007171275094151497,0.00010787255450850353,-0.007672399282455444],"maxPosition",8,[1,0.007171275094151497,0.04374110698699951,0.008831435814499855]]],-1],0,0,[],[],[]],[[[4,".bin",3630703994,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":9600,"length":3072,"count":768,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":9600,"count":200,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.0034475999418646097,-0.000030995179258752614,-0.003372004721313715],"maxPosition",8,[1,0.0034475999418646097,0.002892391989007592,0.0034729214385151863]]],-1],0,0,[],[],[]],[[[4,".bin",1418531933,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":8640,"length":1968,"count":492,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":8640,"count":180,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.012526844628155231,-0.0087512768805027,2.528272036173007e-11],"maxPosition",8,[1,-8.090470515753623e-10,0.008372725918889046,0.0022629606537520885]]],-1],0,0,[],[],[]],[[[4,".bin",3904020408,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":8640,"length":1968,"count":492,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":8640,"count":180,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.012526844628155231,-0.012267854996025562,2.528272036173007e-11],"maxPosition",8,[1,-8.090470515753623e-10,0.010305452160537243,0.0022629606537520885]]],-1],0,0,[],[],[]],[[[4,".bin",2421975200,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":32928,"length":7320,"count":1830,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":32928,"count":686,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.0072328029200434685,0.00000512247333972482,-0.007820505648851395],"maxPosition",8,[1,0.0071097481995821,0.017768818885087967,0.009480404667556286]]],-1],0,0,[],[],[]],[[[10,"1",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_TEXTURE":true}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[3,2],[55,5]],[[[10,"3",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_TEXTURE":true}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[3,2],[28,5]],[[[15,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{},{}],[{"USE_ALBEDO_MAP":true,"USE_EMISSIVE_MAP":true},{},{}],[[[{"roughness":0.7,"metallic":0.047},"mainTexture",6,0,"emissiveMap",6,1],{},{}],11,0,0]]],0,0,[0,0,0],[3,5,2],[29,29,7]],[[[10,"3",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_TEXTURE":true}],[[[{},"mainColor",8,[4,4278255441],"mainTexture",6,0]],11]]],0,0,[0,0],[3,2],[28,13]],[[[10,"1",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_TEXTURE":true}],[[[{"progress":-0.1},"mainTexture",6,0]],11]]],0,0,[0,0],[3,2],[56,13]],[[[10,"1",[{"priority":127,"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_TEXTURE":true}],[[[{},"mainColor",8,[4,3070204160],"mainTexture",6,0]],11]]],0,0,[0,0],[3,2],[57,5]],[[[10,"1",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_TEXTURE":true}],[[[{},"tilingOffset",8,[2,1.02,1.04,-0.01,-0.02],"mainTexture",6,0]],11]]],0,0,[0,0],[3,2],[58,5]],[[[4,".bin",752347009,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":20832,"length":7296,"count":1824,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":20832,"count":434,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.0018194426083937287,-0.0016334827523678541,-0.00157296028919518],"maxPosition",8,[1,0.0017134227091446519,0.0030240195337682962,0.0018779942765831947]]],-1],0,0,[],[],[]],[[[10,"1",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_TEXTURE":true}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[3,2],[59,5]],[[[10,"1",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_TEXTURE":true}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[3,2],[60,5]],[[[10,"3",[{"priority":129,"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_TEXTURE":true}],[[[{},"tilingOffset",8,[2,1.35,1,-0.18,0],"mainTexture",6,0]],11]]],0,0,[0,0],[3,2],[61,5]],[[[10,"3",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_TEXTURE":true}],[[[{},"mainColor",8,[4,4278255441],"mainTexture",6,0]],11]]],0,0,[0,0],[3,2],[30,13]],[[[4,".bin",1388238945,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":17856,"length":4416,"count":1104,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":17856,"count":372,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.0026749540120363235,-0.00028386307531036437,-0.004572611302137375],"maxPosition",8,[1,0.0026749540120363235,0.00028386307531036437,0.004572611302137375]]],-1],0,0,[],[],[]],[[[4,".bin",177218778,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":39984,"length":16416,"count":4104,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":39984,"count":833,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.0028411950916051865,-0.0024491369258612394,-0.0028940937481820583],"maxPosition",8,[1,0.0028498098254203796,0.002840431872755289,0.0029697054997086525]]],-1],0,0,[],[],[]],[[[4,".bin",1688053563,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":15360,"length":2688,"count":672,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":15360,"count":240,"stride":64},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_color","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.9376780986785889,-0.9698125720024109,-0.024580955505371094],"maxPosition",8,[1,0.9376780986785889,0.9698125720024109,0.024580955505371094]]],-1],0,0,[],[],[]],[[[10,"1",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{}],[[[{},"tintColor",8,[4,2147483545],"mainTexture",6,0]],11]]],0,0,[0,0],[3,2],[20,21]],[[[4,".bin",2148837927,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":3648,"length":792,"count":198,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":3648,"count":57,"stride":64},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false},{"name":"a_texCoord2","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.1045084223151207,-0.1649864912033081,-0.1781495213508606],"maxPosition",8,[1,0.10450843721628189,0.1649864763021469,0.1781495213508606]]],-1],0,0,[],[],[]],[[[4,".bin",4045401568,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":4608,"length":816,"count":204,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":4608,"count":72,"stride":64},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false},{"name":"a_texCoord2","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.12517155706882477,-0.18158406019210815,-0.17382358014583588],"maxPosition",8,[1,0.12517155706882477,0.18158401548862457,0.17382358014583588]]],-1],0,0,[],[],[]],[[[4,".bin",485600671,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":4096,"length":672,"count":168,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":4096,"count":64,"stride":64},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false},{"name":"a_texCoord2","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.13709798455238342,-0.13084770739078522,-0.17943619191646576],"maxPosition",8,[1,0.13709798455238342,0.1308477371931076,0.17943619191646576]]],-1],0,0,[],[],[]],[[[4,".bin",3282832154,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":4544,"length":792,"count":198,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":4544,"count":71,"stride":64},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false},{"name":"a_texCoord2","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.13616810739040375,-0.14696365594863892,-0.1425665020942688],"maxPosition",8,[1,0.13616810739040375,0.14696365594863892,0.1425664871931076]]],-1],0,0,[],[],[]],[[[4,".bin",2740405457,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":3712,"length":672,"count":168,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":3712,"count":58,"stride":64},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false},{"name":"a_texCoord2","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.08990953117609024,-0.1574736088514328,-0.15844100713729858],"maxPosition",8,[1,0.08990953117609024,0.1574736088514328,0.15844100713729858]]],-1],0,0,[],[],[]],[[[4,".bin",571143760,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":3072,"length":504,"count":126,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":3072,"count":48,"stride":64},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false},{"name":"a_texCoord2","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.10246539860963821,-0.14492598176002502,-0.13339561223983765],"maxPosition",8,[1,0.10246542096138,0.14492599666118622,0.13339561223983765]]],-1],0,0,[],[],[]],[[[4,".bin",1743051958,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":4864,"length":1008,"count":252,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":4864,"count":76,"stride":64},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false},{"name":"a_texCoord2","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.11799515038728714,-0.1287582367658615,-0.14018933475017548],"maxPosition",8,[1,0.11799515038728714,0.1287582367658615,0.14018931984901428]]],-1],0,0,[],[],[]],[[[4,".bin",603423048,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":3200,"length":528,"count":132,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":3200,"count":50,"stride":64},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false},{"name":"a_texCoord2","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.09946458786725998,-0.13002578914165497,-0.17290429770946503],"maxPosition",8,[1,0.09946458786725998,0.13002578914165497,0.17290428280830383]]],-1],0,0,[],[],[]],[[[4,".bin",1994501441,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":3264,"length":504,"count":126,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":3264,"count":51,"stride":64},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false},{"name":"a_texCoord2","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.17770490050315857,-0.14969368278980255,-0.15266473591327667],"maxPosition",8,[1,0.17770490050315857,0.14969368278980255,0.15266473591327667]]],-1],0,0,[],[],[]],[[[4,".bin",3660168607,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":3264,"length":456,"count":114,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":3264,"count":51,"stride":64},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false},{"name":"a_texCoord2","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.10499456524848938,-0.12412149459123611,-0.09524855017662048],"maxPosition",8,[1,0.10499457269906998,0.12412149459123611,0.09524856507778168]]],-1],0,0,[],[],[]],[[[4,".bin",862712783,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":3584,"length":624,"count":156,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":3584,"count":56,"stride":64},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false},{"name":"a_texCoord2","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.1544494479894638,-0.14951471984386444,-0.13433583080768585],"maxPosition",8,[1,0.1544494479894638,0.14951469004154205,0.13433584570884705]]],-1],0,0,[],[],[]],[[[4,".bin",2459503816,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":7808,"length":1536,"count":384,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":7808,"count":122,"stride":64},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false},{"name":"a_texCoord2","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.17461305856704712,-0.15850307047367096,-0.09972629696130753],"maxPosition",8,[1,0.17461305856704712,0.15850311517715454,0.09972629696130753]]],-1],0,0,[],[],[]],[[[4,".bin",2677386775,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":7680,"length":1320,"count":330,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":7680,"count":120,"stride":64},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false},{"name":"a_texCoord2","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.12501627206802368,-0.16041940450668335,-0.09784705191850662],"maxPosition",8,[1,0.12501627206802368,0.16041940450668335,0.09784705191850662]]],-1],0,0,[],[],[]],[[[4,".bin",3029171701,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":5656,"length":1248,"count":312,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":5656,"count":101,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.22777453064918518,-0.19064632058143616,-0.1584324687719345],"maxPosition",8,[1,0.22777453064918518,0.19064632058143616,0.1584324687719345]]],-1],0,0,[],[],[]],[[[4,".bin",1842577126,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":4544,"length":840,"count":210,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":4544,"count":71,"stride":64},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false},{"name":"a_texCoord2","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.15231624245643616,-0.1970001608133316,-0.12303086370229721],"maxPosition",8,[1,0.15231625735759735,0.1970001608133316,0.12303086370229721]]],-1],0,0,[],[],[]],[[[4,".bin",1728323082,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":17664,"length":4512,"count":1128,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":17664,"count":276,"stride":64},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false},{"name":"a_texCoord2","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.11245272308588028,-0.11078453063964844,-0.14559635519981384],"maxPosition",8,[1,0.11245272308588028,0.11078453809022903,0.14559635519981384]]],-1],0,0,[],[],[]],[[[4,".bin",3939405067,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":2944,"length":480,"count":120,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":2944,"count":46,"stride":64},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false},{"name":"a_texCoord2","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.12959295511245728,-0.13960526883602142,-0.10431288927793503],"maxPosition",8,[1,0.12959295511245728,0.13960526883602142,0.10431287437677383]]],-1],0,0,[],[],[]],[[[4,".bin",757284045,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":4160,"length":720,"count":180,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":4160,"count":65,"stride":64},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false},{"name":"a_texCoord2","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.11874590069055557,-0.1560257375240326,-0.12433069944381714],"maxPosition",8,[1,0.11874587833881378,0.156025692820549,0.12433069944381714]]],-1],0,0,[],[],[]],[[[4,".bin",58747604,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":4592,"length":1056,"count":264,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":4592,"count":82,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.13501250743865967,-0.15938472747802734,-0.16113774478435516],"maxPosition",8,[1,0.13501250743865967,0.15938472747802734,0.16113774478435516]]],-1],0,0,[],[],[]],[[[4,".bin",3709979707,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":2944,"length":480,"count":120,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":2944,"count":46,"stride":64},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false},{"name":"a_texCoord2","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.12335231900215149,-0.13033133745193481,-0.13330431282520294],"maxPosition",8,[1,0.12335231900215149,0.13033133745193481,0.13330431282520294]]],-1],0,0,[],[],[]],[[[4,".bin",2830860975,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":2688,"length":336,"count":84,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":2688,"count":48,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.20288732647895813,-0.16423554718494415,-0.16311435401439667],"maxPosition",8,[1,0.20288732647895813,0.16423554718494415,0.16311435401439667]]],-1],0,0,[],[],[]],[[[4,".bin",3122726290,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":4704,"length":1056,"count":264,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":4704,"count":84,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.1645447164773941,-0.1733485609292984,-0.18742342293262482],"maxPosition",8,[1,0.1645447164773941,0.1733485758304596,0.18742340803146362]]],-1],0,0,[],[],[]],[[[4,".bin",3178745968,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":3520,"length":552,"count":138,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":3520,"count":55,"stride":64},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false},{"name":"a_texCoord2","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.1328437179327011,-0.14499230682849884,-0.1213768869638443],"maxPosition",8,[1,0.1328437179327011,0.14499230682849884,0.1213768944144249]]],-1],0,0,[],[],[]],[[[4,".bin",764959963,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":3008,"length":504,"count":126,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":3008,"count":47,"stride":64},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false},{"name":"a_texCoord2","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.10298275202512741,-0.09055238962173462,-0.1241597831249237],"maxPosition",8,[1,0.10298275202512741,0.09055238962173462,0.1241597831249237]]],-1],0,0,[],[],[]],[[[4,".bin",3835421321,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":2752,"length":432,"count":108,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":2752,"count":43,"stride":64},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false},{"name":"a_texCoord2","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.10190769284963608,-0.14314107596874237,-0.16083574295043945],"maxPosition",8,[1,0.10190769284963608,0.14314107596874237,0.16083572804927826]]],-1],0,0,[],[],[]],[[[4,".bin",2422657856,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":3712,"length":696,"count":174,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":3712,"count":58,"stride":64},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false},{"name":"a_texCoord2","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.13997451961040497,-0.16561107337474823,-0.10168277472257614],"maxPosition",8,[1,0.13997450470924377,0.16561107337474823,0.10168277472257614]]],-1],0,0,[],[],[]],[[[4,".bin",934579118,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":7360,"length":1344,"count":336,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":7360,"count":115,"stride":64},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false},{"name":"a_texCoord2","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.13009008765220642,-0.1650770604610443,-0.08300843089818954],"maxPosition",8,[1,0.13009008765220642,0.1650770604610443,0.08300843089818954]]],-1],0,0,[],[],[]],[[[4,".bin",2955190689,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":3008,"length":456,"count":114,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":3008,"count":47,"stride":64},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false},{"name":"a_texCoord2","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.13131661713123322,-0.15547527372837067,-0.17824286222457886],"maxPosition",8,[1,0.13131661713123322,0.15547527372837067,0.17824286222457886]]],-1],0,0,[],[],[]],[[[4,".bin",1099566030,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":3752,"length":888,"count":222,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":3752,"count":67,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.15899869799613953,-0.1361086666584015,-0.1369825303554535],"maxPosition",8,[1,0.15899869799613953,0.13610869646072388,0.13698256015777588]]],-1],0,0,[],[],[]],[[[4,".bin",1469273732,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":3976,"length":768,"count":192,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":3976,"count":71,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.14523138105869293,-0.20119892060756683,-0.18545980751514435],"maxPosition",8,[1,0.14523138105869293,0.20119892060756683,0.18545979261398315]]],-1],0,0,[],[],[]],[[[4,".bin",3120145421,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":16656,"length":6912,"count":1728,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":16656,"count":347,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.0014878700021654367,-0.0013833515113219619,-0.00546592753380537],"maxPosition",8,[1,0.0014878700021654367,0.0013833515113219619,0.00546592753380537]]],-1],0,0,[],[],[]],[[[4,".bin",1166731482,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":4096,"length":768,"count":192,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":4096,"count":64,"stride":64},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false},{"name":"a_texCoord2","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.09238817542791367,-0.16622763872146606,-0.0879582017660141],"maxPosition",8,[1,0.09238819032907486,0.16622768342494965,0.08795822411775589]]],-1],0,0,[],[],[]],[[[4,".bin",914417668,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":3136,"length":672,"count":168,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":3136,"count":56,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.1758827418088913,-0.2063852697610855,-0.16691510379314423],"maxPosition",8,[1,0.1758827418088913,0.2063852697610855,0.16691510379314423]]],-1],0,0,[],[],[]],[[[4,".bin",450182639,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":4224,"length":672,"count":168,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":4224,"count":66,"stride":64},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false},{"name":"a_texCoord2","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.17100907862186432,-0.14194126427173615,-0.17999176681041718],"maxPosition",8,[1,0.17100907862186432,0.14194126427173615,0.17999176681041718]]],-1],0,0,[],[],[]],[[[4,".bin",550376559,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":3976,"length":792,"count":198,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":3976,"count":71,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.20187635719776154,-0.1882668435573578,-0.20317576825618744],"maxPosition",8,[1,0.20187635719776154,0.1882668435573578,0.20317576825618744]]],-1],0,0,[],[],[]],[[[4,".bin",1205990442,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":3840,"length":624,"count":156,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":3840,"count":60,"stride":64},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false},{"name":"a_texCoord2","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.1884882003068924,-0.16038483381271362,-0.1548328548669815],"maxPosition",8,[1,0.1884882003068924,0.16038483381271362,0.1548328548669815]]],-1],0,0,[],[],[]],[[[4,".bin",225483297,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":3264,"length":504,"count":126,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":3264,"count":51,"stride":64},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false},{"name":"a_texCoord2","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.08123977482318878,-0.13989238440990448,-0.1443416178226471],"maxPosition",8,[1,0.08123977482318878,0.13989238440990448,0.1443416178226471]]],-1],0,0,[],[],[]],[[[4,".bin",2439176192,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":3072,"length":528,"count":132,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":3072,"count":48,"stride":64},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false},{"name":"a_texCoord2","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.11567234247922897,-0.1361045092344284,-0.10506227612495422],"maxPosition",8,[1,0.11567234247922897,0.1361045092344284,0.10506227612495422]]],-1],0,0,[],[],[]],[[[4,".bin",1661715598,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":9280,"length":1608,"count":402,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":9280,"count":145,"stride":64},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false},{"name":"a_texCoord2","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.1050172969698906,-0.12198159843683243,-0.1387626677751541],"maxPosition",8,[1,0.1050172969698906,0.12198159098625183,0.1387626677751541]]],-1],0,0,[],[],[]],[[[15,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{},{}],[{"USE_ALBEDO_MAP":true,"USE_EMISSIVE_MAP":true},{},{}],[[[{"occlusion":0.5,"roughness":0,"metallic":0},"mainColor",8,[4,4292277222],"emissive",8,[4,4284111450],"mainTexture",6,0,"emissiveMap",6,1],{},{}],11,0,0]]],0,0,[0,0,0],[3,5,2],[31,31,7]],[[[10,"1",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[3,2],[22,21]],[[[4,".bin",2622520315,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":9744,"length":4176,"count":1044,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":9744,"count":203,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.056762661784887314,-0.0023630151990801096,-0.03423503413796425],"maxPosition",8,[1,0.056762661784887314,0.0012347125448286533,0.03423503786325455]]],-1],0,0,[],[],[]],[[[4,".bin",1126720952,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":3456,"length":1392,"count":348,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":3456,"count":72,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.06141217052936554,-0.0002300757187185809,-0.0393296480178833],"maxPosition",8,[1,0.06195370852947235,0.007099924609065056,0.0393296480178833]]],-1],0,0,[],[],[]],[[[4,".bin",3217194272,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":5760,"length":1200,"count":300,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":5760,"count":120,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.0030758476350456476,-0.08506546914577484,0.0008433520561084151],"maxPosition",8,[1,0.05126040428876877,0.001611457671970129,0.013348240405321121]]],-1],0,0,[],[],[]],[[[61,"Area3Env"],[33,"Area3Env",[-2,-3,-4,-5,-6,-7,-8,-9],[0,"45H7Kfj/pN3JLfsyfr8Afm",-1,0]],[33,"body",[-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48],[0,"d9kYqOUZVB6Lq9/lxzk/lt",1,0]],[33,"body",[-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80],[0,"4etXve5fpLI44VpcOcuDUK",1,0]],[33,"body",[-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106],[0,"2ccMtYhPlDgYMo/tDocufK",1,0]],[33,"body",[-107,-108,-109,-110,-111,-112,-113,-114,-115,-116,-117,-118,-119,-120,-121,-122],[0,"4fQrd+8xNEnL+1OKvi+hzj",1,0]],[47,"MoGu",[-124,-125,-126,-127,-128,-129,-130,-131,-132],[[45,true,-123,[1,"1bfHQ9L2ZG36Iq8mdg4EVg"],[342],343]],[0,"3aLeXW1LNJOKnGwtadd5Hu",1,0],[1,0,-0.035,0]],[47,"MoGu",[-134,-135,-136,-137,-138,-139,-140,-141,-142],[[45,true,-133,[1,"c8PJhzrRJE+5YCefi0GeZ0"],[388],389]],[0,"954OwJr61MFoWDJ0Ws9vvm",1,0],[1,0,-0.035,0]],[62,"Next",1,[-145,-146,-147,-148,-149,-150],[[36,9,1,-143,[1,"73WGoE93NIWZ3jU8zujbUY"]],[70,-144,[1,"43NW+cZKNGg64YShWkASZd"]]],[0,"1aG6hxb9xOGowoJZzvTAQc",1,0],[1,6.502,0,1.662],[1,1.18,1.18,1.18]],[20,"Env",1,[-151,-152,-153,-154,-155,-156,-157],[0,"27FoA0x4JPXbw/q9suJFSu",1,0]],[16,"Plate.003",9,[-159,-160,-161,-162,-163,-164],[[5,1,0,-158,[1,"0bI48cz0NJ1q8nL8mfCMZS"],[20],[2],21]],[0,"a0YOc4UCtI+qg6YC3B959C",1,0],[1,7.609,0.001,-2.584],[3,0,1,0,2.83276944882399e-16],[1,239.7,239.7,239.7],[1,0,179.99999999999997,0]],[48,"chugui3",9,[-165,-166,-167,-168,-169,-170,-171],[0,"e2HIpBQRRC/LXuYc2J+guq",1,0],[1,1.49212,-0.05300000000000001,2.465],[1,0.8261599999999999,1,1.6069999999999998]],[49,"Ground",[-172,-173,-174,-175,-176,-177],[0,"4fVpqwl5hJ87m2QQnETTmN",1,0],[3,-6.972611193684199e-32,-0.7071067811865475,-6.972611193684197e-32,0.7071067811865477],[1,-1.1299600123008406e-29,-89.99999999999999,0]],[49,"Ground",[-178,-179,-180,-181,-182,-183],[0,"46b9XTdV5DAJA8Ve9kTXRF",1,0],[3,-6.972611193684199e-32,-0.7071067811865475,-6.972611193684197e-32,0.7071067811865477],[1,-1.1299600123008406e-29,-89.99999999999999,0]],[48,"bingxiang",9,[-184,-185,-186,-187,-188],[0,"245PKprwZHsKU3ySUJ0Dx0",1,0],[1,-1.452,0,0.6879999999999997],[1,1.118,1,0.797]],[54,"ZhiZhu",1,[[-190,[35,"Lock",-191,[0,"89/JpqtUpGSI7+6B8IntZC",1,0]],[35,"Unlock",-192,[0,"379F/ImMRKyofRIgPDcivo",1,0]],[35,"BuySuccess",-193,[0,"aelAerqQpP0Kig8gxNrvnK",1,0]]],1,4,4,4],[[36,8,3,-189,[1,"b8A5XEQT9Dl72/tJCMZkmV"]]],[0,"eavO2EcgZN0Y6yyCatWZvh",1,0],[1,7.61,0,-0.566]],[50,"bianqian",14,[-194,-195,-196,-197],[0,"d4TlRriI1IXpy61JHpyRyW",1,0],[1,9.081,0.575,1.287],[3,0,0.7071067811865475,0,0.7071067811865476],[1,2.772,2.173,2.772],[1,0,90,0]],[20,"Foods",1,[-198,-199,-200,-201],[0,"40D4J8HChIrKbrjypy7+VR",1,0]],[54,"ChaoXue3",1,[[[35,"Lock",-203,[0,"449jqJVcFEBawYhj3pEHs8",1,0]],-204,-205],4,1,1],[[36,7,2,-202,[1,"b3NKvkpBZLeJwJMfgTpFYl"]]],[0,"b4ROTzgVFL8p49kJsN7Ra0",1,0],[1,4.061,0,-0.467]],[51,"zhongzhi",1,[-207,-208,-209],[[69,6,-206,[1,"656aBEm0FO0YNmyTKvgdKn"]]],[0,"81Mmo7pDxL57MtJ1RAqvrY",1,0],[1,5.855,0,-0.372]],[51,"zhongzhi",1,[-211,-212,-213],[[36,6,1,-210,[1,"1f9it/0XFC1rvGWLIT6Dio"]]],[0,"74Z4msQiRJIYo552Iot/zY",1,0],[1,5.855,0,-1.188]],[63,"body",[-215,-216,-217],[[45,true,-214,[1,"c7jQKO49dKiJFFA9T7IwLY"],[424],425]],[0,"1ePH/B/UJAYqAn9DPSnCTA",1,0],[1,0.6,0.6,0.6]],[43,"jitui2",17,[-219,2],[[46,3,15,-218,[1,"8eyTCbydRKGZC66shs0arZ"]]],[0,"b2FyLbs7tAsq9Kj8G/W+w1",1,0],[1,3.955,0,0.937],[3,0.07793689661368451,-0.7441530982350559,0.05052592070273402,0.6615203230971334],[1,10.284,-96.475,-2.817]],[43,"nailao2",17,[-221,4],[[71,10,14,true,-220,[1,"67GRs5VyZAzY10RN9VxenP"]]],[0,"375+wphQxNHqrVPupFetog",1,0],[1,4.334,0,-2.856],[3,0,-0.9798114591069075,0,0.19992374697067106],[1,0,-156.935,0]],[43,"xiangjiao",17,[-223,5],[[46,11,13,-222,[1,"95rcpytJxIxpVYSEYvPWNc"]]],[0,"fdFoV+pSZKu4lXfawPGnXx",1,0],[1,7.736,0,1.068],[3,0.15223096400725222,-0.6203043073193992,-0.7001484885321888,0.3191244176250302],[1,-91.987,-166.306,-39.474]],[16,"xihongshi",17,[-225,3],[[46,17,16,-224,[1,"cd27cCY2ZACoA3b8ha/hsE"]]],[0,"e9WXp9ux5PwroDdJ3xDV0V",1,0],[1,6.275,0,-2.614],[3,0,0.9313357465499208,0,0.3641616772785156],[1,0.95,0.95,0.95],[1,0,137.288,0]],[21,"BuySuccess",false,19,[-226,-227,-228],[0,"12XPGQjEBBuqULmyKBoiyf",1,0],[3,0,0.7071067811865475,0,0.7071067811865476],[1,0,90,0]],[19,"Back",26,[-229,-230,-231],[0,"50A7WvBlxJXoSrlI90lmaf",1,0],[3,-6.972611193684198e-32,-0.7071067811865475,-6.972611193684197e-32,0.7071067811865476],[1,-1.1299600123008406e-29,-89.99999999999999,0]],[20,"WorkingEffect",26,[-232,-233,-234],[0,"19uHMuHjlGzb9nIuiqorb/",1,0]],[21,"BuySuccess",false,20,[-235,-236,-237],[0,"93Q9MWsNdHVKP+qs8Le4dD",1,0],[3,0,0.7071067811865475,0,0.7071067811865476],[1,0,90,0]],[19,"Back",29,[-238,-239,-240],[0,"17VnmbnKFM+KtiMtG+5vb7",1,0],[3,-6.972611193684198e-32,-0.7071067811865475,-6.972611193684197e-32,0.7071067811865476],[1,-1.1299600123008406e-29,-89.99999999999999,0]],[20,"WorkingEffect",29,[-241,-242,-243],[0,"01giKTv2pCio9jhzl3xtrx",1,0]],[21,"Unlock",false,8,[-244,-245,-246],[0,"81+ObW5mdNBrxgXj86lUgg",1,0],[3,0,0.7071067811865475,0,0.7071067811865476],[1,0,90,0]],[16,"glass-of-water",9,[-248],[[17,1,-247,[1,"3d9IppBeJArK1+p1hLljVN"],[6],[2],7]],[0,"63k5Ht5+FNsrzfUOq9UHmj",1,0],[1,8.14,0,0.11],[3,0,1,0,6.123233995736766e-17],[1,100,100,100],[1,0,180,0]],[16,"Progress",22,[-250],[[8,0,-249,[1,"a8u12PslhJd7TvpFHZhBB2"],[56],[2],57]],[0,"27m6k9WbZNl7iIyFbpnS2+",1,0],[1,-0.005,-0.011,-0.081],[3,-0.7671260532351825,-0.01718672496161355,0.015249264281767455,0.6410847797848351],[1,0.96,1.063,1.063],[1,-100.231,0.078,2.632]],[16,"Progress",23,[-252],[[8,0,-251,[1,"573SaRl2tAFpJ12n+76aL4"],[138],[2],139]],[0,"01bPzVkzFCtK0J+26+bQ1o",1,0],[1,0.012,0,0.006],[3,-0.7067133053526521,0.023586098395644545,0.02358609839564454,0.7067133053526522],[1,0.764,0.715,0.764],[1,-90,3.823,0]],[16,"Progress",24,[-254],[[8,0,-253,[1,"c8r06YSBpNwp/5KX4KZBX+"],[194],[2],195]],[0,"c5t8rQeKpBvobLCMI6mo6q",1,0],[1,0.029,0.055,0.032],[3,-0.05962795757394623,-0.32947825055980867,0.21567168970046913,0.9172645808845734],[1,0.746,0.829,0.829],[1,2.083,-39.993,25.782]],[16,"Progress",25,[-256],[[8,0,-255,[1,"e8jHQFABJKE5oogdBlIzWE"],[230],[2],231]],[0,"63kMvq2JFIKKNLV+sa05K9",1,0],[1,0.016,0.004,-0.04],[3,-0.6418981991552988,0.29659181027328513,0.29659181027328513,0.6418981991552989],[1,0.892,0.892,0.892],[1,-90,49.599,0]],[20,"Unlock",18,[-257,-258],[0,"0c7JyFycFIGqN4N6JZOvTE",1,0]],[16,"Ground",38,[-260],[[8,0,-259,[1,"75qvg31ThOdrmk1UcESuCQ"],[298],[2],299]],[0,"e2LewHsnBAgr5RbRWGFmxr",1,0],[1,0,0.01,0],[3,-0.7071067811865478,0,0,0.7071067811865472],[1,0.3,0.3,1],[1,-90.00000000000004,0,0]],[64,"BuySuccess",false,18,[-261,-262],[0,"ddWKOdfCBIwpYSl8i12UKR",1,0]],[19,"Lock",8,[-263,-264],[0,"a7a2bpwCxIao/LQfdmISLi",1,0],[3,0,0.7071067811865475,0,0.7071067811865476],[1,0,90,0]],[21,"BuySuccess",false,8,[-265,-266],[0,"27g9FB/TJKDbuROCH2sVnv",1,0],[3,0,0.7071067811865475,0,0.7071067811865476],[1,0,90,0]],[7,"Cube.018",9,[[5,1,0,-267,[1,"3aC4UkNRhORbCz4zZbPeTX"],[0],[2],1]],[0,"8701w2dZhCG5qj3qu3s9Uq",1,0],[1,4.353,1.099,2.054],[3,0.0009526529492289658,-0.7743038879567667,0.6327870311289366,0.00575801896658581],[1,244.23600000000013,244.23600000000005,244.23600000000005],[1,78.51199999999999,-179.42000000000002,0.3329999999999999]],[7,"Paper-Cup",9,[[5,1,0,-268,[1,"fdiA04bc5B4Kk31Avo5eZF"],[2],[2],3]],[0,"301P6WQCBKBIDDUbRonm0S",1,0],[1,3.749,0.175,-3.442],[3,0.6087834872035927,-0.2943270919320622,0.2599319293893163,0.6893399892266485],[1,72.026,72.02599999999998,72.026],[1,82.89799999999998,-46.24199999999999,6.3611093629270335e-15]],[34,"Juice-in-glass",33,[[5,1,0,-269,[1,"4ceYcCkL1Mj5NlHcjMbFcX"],[4],[2],5]],[0,"30R99UQ+pLnY+skSAmviDc",1,0]],[7,"strawberry-003",10,[[8,0,-270,[1,"ff1Ce8oNdB7ruahcnXI2sg"],[8],[2],9]],[0,"fcxPWN7bVCcr+yFtKcKc7p",1,0],[1,-0.00016687526074259107,0.0004088443888193576,-0.0013892365456821057],[3,0.09006428846074274,0.16341735250634473,0.47420161272683664,0.860416191927572],[1,0.41718815185648717,0.4171881518564873,0.41718815185648717],[1,0,21.508000000000028,57.72100000000001]],[7,"strawberry-004",10,[[8,0,-271,[1,"f59mWZb3BEBL7v+mFNxbTi"],[10],[2],11]],[0,"eaXdltIQVGD5HjLx2mTRto",1,0],[1,0.0010763454317897388,0.0004088443888193576,-0.00011681268251981583],[3,0.09006428846074274,0.16341735250634473,0.47420161272683664,0.860416191927572],[1,0.41718815185648717,0.4171881518564873,0.41718815185648717],[1,0,21.508000000000028,57.72100000000001]],[7,"strawberry-005",10,[[8,0,-272,[1,"e9oUJ9QaVNxKVgWZc7YVJN"],[12],[2],13]],[0,"aa+1hOybBCpICUPLNPdPPo",1,0],[1,0.0012015018773466855,0.0010304547350855236,-0.0009970796829370035],[3,0.13384075892953703,0.1300193024736415,0.20242550504125778,0.9613560979898265],[1,0.4171881518564874,0.41718815185648733,0.4171881518564875],[1,13.062999999999995,12.486000000000013,25.088]],[44,"tomatoes-001",10,[[8,0,-273,[1,"c51JySphNGGZPhTclD6lie"],[14],[2],15]],[0,"51SeEg4rlKIoJDuDJY7X6o",1,0],[1,-0.0010387984981226478,0.0012390488110137672,0.0007384230287859825],[1,0.4171881518564873,0.4171881518564873,0.4171881518564873]],[7,"Banana-001",10,[[8,0,-274,[1,"dfldr8vthOgp/CFejsanzy"],[16],[2],17]],[0,"1fpR1HBIpMja3t1qVXIwfl",1,0],[1,0.0005340008343763074,0.002060909470171047,0.00023779724655819887],[3,-0.3348094897385274,0.1431471324206429,0.2689622746634162,0.8916674261565546],[1,0.41718815185648733,0.4171881518564873,0.41718815185648733],[1,-46.885000000000005,28.13100000000002,22.569000000000003]],[7,"Banana-002",10,[[8,0,-275,[1,"0ff8zzp15JK73Mmuvqd7r9"],[18],[2],19]],[0,"c9IrQNRtJEa6sZgg81OvvZ",1,0],[1,0.00023362536503963513,0.0021485189820609095,-0.0008051731330830196],[3,-0.14050871232940446,0.18596990240617192,0.5099975786388858,0.8279945452362866],[1,0.41718815185648744,0.41718815185648733,0.41718815185648755],[1,-43.808,47.70000000000002,52.400000000000006]],[7,"N_zhuozi005_L",9,[[8,0,-276,[1,"a6uzx/iuBO5YBa0X6dhyF/"],[22],[2],23]],[0,"fbE1WbKhFDXZZrX5p4MshU",1,0],[1,5.77,-0.091,-0.675],[3,-4.3297802811774664e-17,0.7071067811865474,0.7071067811865477,4.329780281177466e-17],[1,2.984279990196228,3.053550124168396,3.6482998728752136],[1,-90.00000000000004,180,7.062250076880254e-31]],[7,"Cube.016",11,[[5,1,0,-277,[1,"21iH8Lck9Cg7Ykzzoy5e9a"],[24],[2],25]],[0,"9fJFvDSxJO2oDNwzY/mZs3",1,0],[1,3.4600000000000004,-4.298,-1.885],[3,2.5121479840107305e-15,0.9999999999999967,-8.146033971075658e-8,6.123213531693967e-17],[1,235.218,235.218,235.21800000000002],[1,0.000009334667326256597,180,2.878709534206436e-13]],[7,"Cylinder.026",11,[[8,0,-278,[1,"b29PRDRchKsovlkIgPr+SQ"],[26],[2],27]],[0,"1aB0h5L+VHS5intYCr2sK3",1,0],[1,3.459,-3.778,-3.846],[3,7.595980149784654e-18,0.9922757471452709,-0.124051769948254,6.075936588065022e-17],[1,235.218,235.218,163.278],[1,14.252,180,0]],[7,"Pizza",11,[[17,1,-279,[1,"1duLXs5pVD/YlbSNc+aEi3"],[28],[2],29]],[0,"76LLbaw7BLP6eKpN44zola",1,0],[1,3.498,-2.248,-3.452],[3,0,1,0,7.100607655044511e-17],[1,93.404,85.931,53.473],[1,0,180,0]],[7,"Cupboard.022",11,[[8,0,-280,[1,"1fhm6E9w9Jvrk7hq2o9UYh"],[30],[2],31]],[0,"7fxtxZmDxBjIebKWWSbgvW",1,0],[1,6.847,-3.378,-4.001],[3,2.615793889866668e-15,0.9999999999999967,-8.14603397107566e-8,6.123212687390898e-17],[1,239.797,235.218,163.278],[1,0.000009334667326256598,180,2.9974789935935453e-13]],[7,"Cupboard.023",11,[[8,0,-281,[1,"dd5pdQyKxFnoy+3MzYNn7b"],[32],[2],33]],[0,"a5VM7L60hCFr4okwnQmW/p",1,0],[1,6.847,-2.208,-4.001],[3,2.615793889866668e-15,0.9999999999999967,-8.14603397107566e-8,6.123212687390898e-17],[1,239.797,235.218,163.278],[1,0.000009334667326256598,180,2.9974789935935453e-13]],[7,"Cupboard.024",11,[[8,0,-282,[1,"231efzpntHc7qwnK+W2PWH"],[34],[2],35]],[0,"f8Khh1HFtBipPkgOMjDHJ5",1,0],[1,6.847,-1.039,-3.99],[3,2.615793889866668e-15,0.9999999999999967,-8.146033971075662e-8,6.123212687390898e-17],[1,239.797,235.218,163.278],[1,0.000009334667326256602,180,2.9974789935935453e-13]],[7,"Cupboard002",11,[[5,1,0,-283,[1,"24dIvdBrtNMYFi4Csys5Vw"],[36],[2],37]],[0,"49/FsgwyRKKrZE52luD2af",1,0],[1,6.847,-4.309,-1.976],[3,2.615793889866668e-15,0.9999999999999967,-8.146033971075658e-8,6.123212687390898e-17],[1,239.797,235.218,235.218],[1,0.000009334667326256597,180,2.9974789935935453e-13]],[7,"Fridge",14,[[8,0,-284,[1,"b080HCC11Dp47XffSPr6oE"],[38],[2],39]],[0,"92SK/32olL2JdDucBCbKiO",1,0],[1,10.863,-4.309,0.4559999999999995],[3,2.5121479769272428e-15,1,7.116336039964486e-31,2.8327694488239903e-16],[1,239.7,239.7,239.7],[1,2.0072121960993894e-44,179.99999999999997,2.8787095318051825e-13]],[7,"Fridge.001",14,[[8,0,-285,[1,"94Q8LycnFBHquLmTMKE/Y5"],[40],[2],41]],[0,"206cXWbsNLyYhVJ9gNjCSg",1,0],[1,9.348,-1.695,-1.6570000000000018],[3,2.5121479769272428e-15,1,7.116336039964486e-31,2.8327694488239903e-16],[1,239.7,239.7,239.7],[1,2.0072121960993894e-44,179.99999999999997,2.8787095318051825e-13]],[7,"Fridge.002",14,[[8,0,-286,[1,"4b++zvgL9F6LJkWhkjUwe8"],[42],[2],43]],[0,"91DYLZzvNE9KamR+DK5gOB",1,0],[1,9.348,3.403,-1.6570000000000018],[3,2.5121479769272428e-15,1,7.116336039964486e-31,2.8327694488239903e-16],[1,239.7,239.7,239.7],[1,2.0072121960993894e-44,179.99999999999997,2.8787095318051825e-13]],[7,"Fridge Magnets",14,[[8,0,-287,[1,"2a9wk7H39HNqqZwqJ2qftF"],[44],[2],45]],[0,"9a9Cq8k4hE3qGoLBOWa2A9",1,0],[1,9.348,3.403,-1.6570000000000018],[3,2.5121479769272428e-15,1,7.116336039964486e-31,2.8327694488239903e-16],[1,239.7,239.7,239.7],[1,2.0072121960993894e-44,179.99999999999997,2.8787095318051825e-13]],[52,"zhi1",false,16,[[13,-288,[1,"80se6sVq5LzIJRTgghiV59"],[46],[2],47]],[0,"afcYJ8ADlKB6ftBxRWqVtB",1,0],[1,0.243,0.162,0],[3,0.9999999999999998,0,0,2.185569414336896e-8],[1,1.7256250381469727,1.7256250381469727,1.7256250381469727],[1,179.99999749552194,0,0]],[52,"zhi2",false,16,[[13,-289,[1,"08hVEtUlVD9KnTKSKdrzti"],[48],[2],49]],[0,"b02b+FEulHM5g85KLpGD7J",1,0],[1,0.754,0.071,0],[3,0.9999999999999998,0,0,2.185569414336896e-8],[1,1.7256250381469727,1.7256250381469727,1.7256250381469727],[1,179.99999749552194,0,0]],[7,"zhi1_1",16,[[13,-290,[1,"85dy4NOhBNB5mTnBlJyE/v"],[50],[2],51]],[0,"f38TCsis1NhbIXQCzFf/MG",1,0],[1,0.252,0.294,0.007],[3,0.9999999999999998,0,0,2.1855694204601304e-8],[1,0.314,0.314,0.076],[1,179.99999749552194,0,0]],[7,"zhi2_2",16,[[13,-291,[1,"4d8JeH/5JIsqwAwfJmPgJt"],[52],[2],53]],[0,"d3G/0clZhKeI4FC8XSfGGt",1,0],[1,0.766,0.209,0.009],[3,0.9999999999999998,0,0,2.185569414336896e-8],[1,0.313,0.313,0.081],[1,179.99999749552194,0,0]],[34,"Progress",34,[[8,0,-292,[1,"2fi4eQQ25NKLdAZsmSg82U"],[54],[2],55]],[0,"a5AWNE00ZGXYj6fmvM/3/B",1,0]],[44,"gutou",2,[[5,1,0,-293,[1,"1baQVIstNLFbIxEUCUXuYK"],[58],[2],59]],[0,"d2FPDDREdNBZp/A821hH8O",1,0],[1,0.004,0.204,0.084],[1,100,100,100]],[6,"Chicken_Part_2",2,[[5,1,0,-294,[1,"d1Oz1rW4ZFsJCRriCE0UWK"],[60],[2],61]],[0,"7bjhLZj4BKm5kDwkzmHUGM",1,0],[1,0.065,0.066,-0.216],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[6,"Chicken_Part_4",2,[[5,1,0,-295,[1,"10wmaxQjlFyr8BZn0vgNK4"],[62],[2],63]],[0,"19TzcQJDJNBJ949Kng2o4L",1,0],[1,-0.03,0.281,-0.224],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[6,"Chicken_Part_5",2,[[5,1,0,-296,[1,"28QJTR25RBy6oW6s4aVS/W"],[64],[2],65]],[0,"5fhYox9HhKFq9R2WmhGYty",1,0],[1,0.005,0.1,-0.332],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[6,"Chicken_Part_6",2,[[5,1,0,-297,[1,"b56NpfyIVKAIcP0GXZb82o"],[66],[2],67]],[0,"90DZPH1AxIm4AaxCSTdWi3",1,0],[1,0.009,0.432,-0.483],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[6,"Chicken_Part_11",2,[[5,1,0,-298,[1,"7cFtuhywxE0JNn4rpxO/J+"],[68],[2],69]],[0,"60awUH1u1NpITckWmVF5MY",1,0],[1,0.043,0.105,-0.634],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[6,"Chicken_Part_12",2,[[5,1,0,-299,[1,"bcPSnYtLdDYarcSsteA3e2"],[70],[2],71]],[0,"23gcvLrrJOr5Noomy8dd3B",1,0],[1,0.156,0.39,-0.237],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[6,"Chicken_Part_17",2,[[5,1,0,-300,[1,"9esHYFIVxHxK0k6hVMRZGy"],[72],[2],73]],[0,"e7oBE28tFMjaV/W2+Bt2xJ",1,0],[1,0.182,0.048,-0.531],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[6,"Chicken_Part_18",2,[[5,1,0,-301,[1,"03h1s8bcJAZqhiH/clzJfc"],[74],[2],75]],[0,"a3K/YpS1RAt7/4l/K/pIut",1,0],[1,0.21,0.289,-0.663],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[6,"Chicken_Part_13_Part_2",2,[[5,1,0,-302,[1,"7fhckvJSdBBaK/mxnPLMwE"],[76],[2],77]],[0,"c7PyG2GfxGm4+M9NbbykQZ",1,0],[1,-0.035,0.484,-0.297],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[6,"Chicken_Part_7_Part_1",2,[[5,1,0,-303,[1,"53nlMjcrFCWKlndrQ7Kr9v"],[78],[2],79]],[0,"e8CxWo8wRNZpwShOB6o6bw",1,0],[1,-0.091,0.433,-0.068],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[6,"Chicken_Part_7_Part_2",2,[[5,1,0,-304,[1,"53QW6xWXFH2bTPJS20sLkg"],[80],[2],81]],[0,"57hQ37Fy5Iop9Wk/dUbNj6",1,0],[1,0.056,0.418,-0.068],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[6,"Chicken_Part_14_Part_1_Part_1",2,[[5,1,0,-305,[1,"7cmUAgkwBIdKNDOSqJ66zN"],[82],[2],83]],[0,"91OyHkZqlJx4pf3XCRq0Lp",1,0],[1,0.1,0.279,0.079],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[6,"Chicken_Part_14_Part_1_Part_2",2,[[5,1,0,-306,[1,"c9MG1Fh2pHe542dJw4e0VM"],[84],[2],85]],[0,"d6jlrQOPNNDLM84bH44nwT",1,0],[1,0.105,0.118,0.076],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[6,"Chicken_Part_9_Part_1",2,[[5,1,0,-307,[1,"6dHqyppXtJZLVXsrCk7tCE"],[86],[2],87]],[0,"4583qm09tPY7JwxRKA0iMA",1,0],[1,0.225,0.491,-0.494],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[6,"Chicken_Part_9_Part_2",2,[[5,1,0,-308,[1,"1fAhh2BVdGoLv17ITbjRs7"],[88],[2],89]],[0,"55kh/MVvJJ1aSWzwTJdjAS",1,0],[1,0.239,0.298,-0.487],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[6,"Chicken_Part_15_Part_1",2,[[5,1,0,-309,[1,"9dzSWWqtxFMqCx8ot4bR7Q"],[90],[2],91]],[0,"1bs2WTiNdLFpQDmDJM1FR0",1,0],[1,0.259,0.284,-0.195],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[6,"Chicken_Part_15_Part_2",2,[[5,1,0,-310,[1,"5dEGfPStRDqZSLYJHVTW6l"],[92],[2],93]],[0,"f0xj8SoNlFMLZjF/UKAw2S",1,0],[1,0.255,0.244,-0.346],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[6,"Chicken_Part_19_Part_1",2,[[5,1,0,-311,[1,"aaEeoDzWNAVLhQvcvI4pgS"],[94],[2],95]],[0,"67564YoXlImIIyEZENm2hM",1,0],[1,0.184,0.038,-0.285],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[6,"Chicken_Part_19_Part_2",2,[[5,1,0,-312,[1,"7fAkSA7JZIAaAoNp45w+7S"],[96],[2],97]],[0,"abspEiRt9L9K8zQrU1rpAM",1,0],[1,0.168,0.084,-0.1],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[6,"Chicken_Part_20_Part_2",2,[[5,1,0,-313,[1,"28TB8OZm1Egoa19trFqj7+"],[98],[2],99]],[0,"8cHWj1uwROvKnsw67OF+9S",1,0],[1,-0.014,0.255,-0.688],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[6,"Chicken_Part_1_Part_1",2,[[5,1,0,-314,[1,"73VYoT3ZpK95UssMEhOYxJ"],[100],[2],101]],[0,"4a2uQGcLpGZrW8LYPDi2YO",1,0],[1,-0.257,0.284,-0.259],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[6,"Chicken_Part_1_Part_2",2,[[5,1,0,-315,[1,"75RdXE8QFFZZJDWNzhDllv"],[102],[2],103]],[0,"43dudrTdpOOov3ekiRPiAm",1,0],[1,-0.25,0.125,-0.257],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[6,"Chicken_Part_10_Part_1",2,[[5,1,0,-316,[1,"09w3MC95ZAgbwKKP4J0urq"],[104],[2],105]],[0,"d9iNfgCz9MZqKOKRbc10Pf",1,0],[1,-0.273,0.167,-0.523],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[6,"Chicken_Part_10_Part_2",2,[[5,1,0,-317,[1,"a1xDo8SopMI5kf/0HQKcLj"],[106],[2],107]],[0,"f0GCo0TwxKVI/77ppmTQxI",1,0],[1,-0.252,0.121,-0.44],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[6,"Chicken_Part_16_Part_1",2,[[5,1,0,-318,[1,"16+z9tgyhBfYJTI9yqNP2s"],[108],[2],109]],[0,"01GaBENj5Far5AyA3wsAJg",1,0],[1,0.014,0.073,-0.482],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[6,"Chicken_Part_16_Part_2",2,[[5,1,0,-319,[1,"aeA5ZLEyBJjJ7+pAfULntQ"],[110],[2],111]],[0,"1cq3G2aDtII43PzocB6G/D",1,0],[1,-0.106,0.083,-0.558],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[6,"Chicken_Part_3_Part_1",2,[[5,1,0,-320,[1,"51DWudg/lPXpBc7bmJoLYr"],[112],[2],113]],[0,"65XWsSYEZPV5rhq3xbHXPw",1,0],[1,-0.051,0.138,-0.088],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[6,"Chicken_Part_3_Part_2",2,[[5,1,0,-321,[1,"b6Y6R82o5OGZsZYLIjC3z1"],[114],[2],115]],[0,"94HXCNvt5J/Zz9iS7jxZEG",1,0],[1,-0.081,0.257,-0.075],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[6,"Chicken_Part_14_Part_2_Part_1",2,[[5,1,0,-322,[1,"85bD0jJZFPZ69uDtq0QFH6"],[116],[2],117]],[0,"67OnR3P/ZMe5joMj74Bdsi",1,0],[1,-0.032,0.158,0.101],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[6,"Chicken_Part_14_Part_2_Part_2",2,[[5,1,0,-323,[1,"25swZ3UTJNb5zbtTX7bPe2"],[118],[2],119]],[0,"19E1GLJ3dFm4pajRyJFvWK",1,0],[1,-0.017,0.21,0.137],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[6,"Chicken_Part_20_Part_1_Part_1",2,[[5,1,0,-324,[1,"89mgpLL2JBT5R0hTykjn4c"],[120],[2],121]],[0,"47WVmlCyVNu68pu3Wzfplf",1,0],[1,-0.07,0.412,-0.707],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[6,"Chicken_Part_20_Part_1_Part_2",2,[[5,1,0,-325,[1,"ea/qRkM2xHHpkLYSwjdQ5x"],[122],[2],123]],[0,"321bB/rEVEmZjOxhtZrX/O",1,0],[1,0.073,0.408,-0.687],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[6,"Chicken_Part_8_Part_2_Part_1",2,[[5,1,0,-326,[1,"51IZshiXdLVLlAmUOiVgR0"],[124],[2],125]],[0,"3dpkQ2pJxLFZ8Ha/mo81SX",1,0],[1,-0.205,0.325,-0.577],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[6,"Chicken_Part_8_Part_2_Part_2",2,[[5,1,0,-327,[1,"6adgm/hbFOcIrtHCi8iRqs"],[126],[2],127]],[0,"ba0+w4GzBBy5Z9TAVVeExe",1,0],[1,-0.219,0.215,-0.61],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[6,"Chicken_Part_8_Part_1_Part_1",2,[[5,1,0,-328,[1,"fai/fT1OpO8JzEjTdOkM1X"],[128],[2],129]],[0,"cam6iF29VADrJ9KO/4Wil8",1,0],[1,-0.209,0.395,-0.432],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[6,"Chicken_Part_8_Part_1_Part_2",2,[[5,1,0,-329,[1,"2bwR4Cm5VMfpmZkIeOfTbd"],[130],[2],131]],[0,"f3Qczh89FGa4JDm+tXI7rX",1,0],[1,-0.158,0.394,-0.574],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[6,"Chicken_Part_13_Part_1_Part_1",2,[[5,1,0,-330,[1,"4aaUy53xtChpK01SG7MOcR"],[132],[2],133]],[0,"1eermJnM9DT7D4GkGP2YDm",1,0],[1,-0.199,0.438,-0.272],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[6,"Chicken_Part_13_Part_1_Part_2",2,[[5,1,0,-331,[1,"e2RyJB/vZG64mOVsOmQNNa"],[134],[2],135]],[0,"e9ilKzlGxIt4ZXwQd6oA20",1,0],[1,-0.157,0.51,-0.367],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[34,"Progress",35,[[8,0,-332,[1,"3aWhXNNZFKEr+iQHKgiutU"],[136],[2],137]],[0,"2fGX9b7xREW708QxxjtqIM",1,0]],[6,"nailao2_Part_1",4,[[5,1,0,-333,[1,"d3CqqGSgFKfbG1bTymXk5n"],[140],[2],141]],[0,"9aWN40h+NNw5yuHMiTxM5o",1,0],[1,-0.11848044395446777,0.05134594812989235,0.04340054467320442],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[6,"nailao2_Part_2",4,[[5,1,0,-334,[1,"0cDRcNO79I6rW7XOoCXhU9"],[142],[2],143]],[0,"73hgcMvGRJC7vPet5OR11F",1,0],[1,-0.25635895133018494,0.04620754346251488,0.019134873524308205],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[6,"nailao2_Part_3",4,[[5,1,0,-335,[1,"1dVx2iFuJC+KeiT4LTYWER"],[144],[2],145]],[0,"b0AWap/7VGk7o6qfOIJLt0",1,0],[1,0.04218505695462227,0.051345907151699066,0.18630348145961761],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[6,"nailao2_Part_5",4,[[5,1,0,-336,[1,"875NPNzANPjpiQ6AsmIQSw"],[146],[2],147]],[0,"dbxwV+mCtEFKVAom4mRP8E",1,0],[1,0.041440557688474655,0.0513455830514431,-0.21284575760364532],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[6,"nailao2_Part_6",4,[[5,1,0,-337,[1,"6byM6OcKZPIYCUedSiwsCU"],[148],[2],149]],[0,"bdS9aQVh9HLIkIKfAvCHKZ",1,0],[1,-0.30109938979148865,0.05134410783648491,0.0110763069242239],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[6,"nailao2_Part_8",4,[[5,1,0,-338,[1,"d7DZOsyAFIYbzHzqEj4njb"],[150],[2],151]],[0,"2ePjOgA3dAD7zBIC5XMMHU",1,0],[1,0.05912840738892555,0.043786123394966125,0.06428155303001404],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[6,"nailao2_Part_9",4,[[5,1,0,-339,[1,"6fbzGsSnhL54wcJO7O2h2v"],[152],[2],153]],[0,"336aigKmNBSor6zMGiNo0F",1,0],[1,0.016443191096186638,0.0513450987637043,-0.13364320993423462],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[6,"nailao2_Part_10",4,[[5,1,0,-340,[1,"24tYi4g0NHBr/cyDy/AZaT"],[154],[2],155]],[0,"1cnatnAKZLHbVkqTyqKRTb",1,0],[1,0.2460845559835434,0.05134517699480057,-0.1707143932580948],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[6,"nailao2_Part_11",4,[[5,1,0,-341,[1,"37WXoOPBBMnZJsuyE7G3lT"],[156],[2],157]],[0,"11zX8APOxILaKQYx8Uc4A8",1,0],[1,-0.22285881638526917,0.042366113513708115,-0.01759173348546028],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[6,"nailao2_Part_12",4,[[5,1,0,-342,[1,"3ffwBQhnZMCqjGFygKkVyq"],[158],[2],159]],[0,"f1IE1n+ARKxKefGvqa+YJW",1,0],[1,-0.21736913919448853,0.07602936029434204,-0.03070426918566227],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[6,"nailao2_Part_14",4,[[5,1,0,-343,[1,"dcA+biGR9GCqe5N630B3gt"],[160],[2],161]],[0,"2flzedlfZFjLTIAoH2K8Dd",1,0],[1,-0.12976539134979248,0.051345013082027435,-0.021522216498851776],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[6,"nailao2_Part_16",4,[[5,1,0,-344,[1,"48fa8dUEtFqqJW+B+s4PZ5"],[162],[2],163]],[0,"d4uXVRNzRLqaDamDEc8XoL",1,0],[1,0.13264751434326172,0.051345180720090866,-0.0580892413854599],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[6,"nailao2_Part_17",4,[[5,1,0,-345,[1,"f3hl05nA9H5KHp9ZSyX0wi"],[164],[2],165]],[0,"20qjyDbZZM+66136VHK7en",1,0],[1,0.0933920368552208,0.05134525150060654,0.22063082456588745],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[6,"nailao2_Part_18",4,[[5,1,0,-346,[1,"d9o277CfhBWq10zP9HEOCh"],[166],[2],167]],[0,"8fCJPwnZZPEaBiKO3+nuI6",1,0],[1,0.05695232376456261,0.06777632236480713,0.08257278800010681],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[6,"nailao2_Part_19",4,[[5,1,0,-347,[1,"8fYKKGMsJDVZLfd4C7A3uJ"],[168],[2],169]],[0,"6dJHsPj91LVaVCLaPbzZNm",1,0],[1,-0.06824957579374313,0.051346320658922195,0.14592108130455017],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[6,"nailao2_Part_20",4,[[5,1,0,-348,[1,"04KyS3GNNHQ4wUcQAxk0IY"],[170],[2],171]],[0,"99OESWQX1BK6vfCyHkJVjU",1,0],[1,0.22781632840633392,0.05134531110525131,-0.23397743701934814],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[6,"nailao2_Part_4_Part_2_Part_1",4,[[5,1,0,-349,[1,"ed7vksCFJIBYMdnenXQKNR"],[172],[2],173]],[0,"7cjplgxEtMJZUc4NsCDYNk",1,0],[1,0.22872573137283325,0.06499402225017548,0.24033325910568237],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[6,"nailao2_Part_4_Part_2_Part_2",4,[[5,1,0,-350,[1,"950AgWKVlA1491DOFqmjhd"],[174],[2],175]],[0,"e9/TLR95NH/JJdH6hziTVG",1,0],[1,0.2610858082771301,0.06325285881757736,0.16110074520111084],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[6,"nailao2_Part_7_Part_1",4,[[5,1,0,-351,[1,"9dPvJYidlDWbT0ZtT/CuKF"],[176],[2],177]],[0,"daJpUDR+lP/IKp2n0JW3Wa",1,0],[1,0.3003411889076233,0.05134517699480057,0.07878272235393524],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[6,"nailao2_Part_7_Part_2",4,[[5,1,0,-352,[1,"27tnSNDnlHw5mYcBoQshXL"],[178],[2],179]],[0,"33g4vZWPxDMKKWloXGj+DQ",1,0],[1,0.28010037541389465,0.051345180720090866,-0.026104716584086418],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[6,"nailao2_Part_15_Part_1",4,[[5,1,0,-353,[1,"c946lLuFRM3rmz7uUQRdpL"],[180],[2],181]],[0,"94yAQfzAZMpI8Sc/hMVtW8",1,0],[1,0.06056024506688118,0.06305058300495148,-0.05484192073345184],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[6,"nailao2_Part_15_Part_2",4,[[5,1,0,-354,[1,"b7x1t1OVVArbEwpbeU8HUA"],[182],[2],183]],[0,"04f40yJiRPbov3qjCdwPpy",1,0],[1,-0.00648189801722765,0.05134553834795952,-0.05461227521300316],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[6,"nailao2_Part_13_Part_1",4,[[5,1,0,-355,[1,"a9QZLQj9NGNLDBHMolZhmf"],[184],[2],185]],[0,"c9S1hLRXJGLIrLC95nTyuq",1,0],[1,0.13467861711978912,0.051345616579055786,-0.2792183458805084],[3,-0.7071067811865477,0,0,0.7071067811865474],[1,-90.00000000000003,0,0]],[6,"nailao2_Part_13_Part_2",4,[[5,1,0,-356,[1,"f0PPPf5rZO8aj//UEJWaQL"],[186],[2],187]],[0,"32hURcBFpL6rI0RTFpTumn",1,0],[1,0.13812896609306335,0.05134554207324982,-0.17638038098812103],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[6,"nailao2_Part_4_Part_1_Part_1",4,[[5,1,0,-357,[1,"826GYqHYpLAqpKw94/oc8Y"],[188],[2],189]],[0,"44w5mqcLlDsbfTwkQYHons",1,0],[1,0.24890244007110596,0.05134522542357445,0.14643262326717377],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[6,"nailao2_Part_4_Part_1_Part_2",4,[[5,1,0,-358,[1,"b3HGQaChFEUK+50M1buOaw"],[190],[2],191]],[0,"d9/2s8RsZPP6HmKKSp1jSK",1,0],[1,0.20910502970218658,0.05134374648332596,0.22961807250976562],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[34,"Progress",36,[[8,0,-359,[1,"16vsLveCFDnLSq6DKLu/RT"],[192],[2],193]],[0,"0706u77wdDaYOYZWpiPtaD",1,0]],[6,"Banana_Part_1",5,[[5,1,0,-360,[1,"5flq4plMpHZoxmRRlYPTld"],[196],[2],197]],[0,"c6CjZUGs9BranpbITt5Ttg",1,0],[1,0.19,-0.214,0.233],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[6,"Banana_Part_2",5,[[5,1,0,-361,[1,"fcD7jFQoFCPJue3uTL88mN"],[198],[2],199]],[0,"5bSpt5YeFAy5Nj0KK1YD4s",1,0],[1,0.061,-0.22,0.239],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[6,"Banana_Part_3",5,[[5,1,0,-362,[1,"96cv9skzhBh70sAQIG2+Cm"],[200],[2],201]],[0,"293TUI4p1PMKliD50e4UTf",1,0],[1,-0.162,0.004,-0.004],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[6,"Banana_Part_4",5,[[5,1,0,-363,[1,"2fotWQyT5PBpaYTY1rd7cr"],[202],[2],203]],[0,"eeas7vWSVLSZ5iObdWKLnL",1,0],[1,0.004,-0.213,0.093],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[6,"Banana_Part_5",5,[[5,1,0,-364,[1,"584QFcAYpMbLrmCp5z1Srb"],[204],[2],205]],[0,"09mXMdI0NME5+AMZMILlMx",1,0],[1,-0.169,0.039,0.134],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[6,"Banana_Part_6",5,[[5,1,0,-365,[1,"acm6twKR9N1auoYZFzZCuf"],[206],[2],207]],[0,"280eHKJu1EZ5VaYuYb6TZj",1,0],[1,0.02,-0.154,0.054],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[6,"Banana_Part_7",5,[[5,1,0,-366,[1,"06DtQqu/lFKpz2XWtdetuQ"],[208],[2],209]],[0,"69PBVbtJhKobpYL2ISAnQH",1,0],[1,-0.154,0.165,0.054],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[6,"Banana_Part_8",5,[[5,1,0,-367,[1,"c1ozppqZdNQp6XcgU+Tt2X"],[210],[2],211]],[0,"9aKLGJRa9C56mn8aXL023u",1,0],[1,-0.105,-0.114,0.087],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[6,"Banana_Part_9",5,[[5,1,0,-368,[1,"be/hQ2PINMyoZ+NjbQ7p5X"],[212],[2],213]],[0,"f6st4VHEFKTL04paZo5X5M",1,0],[1,0.024,-0.073,0.092],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[6,"Banana_Part_10",5,[[5,1,0,-369,[1,"93GB35yeRK5bxgjLM27G/9"],[214],[2],215]],[0,"cfsAxtXXhCaIimXWRKcFKp",1,0],[1,0.002,-0.248,0.155],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[6,"Banana_Part_11",5,[[5,1,0,-370,[1,"adQzaJVZxDOLmwdpEulRb5"],[216],[2],217]],[0,"26BKr7VMlIFY6J5ItSBMl3",1,0],[1,-0.052,-0.16,0.165],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[6,"Banana_Part_13",5,[[5,1,0,-371,[1,"c3c54vxzZLNqSTVuc1U879"],[218],[2],219]],[0,"c4DUrx1fpIcY8Gk34pVK0Q",1,0],[1,-0.155,0.159,-0.028],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[6,"Banana_Part_14",5,[[5,1,0,-372,[1,"cbyzW1b0tJM7EIhpR+7/98"],[220],[2],221]],[0,"22RpNGRRNKPZyRNi9jLeo0",1,0],[1,-0.055,0.06,0.093],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[6,"Banana_Part_15",5,[[5,1,0,-373,[1,"38Gd7shHJLnJIaMu6Sk4KM"],[222],[2],223]],[0,"64K5MP9m5JM5BZgDbeFJm5",1,0],[1,0.111,-0.242,0.152],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[6,"Banana_Part_12_Part_1",5,[[5,1,0,-374,[1,"96AxdJv7dDRai8jrqYKppb"],[224],[2],225]],[0,"10h4goZ8pHZ7cU+urSMa29",1,0],[1,-0.161,0.371,0.049],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[6,"Banana_Part_12_Part_2",5,[[5,1,0,-375,[1,"8d7HnzGftOq6+Wk3lf35Tp"],[226],[2],227]],[0,"e8SCCQC0VDMIG0J+5XXZ+d",1,0],[1,-0.162,0.447,0.059],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[34,"Progress",37,[[8,0,-376,[1,"8fLy3V9WpGtboR1Oxqxl8N"],[228],[2],229]],[0,"24k/vqByFLiJKAXVUBUh4F",1,0]],[6,"tomatoes1_Part_1",3,[[5,1,0,-377,[1,"80lSPqm6FK1pbCo6VeZTi7"],[232],[2],233]],[0,"baVC3DZaZPSZvFFYsbtjfc",1,0],[1,0.176,0.017,0.014],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[6,"tomatoes1_Part_2",3,[[5,1,0,-378,[1,"e5M7Xc/JJGOaCoLVelhaiL"],[234],[2],235]],[0,"a0JaQV86dKwbvdUKFwk34i",1,0],[1,0.074,0.017,-0.034],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[6,"tomatoes1_Part_4",3,[[5,1,0,-379,[1,"4eamK335ZCc6OLGaH9Y8Es"],[236],[2],237]],[0,"74AYCgrZhJz4IGzzAreLh8",1,0],[1,-0.03,0.017,-0.105],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[6,"tomatoes_Part_1",3,[[5,1,0,-380,[1,"caZc2NUZpBq4Enw+tLRVqT"],[238],[2],239]],[0,"4adEzC6sNPyLqQ7NX+ZzAo",1,0],[1,-0.195,0.204,0.14],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[6,"tomatoes_Part_2",3,[[5,1,0,-381,[1,"6fNNcxH1ZIHozZCYjxzaSl"],[240],[2],241]],[0,"06M0+0tLRJMLH4tP7RODN7",1,0],[1,-0.061,0.194,0.23],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[6,"tomatoes_Part_3",3,[[5,1,0,-382,[1,"fddzG+/55Ai6vykqm0GdPP"],[242],[2],243]],[0,"baTXORYb5JDZkJvkBR+X1B",1,0],[1,0.098,0.098,0.107],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[6,"tomatoes_Part_4",3,[[5,1,0,-383,[1,"7bUsoj1XRHJIpZqIc2lkmi"],[244],[2],245]],[0,"00E/6NcIJLm4onqmGbpswM",1,0],[1,-0.044,0.134,0.146],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[6,"tomatoes_Part_5",3,[[5,1,0,-384,[1,"96wgxiQApC+pi86kNZDPdX"],[246],[2],247]],[0,"e2I2+HDnVPI5mpfbyFcbFq",1,0],[1,-0.183,0.309,0.038],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[6,"tomatoes_Part_6",3,[[5,1,0,-385,[1,"8585By2TlG0aB8tsLXTZjL"],[248],[2],249]],[0,"a44YRVstVEz4hFkqogE9QT",1,0],[1,0.12,0.223,0.08],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[6,"tomatoes_Part_7",3,[[5,1,0,-386,[1,"2eQ4vVduxFD4hP3P/CM60e"],[250],[2],251]],[0,"42Sfv/hYFKBaHLjnanIQ5F",1,0],[1,0.021,0.323,0.197],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[6,"tomatoes_Part_8",3,[[5,1,0,-387,[1,"a8JfjVAFpJZ7AlPLxM9DrT"],[252],[2],253]],[0,"4fsFH/rOFJeJkzpyAwjFlT",1,0],[1,0.028,0.096,0.041],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[6,"tomatoes_Part_9",3,[[5,1,0,-388,[1,"15+FBHJWpLhLvMVtyut4j5"],[254],[2],255]],[0,"58w69bthFGe47S0MmAOt/D",1,0],[1,-0.147,0.174,0.126],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[6,"tomatoes_Part_10",3,[[5,1,0,-389,[1,"28OuBGmSJKJLhRqlsGIB+B"],[256],[2],257]],[0,"4fqjbOp91GQYGlaj2y8AxW",1,0],[1,-0.127,0.102,0.153],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[6,"tomatoes_Part_11",3,[[5,1,0,-390,[1,"8el541K41CbbHtzmzLfmSo"],[258],[2],259]],[0,"302kvqeo5KW4QatuhJkz1D",1,0],[1,-0.008,0.287,-0.107],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[6,"tomatoes_Part_12",3,[[5,1,0,-391,[1,"74UJZ5wZtMHonjUl2N7zC2"],[260],[2],261]],[0,"70OBotAR9G7IwfAFx+HDSD",1,0],[1,-0.137,0.113,-0.07],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[6,"tomatoes_Part_13",3,[[5,1,0,-392,[1,"f8WPsnZC5OQIEndmrmWVb9"],[262],[2],263]],[0,"a5uGTGqVRPiKyVEp538G6U",1,0],[1,-0.138,0.099,0.085],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[6,"tomatoes_Part_14",3,[[5,1,0,-393,[1,"01PJTtjmhLjqubM8dPL9uk"],[264],[2],265]],[0,"04lumCCkxAW4r7HldYXofP",1,0],[1,-0.133,0.344,0.138],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[6,"tomatoes_Part_15",3,[[5,1,0,-394,[1,"aet8KvtiZJIZCOW7zQIzuB"],[266],[2],267]],[0,"eeHy+5fAhNwJ/QxCzNHDWC",1,0],[1,0.132,0.089,0.03],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[6,"tomatoes_Part_16",3,[[5,1,0,-395,[1,"e5NGBMrVVPrYNvrAyxToJO"],[268],[2],269]],[0,"f08o0KW7JPpIs0Bj3+vTar",1,0],[1,-0.09,0.265,-0.229],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[6,"tomatoes_Part_17",3,[[5,1,0,-396,[1,"5cJ5gtTfVM9bijfeHrSCBH"],[270],[2],271]],[0,"9auxnJKEtOAp2qyxPBOgpR",1,0],[1,-0.104,0.097,0.043],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[6,"tomatoes_Part_19",3,[[5,1,0,-397,[1,"2bvQvMAOVPQq4S/8uce9zo"],[272],[2],273]],[0,"f6FqYYZSBCZIRea8NDT6vu",1,0],[1,-0.015,0.301,0.081],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[6,"tomatoes_Part_20",3,[[5,1,0,-398,[1,"7fsn+9fG9JKKtYdxBV37ON"],[274],[2],275]],[0,"472RGGWw9CIa4GNU6a6tk/",1,0],[1,-0.164,0.141,0.164],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[6,"tomatoes_Part_22",3,[[5,1,0,-399,[1,"61YLY4HDBM1K4yn0Er1tSU"],[276],[2],277]],[0,"264+RTRH1GF5LFonXYlGhD",1,0],[1,0.095,0.198,0.153],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[6,"tomatoes_Part_23",3,[[5,1,0,-400,[1,"bdUFJv9FRCvbxSFrcGaTOV"],[278],[2],279]],[0,"65o9RAephJn6z26LJwvfE1",1,0],[1,-0.008,0.2,-0.204],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[6,"tomatoes_Part_21_Part_1",3,[[5,1,0,-401,[1,"a1mUXC++RNHYrvLWzK7Dqz"],[280],[2],281]],[0,"faTDu30YhFT4QCkHz7zrUG",1,0],[1,0.014,0.104,-0.134],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[6,"tomatoes_Part_21_Part_2",3,[[5,1,0,-402,[1,"b3cRyVxyNNbqLmc3GJqvrO"],[282],[2],283]],[0,"4eG5+VohpDCqLKcSR2lfcL",1,0],[1,0.129,0.149,-0.146],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[6,"tomatoes_Part_18_Part_1",3,[[5,1,0,-403,[1,"a5ZFi2yNhPHZ2LJcz6Kkei"],[284],[2],285]],[0,"8dkBTso7JPhpAPNzuHpDph",1,0],[1,-0.192,0.385,-0.127],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[6,"tomatoes_Part_18_Part_2",3,[[5,1,0,-404,[1,"d4J7b5hDlGEa1he4lSh/lq"],[286],[2],287]],[0,"89ibTs70BORLRTVeP6GHxu",1,0],[1,-0.185,0.214,-0.133],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[6,"tomatoes1_Part_5_Part_1",3,[[5,1,0,-405,[1,"d8IyDEsJNHeKSylPun+fNJ"],[288],[2],289]],[0,"86xN3qj4hFTIS6Vu7wSs6u",1,0],[1,0.131,0.017,-0.156],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[6,"tomatoes1_Part_5_Part_2",3,[[5,1,0,-406,[1,"2a2Ql+xJpAIb4j0An1XWRz"],[290],[2],291]],[0,"1bgNfzKu1Ph5D7gOaGQT3S",1,0],[1,0.276,0.017,-0.187],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[6,"tomatoes1_Part_3_Part_1",3,[[5,1,0,-407,[1,"d7eI8p2wVMYZm7uu7fqHAS"],[292],[2],293]],[0,"eejkPoGHJGfaHZ5r/9VTad",1,0],[1,0.334,0.017,-0.112],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[6,"tomatoes1_Part_3_Part_2",3,[[5,1,0,-408,[1,"fcZU3SxVJPE4b9gDOY/l1W"],[294],[2],295]],[0,"64NQn1FX9GRZeWKxqxGmyi",1,0],[1,0.278,0.017,-0.045],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[65,"Progress",39,[[8,0,-409,[1,"90RPNv6gtNEp4woB79C2Sp"],[296],[2],297]],[0,"dd402fZF1PXK8NwuNZk+Nj",1,0],[1,0,0,0.001]],[7,"budong",38,[[8,0,-410,[1,"bc0rHX1i9AcZBd65XI80Ue"],[300],[2],301]],[0,"1eorY4F/VDOZeb6lTFZl1H",1,0],[1,-0.10099999999999998,-0.0010000000000000009,-0.178],[3,-0.7071067811865477,0,0,0.7071067811865474],[1,10,9.24,10],[1,-90.00000000000004,0,0]],[7,"ChaoXue",40,[[8,0,-411,[1,"81HZqkVBhBB6moPGQcXU9/"],[302],[2],303]],[0,"d5f2sj81ZCfp9oay4MK779",1,0],[1,-0.041,-0.081,0.06],[3,-0.7071067811865475,0,0,0.7071067811865476],[1,10.08,10.080000000000002,6.240000000000001],[1,-89.99999999999999,0,0]],[44,"Collision",40,[[72,true,-412,[1,"66OvA289NFar/N4WFddbzw"]]],[0,"2b28xxnGdGeaPgBz2ZQ/Mn",1,0],[1,-0.07,0,0.051],[1,0.23,0.23,0.23]],[19,"Lock",19,[-413],[0,"3dp3ufZnhFcLydyurZAWDa",1,0],[3,0,0.7071067811865475,0,0.7071067811865476],[1,0,90,0]],[7,"zhongzhi2",189,[[17,1,-414,[1,"9c0FtrMIlIrZNgIS4TLuPU"],[304],[2],305]],[0,"3eDQ3sMbpAZ5i1rkVP6bex",1,0],[1,0,-0.037,0],[3,4.208626870593668e-16,-0.7071067811865475,-4.208626870593669e-16,0.7071067811865476],[1,6.946421781182288,6.785707652568816,6.830707608580593],[1,0,-90,-6.820371792382863e-14]],[21,"Unlock",false,19,[12],[0,"4ezYFWBbtCL6rchgh/uWtI",1,0],[3,0,0.7071067811865475,0,0.7071067811865476],[1,0,90,0]],[7,"zhongzhi_plane",12,[[13,-415,[1,"cfqDjY8X1Kk43XYfeN0TUU"],[306],[2],307]],[0,"2fmBkdwO9ImLbJXe3ju84t",1,0],[1,0,0.014,0],[3,-0.5000000000000001,0.49999999999999983,0.5000000000000001,0.4999999999999999],[1,9.95,9.791,9.95],[1,-90.00000000000003,90,0]],[7,"Progress",12,[[13,-416,[1,"70Q1XfAw5G57ad+pKvXVa1"],[308],[2],309]],[0,"62gLrFNSJD9oStLpDkzFFl",1,0],[1,0,0.017,0],[3,-0.5000000000000001,0.49999999999999983,0.5000000000000001,0.4999999999999999],[1,9.95,9.791,9.95],[1,-90.00000000000003,90,0]],[7,"zhongzhi_touming",12,[[13,-417,[1,"faNXxy9Q5PpbYxZ7T3hl78"],[310],[2],311]],[0,"41JjDJLIlJE4OTwoNAPg2A",1,0],[1,-0.043,0.014,0],[3,-0.5000000000000002,0.4999999999999998,0.5000000000000001,0.49999999999999983],[1,11.9,12.163,10],[1,-90.00000000000004,90,0]],[7,"tu",12,[[13,-418,[1,"a4g3KzH0xEsq2vt6q3BQOJ"],[312],[2],313]],[0,"9dBHo/yiFMHqspkghtZdh1",1,0],[1,0,0.016,0.154],[3,-4.329780281177466e-17,0.7071067811865476,0.7071067811865475,4.329780281177467e-17],[1,3.796,3.88,3.19],[1,-90,180,0]],[7,"zhongzhi_zi",12,[[13,-419,[1,"f05OQojixE8oDZsFLfG6fe"],[314],[2],315]],[0,"0eSMQkmeBF2JYCZ+VSQP1D",1,0],[1,0,0.016,-0.004],[3,-4.329780281177468e-17,0.7071067811865472,0.7071067811865478,4.3297802811774646e-17],[1,13.103,9.98,9.138],[1,-90.00000000000004,180,0]],[22,"zhongzhi2",12,[[17,1,-420,[1,"c8Afh8Bl5B06ByaAnV/iHF"],[316],[2],317]],[0,"0bYOvYE3hLX4BF9aT9OyQT",1,0],[1,0,-0.039,0],[1,6.946421781182286,6.785707652568816,6.830707608580592],[1,-0.000004325805792733001,0.000009660709178781123,-6.820371662360335e-14]],[22,"zhongzhi",27,[[5,1,0,-421,[1,"b8uTvqBeJOTraIrflZskiJ"],[318],[2],319]],[0,"51cnkvklVLv5gnXZ1u0sk8",1,0],[1,0,0.021,0],[1,6.946421781182288,6.785707652568816,6.830707608580594],[1,-0.000004325805792733,0.000009660709197867142,-6.820371694708857e-14]],[22,"zhongzhi2",27,[[17,1,-422,[1,"d9L7mTPF1AjJHLqSsoJM/f"],[320],[2],321]],[0,"edloXcbeJN/JjAadk5TiE6",1,0],[1,0,-0.034,0],[1,6.946421781182288,6.785707652568816,6.830707608580594],[1,-0.000004325805792733001,0.000009660709178781123,-6.820371662360326e-14]],[7,"zhongzhi3",27,[[13,-423,[1,"1cXP/wPmFAZaZIQdXGMVbq"],[322],[2],323]],[0,"20zUmg1fhNX7cc8zHLbRRL",1,0],[1,-0.389,-0.053,0.226],[3,-0.5,0.5,0.4999999999999999,0.5000000000000001],[1,9.37174,9.5305,9.31],[1,-89.99999999999999,89.99999999999999,0]],[19,"MoGu",26,[6],[0,"d5wDlGXsdDy7wtvIWZU5gD",1,0],[3,-6.972611193684198e-32,-0.7071067811865475,-6.972611193684197e-32,0.7071067811865476],[1,-1.1299600123008406e-29,-89.99999999999999,0]],[7,"mogu1",6,[[5,1,0,-424,[1,"6bE3nd4GpOJYaSDErwUqnk"],[324],[2],325]],[0,"68fiU3yw5OkKHH/X9TeiS/",1,0],[1,0.219,0,0.039],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,10,10,10],[1,-90.00000000000003,0,0]],[7,"mogu2",6,[[5,1,0,-425,[1,"5fUH/m/u1OJ4hfqkQRNSdI"],[326],[2],327]],[0,"5eypbf4cZFuqyO5VPQb9GT",1,0],[1,0.158,0.018,-0.108],[3,-0.5961853894006406,0.380214388819264,0.38021438881926395,0.5961853894006407],[1,10,10,10],[1,-90,65.055,0]],[7,"mogu3",6,[[5,1,0,-426,[1,"bbUD8UMCNLdY3PtILF5w/t"],[328],[2],329]],[0,"89PFifClpME4s4Gl8lGwab",1,0],[1,0.096,0.006,0.156],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,10,10,10],[1,-90.00000000000003,0,0]],[7,"mogu4",6,[[5,1,0,-427,[1,"5d73hQTOxPIqo9dgNGbnag"],[330],[2],331]],[0,"f4Z7GWmYtIkYaf23tiNcU9",1,0],[1,-0.001,0.018,0.023],[3,-0.5961853894006406,0.380214388819264,0.38021438881926395,0.5961853894006407],[1,10,10,10],[1,-90,65.055,0]],[7,"mogu5",6,[[5,1,0,-428,[1,"614pB9nKFM0YKD68KTNj3i"],[332],[2],333]],[0,"40VBkGEeBGF6rahM3zgNOE",1,0],[1,-0.029,0.003,-0.085],[3,-0.5961853894006406,0.380214388819264,0.38021438881926395,0.5961853894006407],[1,10,10,10],[1,-90,65.055,0]],[7,"mogu6",6,[[5,1,0,-429,[1,"0a79dOZqdPfY945htW02Q+"],[334],[2],335]],[0,"56FA8aizZN9odNOIyOWxsP",1,0],[1,-0.103,0.016,0.178],[3,-0.5911303722238331,-0.3880269101937551,-0.388026910193755,0.5911303722238331],[1,10,10,10],[1,-90,-66.563,0]],[7,"mogu7",6,[[5,1,0,-430,[1,"c8KOqVMsJMDZXCv8LUpvIB"],[336],[2],337]],[0,"061i4/bHdB+I2paMNvLi63",1,0],[1,-0.199,0.008,-0.004],[3,-0.5911303722238331,-0.3880269101937551,-0.388026910193755,0.5911303722238331],[1,10,10,10],[1,-90,-66.563,0]],[7,"mogu8",6,[[5,1,0,-431,[1,"d8L3ky1edMm6JhP4o/VXmk"],[338],[2],339]],[0,"0fnSVJBmtEqKq2Iig8Q0Fu",1,0],[1,-0.242,0.01,-0.115],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,10,10,10],[1,-90.00000000000003,0,0]],[7,"mogu9",6,[[5,1,0,-432,[1,"05OlzfqRVCY5caTS0+YkaH"],[340],[2],341]],[0,"8fX3tqkmlKcY+zJ+yCU+bH",1,0],[1,-0.255,0.009,0.109],[3,-0.5961853894006406,0.380214388819264,0.38021438881926395,0.5961853894006407],[1,10,10,10],[1,-90,65.055,0]],[23,"qiu",28,[-433],[0,"e85fgG1xZFj7SXob49I2Ih",1,0],[1,0.025000000000000022,0.1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,0.1,0.10000000000000003,0.10000000000000006],[1,89.99999999999999,0,0]],[37,1,0.5,10,211,[1,"ecrUEN1lJHfoTTLXVn+qyB"],[[344,null],6,0],[24,[4,1795225087]],[9,1],[3],[3],[3],[3],[3],[3],[3],[9,1],[3],[9,10],[3],[39,[12]],[40,true,0,0.17453292519943295,[9,1],[1,5.104,8.132,1]],[25,true,[18,1,[14,[0,0.8564102564102564,1],[[26,2,1,1],[11,2,0.48518518518518516],[58,2,-6.4343434343434325,1,-6.4343434343434325,1]]]],[3],[3],[3]],[27,[3],[3],[3],[9,1]],[42,true,[3],[3],[3]],[28,[3],[3],[3],[3]],[29,[3],[3],[3]],[30,[18,1,[14,[0,1],[[11,2,1],[11,2,1]]]],[3]],[31,[9,1],[3],[12],[12],-434],[32,345]],[23,"qiu-001",28,[-435],[0,"9czekXB8xEgKsVPKJEcxp+",1,0],[1,0.020000000000000018,0.032,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,0.10000000000000002,0.10000000000000003,0.10000000000000003],[1,89.99999999999999,0,0]],[37,1,0.5,10,213,[1,"bbhFc9z01PHIScVyhDRJ6u"],[[346,null],6,0],[12],[9,1],[3],[3],[3],[3],[3],[3],[3],[9,1],[3],[9,10],[3],[56,true,[24,[4,2801842431]]],[40,true,0,0.17453292519943295,[9,1],[1,4.524,8.003,1]],[25,true,[38,1,2,[14,[0,0.25384615384615383,1],[[41,2,0.34074074074074084,1,1],[11,2,0.7518518518518515],[26,2,1,1]]]],[3],[3],[3]],[27,[3],[3],[3],[9,1]],[59,[3],[3],[3]],[28,[3],[3],[3],[3]],[29,[3],[3],[3]],[30,[18,1,[14,[0,1],[[11,2,1],[11,2,1]]]],[3]],[31,[9,1],[3],[12],[12],-436],[32,347]],[23,"xingxing",28,[-437],[0,"06rnZ9vR1JgIICoSRQ0Ex7",1,0],[1,0.02300000000000002,0,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,0.282,0.2820000000000001,0.2820000000000001],[1,89.99999999999999,0,0]],[55,1,20,215,[1,"c4fKTeEchJRp7lhOa7WkUF"],[[348,null],6,0],[24,[4,4291160831]],[9,1],[3],[3],[9,1],[3],[3],[3],[3],[9,1],[3],[9,20],[3],[39,[12]],[57,true,0,1.495,0,[9,1],[1,1.629,2.865,1]],[25,true,[38,1,0.2,[14,[0,0.26666666666666666,0.46153846153846156,0.5871794871794872,1],[[41,2,0.15185185185185185,1,1],[11,2,0.8111111111111113],[11,2,0.3962962962962963],[11,2,0.6074074074074074],[26,2,1,1]]]],[3],[3],[3]],[27,[3],[3],[3],[9,1]],[42,true,[3],[3],[9,1]],[28,[3],[3],[3],[3]],[29,[3],[3],[3]],[30,[18,1,[14,[0,1],[[11,2,1],[11,2,1]]]],[3]],[31,[9,1],[3],[12],[12],-438],[32,349]],[19,"Lock",20,[-439],[0,"68tcCskZlI1417hAGnHO6G",1,0],[3,0,0.7071067811865475,0,0.7071067811865476],[1,0,90,0]],[7,"zhongzhi2",217,[[17,1,-440,[1,"c93xwdZPVDdbiMaJkxrG7g"],[350],[2],351]],[0,"22QKewPEdL77P8MRejqrMx",1,0],[1,0,-0.037,0],[3,4.208626870593668e-16,-0.7071067811865475,-4.208626870593669e-16,0.7071067811865476],[1,6.946421781182288,6.785707652568816,6.830707608580593],[1,0,-90,-6.820371792382863e-14]],[21,"Unlock",false,20,[13],[0,"aaGxgNi4hIlK61sxt7yOE/",1,0],[3,0,0.7071067811865475,0,0.7071067811865476],[1,0,90,0]],[7,"zhongzhi_plane",13,[[13,-441,[1,"6d2UmnK6pFRrf/SiYDhjgh"],[352],[2],353]],[0,"cfdQdCWTJNU6evXAtiY8BB",1,0],[1,0,0.014,0],[3,-0.5000000000000001,0.49999999999999983,0.5000000000000001,0.4999999999999999],[1,9.95,9.791,9.95],[1,-90.00000000000003,90,0]],[7,"Progress",13,[[13,-442,[1,"0aEde1hB5K5KysG4BFn3Hm"],[354],[2],355]],[0,"64U2HHtqlPjIEY1es5PTje",1,0],[1,0,0.017,0],[3,-0.5000000000000001,0.49999999999999983,0.5000000000000001,0.4999999999999999],[1,9.95,9.791,9.95],[1,-90.00000000000003,90,0]],[7,"zhongzhi_touming",13,[[13,-443,[1,"9eARvsCJpKKKqm7IoXEOzA"],[356],[2],357]],[0,"3df9DAOMZCs4tKAv1qAiPC",1,0],[1,-0.043,0.014,0],[3,-0.5000000000000002,0.4999999999999998,0.5000000000000001,0.49999999999999983],[1,11.9,12.163,10],[1,-90.00000000000004,90,0]],[7,"tu",13,[[13,-444,[1,"55fekDWD1Gi5snGfKwIJZj"],[358],[2],359]],[0,"a5T1OPocFIWY0qy1xrSrws",1,0],[1,0,0.016,0.154],[3,-4.329780281177466e-17,0.7071067811865476,0.7071067811865475,4.329780281177467e-17],[1,3.796,3.88,3.19],[1,-90,180,0]],[7,"zhongzhi_zi",13,[[13,-445,[1,"4fSrmg849DubH5glbf+jgt"],[360],[2],361]],[0,"3fquoM5apPUq9Jott0roN9",1,0],[1,0,0.016,-0.004],[3,-4.329780281177468e-17,0.7071067811865472,0.7071067811865478,4.3297802811774646e-17],[1,13.103,9.98,9.138],[1,-90.00000000000004,180,0]],[22,"zhongzhi2",13,[[17,1,-446,[1,"dfZaizRfZG973Gqh4XYqlL"],[362],[2],363]],[0,"a8Lkgad4hH07pJFNBYUdf8",1,0],[1,0,-0.039,0],[1,6.946421781182286,6.785707652568816,6.830707608580592],[1,-0.000004325805792733001,0.000009660709178781123,-6.820371662360335e-14]],[22,"zhongzhi",30,[[5,1,0,-447,[1,"f16cztqMVCPIkwxJ9xIZuf"],[364],[2],365]],[0,"99e6JJ7ItCsodzSQMjyUHr",1,0],[1,0,0.021,0],[1,6.946421781182288,6.785707652568816,6.830707608580594],[1,-0.000004325805792733,0.000009660709197867142,-6.820371694708857e-14]],[22,"zhongzhi2",30,[[17,1,-448,[1,"ceGxqtjNhB1YGoQMb5JS6C"],[366],[2],367]],[0,"6cgVk4P1ZGGIZ/3BXqrkdz",1,0],[1,0,-0.034,0],[1,6.946421781182288,6.785707652568816,6.830707608580594],[1,-0.000004325805792733001,0.000009660709178781123,-6.820371662360326e-14]],[7,"zhongzhi3",30,[[13,-449,[1,"9cc866h7tFpppaPCC/mQWA"],[368],[2],369]],[0,"e8XXC0lEpCQJeD+rY48JSm",1,0],[1,-0.389,-0.053,0.226],[3,-0.5,0.5,0.4999999999999999,0.5000000000000001],[1,9.37174,9.5305,9.31],[1,-89.99999999999999,89.99999999999999,0]],[19,"MoGu",29,[7],[0,"dbW0akH8NFtbDy9OOGUyPt",1,0],[3,-6.972611193684198e-32,-0.7071067811865475,-6.972611193684197e-32,0.7071067811865476],[1,-1.1299600123008406e-29,-89.99999999999999,0]],[7,"mogu1",7,[[5,1,0,-450,[1,"61JIHbJsZOpp+nEQONToPD"],[370],[2],371]],[0,"74qvyKMKhGQZbg7DMY+71R",1,0],[1,0.219,0,0.039],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,10,10,10],[1,-90.00000000000003,0,0]],[7,"mogu2",7,[[5,1,0,-451,[1,"1cD6FWA5pIfZz4Ag25mbBp"],[372],[2],373]],[0,"cdRErwnQpOHYN1pKupP+Bl",1,0],[1,0.158,0.018,-0.108],[3,-0.5961853894006406,0.380214388819264,0.38021438881926395,0.5961853894006407],[1,10,10,10],[1,-90,65.055,0]],[7,"mogu3",7,[[5,1,0,-452,[1,"c4srFpExFIeJ+DdY1fT086"],[374],[2],375]],[0,"6fDXlErBJAUqz73Xc9gR0K",1,0],[1,0.096,0.006,0.156],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,10,10,10],[1,-90.00000000000003,0,0]],[7,"mogu4",7,[[5,1,0,-453,[1,"b5jF0beyJPuqgrtwwtSQwT"],[376],[2],377]],[0,"b6SYEcPJhG3Zil7/5lcd7U",1,0],[1,-0.001,0.018,0.023],[3,-0.5961853894006406,0.380214388819264,0.38021438881926395,0.5961853894006407],[1,10,10,10],[1,-90,65.055,0]],[7,"mogu5",7,[[5,1,0,-454,[1,"2fwHTCA+VDsrFznGDriOhj"],[378],[2],379]],[0,"28SFX5Y7VEI4ldlwannu2X",1,0],[1,-0.029,0.003,-0.085],[3,-0.5961853894006406,0.380214388819264,0.38021438881926395,0.5961853894006407],[1,10,10,10],[1,-90,65.055,0]],[7,"mogu6",7,[[5,1,0,-455,[1,"53BWxjFxlJm7OnIRFZbC/N"],[380],[2],381]],[0,"4capUpbpJLBJQy+r4M4GKn",1,0],[1,-0.103,0.016,0.178],[3,-0.5911303722238331,-0.3880269101937551,-0.388026910193755,0.5911303722238331],[1,10,10,10],[1,-90,-66.563,0]],[7,"mogu7",7,[[5,1,0,-456,[1,"885/ThZkZIFoMX1kbEXFcI"],[382],[2],383]],[0,"42K/OPYJ5HnofzAsmicKB6",1,0],[1,-0.199,0.008,-0.004],[3,-0.5911303722238331,-0.3880269101937551,-0.388026910193755,0.5911303722238331],[1,10,10,10],[1,-90,-66.563,0]],[7,"mogu8",7,[[5,1,0,-457,[1,"43es4uilNL/7PloifsN2OY"],[384],[2],385]],[0,"c1n2FvAcZPfYt7feAXEc8M",1,0],[1,-0.242,0.01,-0.115],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,10,10,10],[1,-90.00000000000003,0,0]],[7,"mogu9",7,[[5,1,0,-458,[1,"28ZZKBwQ5PBLM4Qm7p9o0a"],[386],[2],387]],[0,"74rTR8eodAH7T9UtW1OGlw",1,0],[1,-0.255,0.009,0.109],[3,-0.5961853894006406,0.380214388819264,0.38021438881926395,0.5961853894006407],[1,10,10,10],[1,-90,65.055,0]],[23,"qiu",31,[-459],[0,"f5d3ctgt5Ehpi1CzXhCnw+",1,0],[1,0.025000000000000022,0.1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,0.1,0.10000000000000003,0.10000000000000006],[1,89.99999999999999,0,0]],[37,1,0.5,10,239,[1,"d8hHL0VU9Mn4lpskkMiFSy"],[[390,null],6,0],[24,[4,1795225087]],[9,1],[3],[3],[3],[3],[3],[3],[3],[9,1],[3],[9,10],[3],[39,[12]],[40,true,0,0.17453292519943295,[9,1],[1,5.104,8.132,1]],[25,true,[18,1,[14,[0,0.8564102564102564,1],[[26,2,1,1],[11,2,0.48518518518518516],[58,2,-6.4343434343434325,1,-6.4343434343434325,1]]]],[3],[3],[3]],[27,[3],[3],[3],[9,1]],[42,true,[3],[3],[3]],[28,[3],[3],[3],[3]],[29,[3],[3],[3]],[30,[18,1,[14,[0,1],[[11,2,1],[11,2,1]]]],[3]],[31,[9,1],[3],[12],[12],-460],[32,391]],[23,"qiu-001",31,[-461],[0,"ecSC1J/mlJZaHVtiJ359vH",1,0],[1,0.020000000000000018,0.032,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,0.10000000000000002,0.10000000000000003,0.10000000000000003],[1,89.99999999999999,0,0]],[37,1,0.5,10,241,[1,"a6vXkW2eFH6phA/UnyBXxw"],[[392,null],6,0],[12],[9,1],[3],[3],[3],[3],[3],[3],[3],[9,1],[3],[9,10],[3],[56,true,[24,[4,2801842431]]],[40,true,0,0.17453292519943295,[9,1],[1,4.524,8.003,1]],[25,true,[38,1,2,[14,[0,0.25384615384615383,1],[[41,2,0.34074074074074084,1,1],[11,2,0.7518518518518515],[26,2,1,1]]]],[3],[3],[3]],[27,[3],[3],[3],[9,1]],[59,[3],[3],[3]],[28,[3],[3],[3],[3]],[29,[3],[3],[3]],[30,[18,1,[14,[0,1],[[11,2,1],[11,2,1]]]],[3]],[31,[9,1],[3],[12],[12],-462],[32,393]],[23,"xingxing",31,[-463],[0,"01LLXBIcNOz75OCaGRbbJH",1,0],[1,0.02300000000000002,0,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,0.282,0.2820000000000001,0.2820000000000001],[1,89.99999999999999,0,0]],[55,1,20,243,[1,"58DqgEDnBJhrjMEQRNjU0c"],[[394,null],6,0],[24,[4,4291160831]],[9,1],[3],[3],[9,1],[3],[3],[3],[3],[9,1],[3],[9,20],[3],[39,[12]],[57,true,0,1.495,0,[9,1],[1,1.629,2.865,1]],[25,true,[38,1,0.2,[14,[0,0.26666666666666666,0.46153846153846156,0.5871794871794872,1],[[41,2,0.15185185185185185,1,1],[11,2,0.8111111111111113],[11,2,0.3962962962962963],[11,2,0.6074074074074074],[26,2,1,1]]]],[3],[3],[3]],[27,[3],[3],[3],[9,1]],[42,true,[3],[3],[9,1]],[28,[3],[3],[3],[3]],[29,[3],[3],[3]],[30,[18,1,[14,[0,1],[[11,2,1],[11,2,1]]]],[3]],[31,[9,1],[3],[12],[12],-464],[32,395]],[7,"Web",15,[[8,0,-465,[1,"cbnmDFS89DaZ2HiCZtZ4Z4"],[396],[2],397]],[0,"c3rXrB8vNOTKCBLOkA5Q9o",1,0],[1,-4.179,2.121,1.046],[3,-0.7071067811865476,0,0,0.7071067811865475],[1,10,10.000000000000002,10.000000000000002],[1,-90.00000000000003,0,0]],[53,"Next_jindutiao",8,[[8,0,-466,[1,"c2vA/PhNFNg4wb/BL3jX/M"],[398],[2],399]],[0,"85EIneIqVFr6Yp8tvn598s",1,0],[3,-4.3297802811774677e-17,0.7071067811865474,0.7071067811865477,4.329780281177465e-17],[1,10,10,10],[1,-90.00000000000003,180,0]],[7,"Next_touming",8,[[8,0,-467,[1,"23Vj9YqjZIdqWYt2Sc0Mln"],[400],[2],401]],[0,"74mSa2gmtHVpogRopD6EaH",1,0],[1,-0.024,0,-0.054],[3,-0.7071067811865478,0,0,0.7071067811865472],[1,15.238,10,10],[1,-90.00000000000004,0,0]],[7,"xuxian",8,[[8,0,-468,[1,"18rjJOGXtE8qvM13oHTWuR"],[402],[2],403]],[0,"a8PEX3UFhPZ6SKuGKBW6mh",1,0],[1,-0.019,0,-0.008],[3,-4.3297802811774677e-17,0.7071067811865474,0.7071067811865477,4.329780281177465e-17],[1,10.77,10.942,10.77],[1,-90.00000000000003,180,0]],[7,"suo",41,[[8,0,-469,[1,"1a3/zvdfNHDLIfTRpwn7kz"],[404],[2],405]],[0,"cacQYgENNIvquDSOGslbLA",1,0],[1,0.143,0.01,-0.019],[3,-0.5000000000000001,0.4999999999999999,0.5000000000000001,0.4999999999999999],[1,3.2,3.2,1],[1,-90.00000000000004,90,0]],[7,"Next_Zi",41,[[8,0,-470,[1,"213jm9iN9LppeaI9L1uWxA"],[406],[2],407]],[0,"6cSP9BCFBA4r3qPKQjU3sK",1,0],[1,-0.23,0.01,-0.026],[3,-0.5000000000000002,0.4999999999999998,0.5000000000000001,0.49999999999999983],[1,13.064,13.064,13.064],[1,-90.00000000000004,90,0]],[66,"shandian",32,[-471],[0,"98RmB1n5ZD1Zn7Qh5IfSdD",1,0],[1,0.9,0.9,0.9]],[7,"shandian_Plane",251,[[8,0,-472,[1,"3cADukHBtOd7I7kM/Ej6rq"],[408],[2],409]],[0,"f0i/lgMNxLg4vc1KOTRABD",1,0],[1,0.06400000000000006,0.009999999999999998,-0.027000000000000135],[3,-0.5,0.5,0.4999999999999999,0.5000000000000001],[1,0.09999999999999998,0.15999999999999998,0.09999999999999998],[1,-89.99999999999999,89.99999999999999,0]],[20,"Ground",32,[-473],[0,"c28KpOOENMuLpQ6Eqlni8u",1,0]],[53,"Progress",253,[[8,0,-474,[1,"6cSH8J5kNIopgy/QAtS0j8"],[410],[2],411]],[0,"b3HyKpzfJL6Zl6n40JhSs+",1,0],[3,-0.5000000000000001,0.4999999999999999,0.5000000000000001,0.4999999999999999],[1,9.999999999999998,9.999999999999998,9.999999999999998],[1,-90.00000000000004,90,0]],[7,"Next_Zi",32,[[8,0,-475,[1,"b7nmrQdV1OWJRZ8u0kotIR"],[412],[2],413]],[0,"1fHPbjSJ5E85FbhbNkYRvo",1,0],[1,-0.23,0.01,-0.026],[3,-0.5000000000000002,0.4999999999999998,0.5000000000000001,0.49999999999999983],[1,13.064,13.064,13.064],[1,-90.00000000000004,90,0]],[7,"level2",42,[[8,0,-476,[1,"f7VAYIaRtD7anEU1mznVzN"],[414],[2],415]],[0,"f6kcOMnAtG0LNKgNmKGZjS",1,0],[1,0.146,0.001,-0.022],[3,-0.5000000000000003,0.4999999999999997,0.5000000000000002,0.4999999999999997],[1,0.202,0.202,0.202],[1,-90.00000000000006,90,-1.2722218725854073e-14]],[7,"Next_Zi2",42,[[8,0,-477,[1,"225HXp99NCzoygsFJxU+wD"],[416],[2],417]],[0,"f3Bf4AcQdNm6zKUtx5YAZm",1,0],[1,-0.216,0.01,-0.027],[3,-0.5000000000000002,0.4999999999999998,0.5000000000000001,0.49999999999999983],[1,11.972,11.972,11.972],[1,-90.00000000000004,90,0]],[50,"eff_Next_ZhiShiBiao",1,[-478],[0,"92slSgZSNO1oGG5eAVXh3l",1,0],[1,6.492,1.015,2.3],[3,-0.7071067811865475,0,0,0.7071067811865476],[1,1.18,1.18,1.18],[1,-89.99999999999999,0,0]],[67,"body",258,[21],[0,"0caOjooKpPbqdkaET01D1S",1,0],[1,0,0,-0.184],[3,0,1,0,6.123233995736766e-17],[1,0,180,0]],[68,"Box001",21,[[8,0,-479,[1,"99b4zinmFCo7gSX/W5DTDf"],[418],[2],419]],[0,"5fTeTj7L5BwK0HgSZXIMnP",1,0],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[6,"Box002",21,[[8,0,-480,[1,"6bgkowFFxKg5O/uER29jbF"],[420],[2],421]],[0,"8aQIQ9KM9Axriqj+BqUE+O",1,0],[1,0,0,0.25],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[6,"Box003",21,[[8,0,-481,[1,"e7QNaC6IVHbZVLSb2QnQCW"],[422],[2],423]],[0,"f9h0gnLNJMCZy4IqqFUb58",1,0],[1,0,0,0.5],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]]],0,[0,9,1,0,-1,9,0,-2,17,0,-3,18,0,-4,19,0,-5,20,0,-6,15,0,-7,8,0,-8,258,0,-1,69,0,-2,70,0,-3,71,0,-4,72,0,-5,73,0,-6,74,0,-7,75,0,-8,76,0,-9,77,0,-10,78,0,-11,79,0,-12,80,0,-13,81,0,-14,82,0,-15,83,0,-16,84,0,-17,85,0,-18,86,0,-19,87,0,-20,88,0,-21,89,0,-22,90,0,-23,91,0,-24,92,0,-25,93,0,-26,94,0,-27,95,0,-28,96,0,-29,97,0,-30,98,0,-31,99,0,-32,100,0,-33,101,0,-34,102,0,-35,103,0,-36,104,0,-37,105,0,-38,106,0,-39,107,0,-1,153,0,-2,154,0,-3,155,0,-4,156,0,-5,157,0,-6,158,0,-7,159,0,-8,160,0,-9,161,0,-10,162,0,-11,163,0,-12,164,0,-13,165,0,-14,166,0,-15,167,0,-16,168,0,-17,169,0,-18,170,0,-19,171,0,-20,172,0,-21,173,0,-22,174,0,-23,175,0,-24,176,0,-25,177,0,-26,178,0,-27,179,0,-28,180,0,-29,181,0,-30,182,0,-31,183,0,-32,184,0,-1,109,0,-2,110,0,-3,111,0,-4,112,0,-5,113,0,-6,114,0,-7,115,0,-8,116,0,-9,117,0,-10,118,0,-11,119,0,-12,120,0,-13,121,0,-14,122,0,-15,123,0,-16,124,0,-17,125,0,-18,126,0,-19,127,0,-20,128,0,-21,129,0,-22,130,0,-23,131,0,-24,132,0,-25,133,0,-26,134,0,-1,136,0,-2,137,0,-3,138,0,-4,139,0,-5,140,0,-6,141,0,-7,142,0,-8,143,0,-9,144,0,-10,145,0,-11,146,0,-12,147,0,-13,148,0,-14,149,0,-15,150,0,-16,151,0,0,6,0,-1,202,0,-2,203,0,-3,204,0,-4,205,0,-5,206,0,-6,207,0,-7,208,0,-8,209,0,-9,210,0,0,7,0,-1,230,0,-2,231,0,-3,232,0,-4,233,0,-5,234,0,-6,235,0,-7,236,0,-8,237,0,-9,238,0,0,8,0,0,8,0,-1,246,0,-2,247,0,-3,248,0,-4,41,0,-5,32,0,-6,42,0,-1,43,0,-2,44,0,-3,33,0,-4,10,0,-5,52,0,-6,11,0,-7,14,0,0,10,0,-1,46,0,-2,47,0,-3,48,0,-4,49,0,-5,50,0,-6,51,0,-1,53,0,-2,54,0,-3,55,0,-4,56,0,-5,57,0,-6,58,0,-7,59,0,-1,192,0,-2,193,0,-3,194,0,-4,195,0,-5,196,0,-6,197,0,-1,220,0,-2,221,0,-3,222,0,-4,223,0,-5,224,0,-6,225,0,-1,60,0,-2,61,0,-3,62,0,-4,63,0,-5,16,0,0,15,0,-1,245,0,4,15,0,4,15,0,4,15,0,-1,64,0,-2,65,0,-3,66,0,-4,67,0,-1,22,0,-2,23,0,-3,24,0,-4,25,0,0,18,0,4,18,0,-2,38,0,-3,40,0,0,19,0,-1,189,0,-2,191,0,-3,26,0,0,20,0,-1,217,0,-2,219,0,-3,29,0,0,21,0,-1,260,0,-2,261,0,-3,262,0,0,22,0,-1,34,0,0,23,0,-1,35,0,0,24,0,-1,36,0,0,25,0,-1,37,0,-1,27,0,-2,201,0,-3,28,0,-1,198,0,-2,199,0,-3,200,0,-1,211,0,-2,213,0,-3,215,0,-1,30,0,-2,229,0,-3,31,0,-1,226,0,-2,227,0,-3,228,0,-1,239,0,-2,241,0,-3,243,0,-1,251,0,-2,253,0,-3,255,0,0,33,0,-1,45,0,0,34,0,-1,68,0,0,35,0,-1,108,0,0,36,0,-1,135,0,0,37,0,-1,152,0,-1,39,0,-2,186,0,0,39,0,-1,185,0,-1,187,0,-2,188,0,-1,249,0,-2,250,0,-1,256,0,-2,257,0,0,43,0,0,44,0,0,45,0,0,46,0,0,47,0,0,48,0,0,49,0,0,50,0,0,51,0,0,52,0,0,53,0,0,54,0,0,55,0,0,56,0,0,57,0,0,58,0,0,59,0,0,60,0,0,61,0,0,62,0,0,63,0,0,64,0,0,65,0,0,66,0,0,67,0,0,68,0,0,69,0,0,70,0,0,71,0,0,72,0,0,73,0,0,74,0,0,75,0,0,76,0,0,77,0,0,78,0,0,79,0,0,80,0,0,81,0,0,82,0,0,83,0,0,84,0,0,85,0,0,86,0,0,87,0,0,88,0,0,89,0,0,90,0,0,91,0,0,92,0,0,93,0,0,94,0,0,95,0,0,96,0,0,97,0,0,98,0,0,99,0,0,100,0,0,101,0,0,102,0,0,103,0,0,104,0,0,105,0,0,106,0,0,107,0,0,108,0,0,109,0,0,110,0,0,111,0,0,112,0,0,113,0,0,114,0,0,115,0,0,116,0,0,117,0,0,118,0,0,119,0,0,120,0,0,121,0,0,122,0,0,123,0,0,124,0,0,125,0,0,126,0,0,127,0,0,128,0,0,129,0,0,130,0,0,131,0,0,132,0,0,133,0,0,134,0,0,135,0,0,136,0,0,137,0,0,138,0,0,139,0,0,140,0,0,141,0,0,142,0,0,143,0,0,144,0,0,145,0,0,146,0,0,147,0,0,148,0,0,149,0,0,150,0,0,151,0,0,152,0,0,153,0,0,154,0,0,155,0,0,156,0,0,157,0,0,158,0,0,159,0,0,160,0,0,161,0,0,162,0,0,163,0,0,164,0,0,165,0,0,166,0,0,167,0,0,168,0,0,169,0,0,170,0,0,171,0,0,172,0,0,173,0,0,174,0,0,175,0,0,176,0,0,177,0,0,178,0,0,179,0,0,180,0,0,181,0,0,182,0,0,183,0,0,184,0,0,185,0,0,186,0,0,187,0,0,188,0,-1,190,0,0,190,0,0,192,0,0,193,0,0,194,0,0,195,0,0,196,0,0,197,0,0,198,0,0,199,0,0,200,0,0,202,0,0,203,0,0,204,0,0,205,0,0,206,0,0,207,0,0,208,0,0,209,0,0,210,0,-1,212,0,6,212,0,-1,214,0,6,214,0,-1,216,0,6,216,0,-1,218,0,0,218,0,0,220,0,0,221,0,0,222,0,0,223,0,0,224,0,0,225,0,0,226,0,0,227,0,0,228,0,0,230,0,0,231,0,0,232,0,0,233,0,0,234,0,0,235,0,0,236,0,0,237,0,0,238,0,-1,240,0,6,240,0,-1,242,0,6,242,0,-1,244,0,6,244,0,0,245,0,0,246,0,0,247,0,0,248,0,0,249,0,0,250,0,-1,252,0,0,252,0,-1,254,0,0,254,0,0,255,0,0,256,0,0,257,0,-1,259,0,0,260,0,0,261,0,0,262,0,10,1,2,4,22,3,4,25,4,4,23,5,4,24,6,4,201,7,4,229,12,4,191,13,4,219,21,4,259,481],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,8,-1,7,-1,7,-1,7,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,8,-1,7,-1,7,-1,7,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,8],[62,63,64,65,66,67,68,69,0,23,0,23,0,23,32,70,3,33,3,33,11,71,34,72,12,73,12,74,32,75,12,76,12,77,12,78,12,79,11,80,11,81,11,82,11,83,84,85,86,87,11,88,11,89,90,8,91,8,0,92,0,93,0,94,0,95,0,96,0,97,0,98,0,99,0,100,0,101,0,102,0,103,0,104,0,105,0,106,0,107,0,108,0,109,0,110,0,111,0,112,0,113,0,114,0,115,0,116,0,117,0,118,0,119,0,120,0,121,0,122,0,123,0,124,0,125,0,126,0,127,0,128,0,129,0,130,131,8,132,8,2,133,2,134,2,135,2,136,2,137,2,138,2,139,2,140,2,141,2,142,2,143,2,144,2,145,2,146,2,147,2,148,2,149,2,150,2,151,2,152,2,153,2,154,2,155,2,156,2,157,2,158,159,8,160,8,3,161,3,162,3,163,3,164,3,165,3,166,3,167,3,168,3,169,3,170,3,171,3,172,3,173,3,174,3,175,3,176,177,8,178,8,1,179,1,180,1,181,1,182,1,183,1,184,1,185,1,186,1,187,1,188,1,189,1,190,1,191,1,192,1,193,1,194,1,195,1,196,1,197,1,198,1,199,1,200,1,201,1,202,1,203,1,204,1,205,1,206,1,207,1,208,1,209,1,210,211,24,212,24,34,213,12,214,9,14,35,16,36,16,37,6,38,6,39,6,9,14,40,41,9,14,9,42,4,15,4,10,4,15,4,10,4,10,4,17,4,17,4,15,4,10,18,18,43,20,44,25,45,22,9,14,35,16,36,16,37,6,38,6,39,6,9,14,40,41,9,14,9,42,4,15,4,10,4,15,4,10,4,10,4,17,4,17,4,15,4,10,18,18,43,20,44,25,45,22,215,216,217,19,218,6,219,19,220,19,46,6,221,222,223,19,46,6,224,24,225,6,26,27,26,27,26,27,47,47]],[[[10,"1",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_TEXTURE":true}],[[[{},"tilingOffset",8,[2,1.5,1,-0.26,0],"mainTexture",6,0]],11]]],0,0,[0,0],[3,2],[226,5]],[[[4,".bin",442130728,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":2520,"length":528,"count":132,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":2520,"count":45,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.10738755017518997,-0.07080702483654022,-0.051978275179862976],"maxPosition",8,[1,0.10738755017518997,0.07080702483654022,0.051978275179862976]]],-1],0,0,[],[],[]],[[[4,".bin",2487443892,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":3304,"length":696,"count":174,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":3304,"count":59,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.08797142654657364,-0.07346078753471375,-0.11807985603809357],"maxPosition",8,[1,0.08797144144773483,0.07346078753471375,0.11807985603809357]]],-1],0,0,[],[],[]],[[[4,".bin",2223948319,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":2520,"length":504,"count":126,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":2520,"count":45,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.09823139756917953,-0.03602255880832672,-0.10413166880607605],"maxPosition",8,[1,0.09823139756917953,0.03602255880832672,0.10413166135549545]]],-1],0,0,[],[],[]],[[[4,".bin",3151691519,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":2744,"length":624,"count":156,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":2744,"count":49,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.0943179503083229,-0.08988136798143387,-0.15101078152656555],"maxPosition",8,[1,0.09431794285774231,0.08988136798143387,0.15101078152656555]]],-1],0,0,[],[],[]],[[[4,".bin",1995108286,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":2968,"length":888,"count":222,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":2968,"count":53,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.10053880512714386,-0.09921351075172424,-0.09491386264562607],"maxPosition",8,[1,0.10053882002830505,0.09921350330114365,0.09491389989852905]]],-1],0,0,[],[],[]],[[[4,".bin",374358317,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":5096,"length":1344,"count":336,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":5096,"count":91,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.11752195656299591,-0.10772312432527542,-0.11730173975229263],"maxPosition",8,[1,0.11752195656299591,0.10772312432527542,0.11730173230171204]]],-1],0,0,[],[],[]],[[[4,".bin",2878910425,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":3416,"length":744,"count":186,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":3416,"count":61,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.09709113091230392,-0.13113968074321747,-0.07834859937429428],"maxPosition",8,[1,0.09709113836288452,0.13113968074321747,0.07834859937429428]]],-1],0,0,[],[],[]],[[[4,".bin",1428805778,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":2520,"length":480,"count":120,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":2520,"count":45,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.1005585640668869,-0.059059664607048035,-0.09513198584318161],"maxPosition",8,[1,0.1005585640668869,0.05905966833233833,0.09513198584318161]]],-1],0,0,[],[],[]],[[[4,".bin",3084541797,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":7112,"length":2088,"count":522,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":7112,"count":127,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.09595504403114319,-0.08001577109098434,-0.14849664270877838],"maxPosition",8,[1,0.09595503658056259,0.08001577109098434,0.1484966278076172]]],-1],0,0,[],[],[]],[[[4,".bin",1450292702,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":3472,"length":672,"count":168,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":3472,"count":62,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.07056809216737747,-0.07543861120939255,-0.09470926225185394],"maxPosition",8,[1,0.07056808471679688,0.07543861120939255,0.09470926225185394]]],-1],0,0,[],[],[]],[[[4,".bin",240781307,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":2072,"length":360,"count":90,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":2072,"count":37,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.0433918796479702,-0.06283319741487503,-0.06583335995674133],"maxPosition",8,[1,0.0433918759226799,0.06283319741487503,0.06583333760499954]]],-1],0,0,[],[],[]],[[[4,".bin",1172639671,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":5992,"length":1968,"count":492,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":5992,"count":107,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.14418935775756836,-0.12854935228824615,-0.12391948699951172],"maxPosition",8,[1,0.14418937265872955,0.12854935228824615,0.12391950935125351]]],-1],0,0,[],[],[]],[[[4,".bin",2242490487,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":3696,"length":816,"count":204,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":3696,"count":66,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.1202034205198288,-0.09571992605924606,-0.10953355580568314],"maxPosition",8,[1,0.1202034205198288,0.09571992605924606,0.10953354835510254]]],-1],0,0,[],[],[]],[[[4,".bin",2299208387,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":2912,"length":552,"count":138,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":2912,"count":52,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.10459214448928833,-0.13207851350307465,-0.09104028344154358],"maxPosition",8,[1,0.10459214448928833,0.13207851350307465,0.09104028344154358]]],-1],0,0,[],[],[]],[[[4,".bin",2193372988,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":2968,"length":576,"count":144,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":2968,"count":53,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.11628533154726028,-0.0620964914560318,-0.064082071185112],"maxPosition",8,[1,0.11628533154726028,0.0620964914560318,0.0640820860862732]]],-1],0,0,[],[],[]],[[[4,".bin",138239698,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":3584,"length":768,"count":192,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":3584,"count":64,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.08596539497375488,-0.13164503872394562,-0.11549677699804306],"maxPosition",8,[1,0.08596539497375488,0.13164503872394562,0.11549677699804306]]],-1],0,0,[],[],[]],[[[10,"1",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_TEXTURE":true}],[[[{"progress":-0.1},"mainTexture",6,0]],11]]],0,0,[0,0],[3,2],[227,13]],[[[10,"1",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_TEXTURE":true}],[[[{},"tilingOffset",8,[2,1.5,1,-0.26,0],"mainTexture",6,0]],11]]],0,0,[0,0],[3,2],[228,5]],[[[4,".bin",275678420,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":10992,"length":5160,"count":1290,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":10992,"count":229,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.0019374334951862693,-0.003346218727529049,-0.0015722621465101838],"maxPosition",8,[1,0.004114322829991579,0.005988446529954672,0.0026876425836235285]]],-1],0,0,[],[],[]],[[[4,".bin",2845015994,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":192,"length":24,"count":6,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":192,"count":4,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.030325669795274734,-0.048783041536808014,-5.245208853921213e-7],"maxPosition",8,[1,0.030325673520565033,0.04878303408622742,-5.245208853921213e-7]]],-1],0,0,[],[],[]],[[[15,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{},{}],[{"USE_ALBEDO_MAP":true,"USE_EMISSIVE_MAP":true},{},{}],[[[{"roughness":0.7,"metallic":0.047},"mainTexture",6,0,"emissiveMap",6,1],{},{}],11,0,0]]],0,0,[0,0,0],[3,5,2],[48,48,7]],[[[10,"1",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_TEXTURE":true}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[3,2],[229,5]],[[[4,".bin",657035379,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":4816,"length":1056,"count":264,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":4816,"count":86,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.11283580958843231,-0.12537410855293274,-0.01761222817003727],"maxPosition",8,[1,0.11283580958843231,0.12537410855293274,0.017612246796488762]]],-1],0,0,[],[],[]],[[[4,".bin",3115297401,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":3808,"length":816,"count":204,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":3808,"count":68,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.07873935997486115,-0.07790665328502655,-0.10150465369224548],"maxPosition",8,[1,0.07873935997486115,0.07790665328502655,0.10150466114282608]]],-1],0,0,[],[],[]],[[[4,".bin",430741208,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":4536,"length":864,"count":216,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":4536,"count":81,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.10211869329214096,-0.08098945766687393,-0.09401548653841019],"maxPosition",8,[1,0.10211869329214096,0.08098943531513214,0.09401548653841019]]],-1],0,0,[],[],[]],[[[4,".bin",770819996,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":3416,"length":600,"count":150,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":3416,"count":61,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.07682009041309357,-0.08790624886751175,-0.062209319323301315],"maxPosition",8,[1,0.07682009041309357,0.08790625631809235,0.06220933049917221]]],-1],0,0,[],[],[]],[[[4,".bin",1844448463,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":17192,"length":3840,"count":960,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":17192,"count":307,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.09045753628015518,-0.1391172558069229,-0.12794332206249237],"maxPosition",8,[1,0.09045752882957458,0.1391172707080841,0.12794332206249237]]],-1],0,0,[],[],[]],[[[4,".bin",3238563664,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":4984,"length":1128,"count":282,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":4984,"count":89,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.08825315535068512,-0.08429744094610214,-0.017612246796488762],"maxPosition",8,[1,0.08825317025184631,0.08429744094610214,0.01761222817003727]]],-1],0,0,[],[],[]],[[[4,".bin",964316033,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":2856,"length":528,"count":132,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":2856,"count":51,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.0590231716632843,-0.06324918568134308,-0.09811710566282272],"maxPosition",8,[1,0.0590231791138649,0.06324918568134308,0.09811708331108093]]],-1],0,0,[],[],[]],[[[4,".bin",1877406067,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":5768,"length":1272,"count":318,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":5768,"count":103,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.08996429294347763,-0.10582783818244934,-0.10374674201011658],"maxPosition",8,[1,0.08996428549289703,0.10582783818244934,0.10374672710895538]]],-1],0,0,[],[],[]],[[[4,".bin",1823485023,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":4424,"length":936,"count":234,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":4424,"count":79,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.12227164953947067,-0.07185769826173782,-0.01761222817003727],"maxPosition",8,[1,0.12227164953947067,0.07185769826173782,0.017612246796488762]]],-1],0,0,[],[],[]],[[[4,".bin",2270612647,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":5880,"length":1248,"count":312,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":5880,"count":105,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.06645668298006058,-0.12433702498674393,-0.07686292380094528],"maxPosition",8,[1,0.06645669043064117,0.12433703243732452,0.07686292380094528]]],-1],0,0,[],[],[]],[[[4,".bin",890815588,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":7672,"length":1608,"count":402,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":7672,"count":137,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.09896571189165115,-0.09218055009841919,-0.01761222817003727],"maxPosition",8,[1,0.09896571189165115,0.09218055009841919,0.017612246796488762]]],-1],0,0,[],[],[]],[[[4,".bin",2295489859,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":2856,"length":528,"count":132,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":2856,"count":51,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.058241769671440125,-0.06503578275442123,-0.05978933349251747],"maxPosition",8,[1,0.05824176222085953,0.06503578275442123,0.05978934466838837]]],-1],0,0,[],[],[]],[[[4,".bin",968735515,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":6216,"length":1344,"count":336,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":6216,"count":111,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.11091993004083633,-0.10699647665023804,-0.11113331466913223],"maxPosition",8,[1,0.11091993004083633,0.10699647665023804,0.11113331466913223]]],-1],0,0,[],[],[]],[[[4,".bin",4206944856,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":3584,"length":576,"count":144,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":3584,"count":64,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.09398648887872696,-0.11719442158937454,-0.06204218789935112],"maxPosition",8,[1,0.09398650377988815,0.11719443649053574,0.06204219162464142]]],-1],0,0,[],[],[]],[[[4,".bin",1629042771,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":4872,"length":1056,"count":264,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":4872,"count":87,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.10592483729124069,-0.06454732269048691,-0.0830654501914978],"maxPosition",8,[1,0.10592483729124069,0.06454730778932571,0.08306543529033661]]],-1],0,0,[],[],[]],[[[4,".bin",1075275726,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":5320,"length":1200,"count":300,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":5320,"count":95,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.1002175584435463,-0.05133899673819542,-0.08931198716163635],"maxPosition",8,[1,0.1002175584435463,0.05133897811174393,0.08931198716163635]]],-1],0,0,[],[],[]],[[[4,".bin",3448236675,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":3696,"length":672,"count":168,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":3696,"count":66,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.05904148146510124,-0.0825008749961853,-0.05668693408370018],"maxPosition",8,[1,0.05904146283864975,0.08250086009502411,0.05668694153428078]]],-1],0,0,[],[],[]],[[[4,".bin",3091308174,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":5992,"length":1344,"count":336,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":5992,"count":107,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.0752941146492958,-0.11039992421865463,-0.0954086184501648],"maxPosition",8,[1,0.07529409229755402,0.11039992421865463,0.0954086184501648]]],-1],0,0,[],[],[]],[[[4,".bin",1079750963,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":12936,"length":2448,"count":612,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":12936,"count":231,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.09641067683696747,-0.11587225645780563,-0.12522479891777039],"maxPosition",8,[1,0.09641069173812866,0.11587227135896683,0.12522479891777039]]],-1],0,0,[],[],[]],[[[4,".bin",228880076,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":5376,"length":528,"count":132,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":5376,"count":96,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.10018439590930939,-0.15332989394664764,-0.07182957977056503],"maxPosition",8,[1,0.10018440335988998,0.15332989394664764,0.07182957977056503]]],-1],0,0,[],[],[]],[[[4,".bin",1382846433,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":19096,"length":3816,"count":954,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":19096,"count":341,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.08578596264123917,-0.10687476396560669,-0.17100976407527924],"maxPosition",8,[1,0.08578595519065857,0.10687476396560669,0.17100976407527924]]],-1],0,0,[],[],[]],[[[4,".bin",3748431689,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":9744,"length":960,"count":240,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":9744,"count":174,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.11810267716646194,-0.10153481364250183,-0.14707785844802856],"maxPosition",8,[1,0.11810267716646194,0.10153482109308243,0.14707785844802856]]],-1],0,0,[],[],[]],[[[4,".bin",3719903209,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":2856,"length":552,"count":138,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":2856,"count":51,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.09803951531648636,-0.09302695095539093,-0.01761222817003727],"maxPosition",8,[1,0.09803951531648636,0.09302695095539093,0.01761222817003727]]],-1],0,0,[],[],[]],[[[4,".bin",1601961963,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":19600,"length":1896,"count":474,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":19600,"count":350,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.08983433991670609,-0.12344322353601456,-0.13397449254989624],"maxPosition",8,[1,0.08983433991670609,0.12344322353601456,0.13397449254989624]]],-1],0,0,[],[],[]],[[[4,".bin",3521802443,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":3920,"length":744,"count":186,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":3920,"count":70,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.08029613643884659,-0.04854980483651161,-0.12142381817102432],"maxPosition",8,[1,0.08029612898826599,0.04854980483651161,0.12142381817102432]]],-1],0,0,[],[],[]],[[[4,".bin",1431581049,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":4088,"length":960,"count":240,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":4088,"count":73,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.09407763183116913,-0.1173049807548523,-0.07604102790355682],"maxPosition",8,[1,0.09407764673233032,0.1173049807548523,0.07604101300239563]]],-1],0,0,[],[],[]],[[[4,".bin",307556008,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":4312,"length":960,"count":240,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":4312,"count":77,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.14426155388355255,-0.07429401576519012,-0.08784247189760208],"maxPosition",8,[1,0.14426155388355255,0.07429401576519012,0.08784247189760208]]],-1],0,0,[],[],[]],[[[4,".bin",576763278,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":3864,"length":816,"count":204,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":3864,"count":69,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.10847776383161545,-0.12229080498218536,-0.07282611727714539],"maxPosition",8,[1,0.10847776383161545,0.12229079008102417,0.07282612472772598]]],-1],0,0,[],[],[]],[[[4,".bin",201336033,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":3472,"length":720,"count":180,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":3472,"count":62,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.11250997334718704,-0.08468237519264221,-0.01761222817003727],"maxPosition",8,[1,0.11250997334718704,0.08468236774206161,0.01761222817003727]]],-1],0,0,[],[],[]],[[[4,".bin",1164984105,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":3752,"length":768,"count":192,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":3752,"count":67,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.10996095836162567,-0.1133677214384079,-0.07220110297203064],"maxPosition",8,[1,0.10996095836162567,0.1133677214384079,0.07220110297203064]]],-1],0,0,[],[],[]],[[[4,".bin",2044986889,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":6832,"length":1656,"count":414,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":6832,"count":122,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.17099277675151825,-0.10056690126657486,-0.10624399036169052],"maxPosition",8,[1,0.17099277675151825,0.10056690126657486,0.10624399781227112]]],-1],0,0,[],[],[]],[[[4,".bin",1939284078,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":10416,"length":1320,"count":330,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":10416,"count":186,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.0787942111492157,-0.10612355917692184,-0.017612246796488762],"maxPosition",8,[1,0.0787942111492157,0.10612355917692184,0.01761222817003727]]],-1],0,0,[],[],[]],[[[10,"1",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_TEXTURE":true}],[[[{"progress":-0.1},"mainTexture",6,0]],11]]],0,0,[0,0],[3,2],[230,13]],[[[15,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{},{}],[{"USE_ALBEDO_MAP":true,"USE_EMISSIVE_MAP":true},{},{}],[[[{"roughness":1,"metallic":0.722},"mainColor",8,[4,4292861919],"emissive",8,[4,4291480266],"mainTexture",6,0,"emissiveMap",6,1],{},{}],11,0,0]]],0,0,[0,0,0],[3,5,2],[49,49,7]],[[[10,"3",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{}],[[[{},"mainColor",8,[4,2523135861]]],11]]],0,0,[0],[2],[5]],[[[4,".bin",199629049,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":3168,"length":720,"count":180,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":3168,"count":66,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.0021244725212454796,0.00045331797446124256,-0.0021848767064511776],"maxPosition",8,[1,0.0021753094624727964,0.0050109988078475,0.002114905510097742]]],-1],0,0,[],[],[]],[[[4,".bin",339387385,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":12144,"length":4176,"count":1044,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":12144,"count":253,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.0035743501503020525,0,-0.0035743501503020525],"maxPosition",8,[1,0.0035743501503020525,0.008838174864649773,0.0035743501503020525]]],-1],0,0,[],[],[]],[[[15,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{},{}],[{"USE_ALBEDO_MAP":true,"USE_EMISSIVE_MAP":true},{},{}],[[[{"roughness":0,"metallic":0},"emissive",8,[4,4285493103],"mainTexture",6,0,"emissiveMap",6,1],{},{}],11,0,0]]],0,0,[0,0,0],[3,5,2],[50,50,7]],[[[4,".bin",1959359892,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":14000,"length":744,"count":186,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":14000,"count":175,"stride":80},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_color","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false},{"name":"a_texCoord2","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.0775487869977951,-0.10133416950702667,-0.05134396255016327],"maxPosition",8,[1,0.0775487869977951,0.10133416950702667,0.05134396255016327]]],-1],0,0,[],[],[]],[[[4,".bin",3453622883,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":4320,"length":312,"count":78,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":4320,"count":60,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_color","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.08200213313102722,-0.07020655274391174,-0.05134407430887222],"maxPosition",8,[1,0.08200213313102722,0.07020655274391174,0.051344070583581924]]],-1],0,0,[],[],[]],[[[4,".bin",2675949986,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":24160,"length":1248,"count":312,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":24160,"count":302,"stride":80},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_color","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false},{"name":"a_texCoord2","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.09061970561742783,-0.12048915773630142,-0.05134589970111847],"maxPosition",8,[1,0.09061971306800842,0.12048915773630142,0.05134589970111847]]],-1],0,0,[],[],[]],[[[4,".bin",212505183,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":2736,"length":408,"count":102,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":2736,"count":38,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_color","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.09329782426357269,-0.11512692272663116,-0.026659779250621796],"maxPosition",8,[1,0.09329782426357269,0.11512692272663116,0.026659775525331497]]],-1],0,0,[],[],[]],[[[4,".bin",1384662603,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":4720,"length":288,"count":72,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":4720,"count":59,"stride":80},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_color","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false},{"name":"a_texCoord2","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.05730796977877617,-0.053259290754795074,-0.05134395509958267],"maxPosition",8,[1,0.05730796977877617,0.053259287029504776,0.05134395509958267]]],-1],0,0,[],[],[]],[[[4,".bin",3814143508,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":5184,"length":672,"count":168,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":5184,"count":72,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_color","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.087919682264328,-0.13403144478797913,-0.051343970000743866],"maxPosition",8,[1,0.087919682264328,0.13403144478797913,0.05134396255016327]]],-1],0,0,[],[],[]],[[[4,".bin",592769993,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":5544,"length":864,"count":216,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":5544,"count":77,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_color","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.12562355399131775,-0.08726683259010315,-0.051344044506549835],"maxPosition",8,[1,0.12562355399131775,0.08726682513952255,0.051344048231840134]]],-1],0,0,[],[],[]],[[[4,".bin",3920760140,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":3960,"length":552,"count":138,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":3960,"count":55,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_color","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.07353727519512177,-0.07783874869346619,-0.0513443723320961],"maxPosition",8,[1,0.07353727519512177,0.0778387263417244,0.0513443723320961]]],-1],0,0,[],[],[]],[[[4,".bin",3892010921,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":2720,"length":144,"count":36,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":2720,"count":34,"stride":80},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_color","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false},{"name":"a_texCoord2","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.05746283382177353,-0.05254316329956055,-0.0513441376388073],"maxPosition",8,[1,0.057462844997644424,0.05254316329956055,0.0513441376388073]]],-1],0,0,[],[],[]],[[[4,".bin",1250837415,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":5688,"length":792,"count":198,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":5688,"count":79,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_color","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.11363479495048523,-0.1062636524438858,-0.05134395509958267],"maxPosition",8,[1,0.11363479495048523,0.1062636524438858,0.05134395509958267]]],-1],0,0,[],[],[]],[[[4,".bin",534479401,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":6624,"length":1104,"count":276,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":6624,"count":92,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_color","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.09059351682662964,-0.09966154396533966,-0.05134396255016327],"maxPosition",8,[1,0.09059353172779083,0.09966154396533966,0.05134396627545357]]],-1],0,0,[],[],[]],[[[4,".bin",260770631,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":13600,"length":768,"count":192,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":13600,"count":170,"stride":80},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_color","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false},{"name":"a_texCoord2","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.08064092695713043,-0.0814310610294342,-0.03963855281472206],"maxPosition",8,[1,0.08064092695713043,0.0814310610294342,0.03963854908943176]]],-1],0,0,[],[],[]],[[[4,".bin",3326005949,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":3168,"length":240,"count":60,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":3168,"count":44,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_color","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.06704473495483398,-0.06685535609722137,-0.05134443938732147],"maxPosition",8,[1,0.06704473495483398,0.06685534119606018,0.05134443938732147]]],-1],0,0,[],[],[]],[[[4,".bin",3880281422,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":5328,"length":336,"count":84,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":5328,"count":74,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_color","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.05654842406511307,-0.07310677319765091,-0.051345016807317734],"maxPosition",8,[1,0.05654844269156456,0.07310677319765091,0.051345013082027435]]],-1],0,0,[],[],[]],[[[4,".bin",4064806305,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":4608,"length":576,"count":144,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":4608,"count":64,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_color","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.08690959215164185,-0.06782201677560806,-0.03491349518299103],"maxPosition",8,[1,0.08690959215164185,0.06782200932502747,0.03491349518299103]]],-1],0,0,[],[],[]],[[[4,".bin",2392390549,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":4680,"length":648,"count":162,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":4680,"count":65,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_color","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.07866529375314713,-0.1079447939991951,-0.05134408548474312],"maxPosition",8,[1,0.07866529375314713,0.1079447939991951,0.05134408921003342]]],-1],0,0,[],[],[]],[[[4,".bin",502707654,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":7848,"length":1176,"count":294,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":7848,"count":109,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_color","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.08068367093801498,-0.10979507118463516,-0.03769642487168312],"maxPosition",8,[1,0.08068367093801498,0.10979509353637695,0.03769642859697342]]],-1],0,0,[],[],[]],[[[4,".bin",1327315038,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":10584,"length":1776,"count":444,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":10584,"count":147,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_color","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.10422314703464508,-0.10482940077781677,-0.05134444311261177],"maxPosition",8,[1,0.10422314703464508,0.10482940077781677,0.05134444311261177]]],-1],0,0,[],[],[]],[[[4,".bin",1630562096,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":2592,"length":192,"count":48,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":2592,"count":36,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_color","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.07203051447868347,-0.09359083324670792,-0.051345184445381165],"maxPosition",8,[1,0.07203051447868347,0.09359084069728851,0.051345184445381165]]],-1],0,0,[],[],[]],[[[4,".bin",2628084285,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":4896,"length":336,"count":84,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":4896,"count":68,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_color","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.08219968527555466,-0.09236723184585571,-0.039436306804418564],"maxPosition",8,[1,0.08219967037439346,0.09236723184585571,0.03943631052970886]]],-1],0,0,[],[],[]],[[[4,".bin",3248686005,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":21920,"length":1176,"count":294,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":21920,"count":274,"stride":80},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_color","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false},{"name":"a_texCoord2","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.08364330232143402,-0.08242685347795486,-0.05134360492229462],"maxPosition",8,[1,0.08364330232143402,0.08242685347795486,0.05134360492229462]]],-1],0,0,[],[],[]],[[[4,".bin",1173663697,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":2880,"length":240,"count":60,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":2880,"count":40,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_color","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.035982895642519,-0.08981385827064514,-0.04236508160829544],"maxPosition",8,[1,0.03598291426897049,0.08981385827064514,0.042365074157714844]]],-1],0,0,[],[],[]],[[[4,".bin",1293871021,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":5600,"length":288,"count":72,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":5600,"count":70,"stride":80},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_color","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false},{"name":"a_texCoord2","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.06358283758163452,-0.07177577912807465,-0.05134415999054909],"maxPosition",8,[1,0.06358283758163452,0.07177577912807465,0.05134415999054909]]],-1],0,0,[],[],[]],[[[4,".bin",3211339896,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":4104,"length":528,"count":132,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":4104,"count":57,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_color","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.04300187900662422,-0.0845295637845993,-0.046207621693611145],"maxPosition",8,[1,0.04300186038017273,0.0845295637845993,0.046207621693611145]]],-1],0,0,[],[],[]],[[[4,".bin",2066024625,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":6120,"length":912,"count":228,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":6120,"count":85,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_color","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.1023034155368805,-0.08661213517189026,-0.04378490149974823],"maxPosition",8,[1,0.1023034155368805,0.08661213517189026,0.04378489404916763]]],-1],0,0,[],[],[]],[[[4,".bin",3674477542,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":15120,"length":816,"count":204,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":15120,"count":189,"stride":80},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_color","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false},{"name":"a_texCoord2","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.09519694000482559,-0.1056772917509079,-0.051343999803066254],"maxPosition",8,[1,0.09519695490598679,0.1056772917509079,0.05134399235248566]]],-1],0,0,[],[],[]],[[[10,"1",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_TEXTURE":true}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[3,2],[231,5]],[[[15,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{},{}],[{"USE_ALBEDO_MAP":true,"USE_EMISSIVE_MAP":true},{},{}],[[[{"occlusion":0.5,"roughness":0,"metallic":0},"mainColor",8,[4,4292277222],"emissive",8,[4,4284111450],"mainTexture",6,0,"emissiveMap",6,1],{},{}],11,0,0]]],0,0,[0,0,0],[3,5,2],[51,51,7]],[[[4,".bin",3670187378,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":2880,"length":432,"count":108,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":2880,"count":60,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.18751758337020874,-0.1052720695734024,-0.02677033096551895],"maxPosition",8,[1,0.18751758337020874,0.1052720695734024,0.02677033096551895]]],-1],0,0,[],[],[]],[[[4,".bin",3542671086,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":8496,"length":3744,"count":936,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":8496,"count":177,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.0011547231115400791,-0.0010649514151737094,-0.00008471399632981047],"maxPosition",8,[1,0.0010426283115521073,0.0010649538598954678,0.003693091217428446]]],-1],0,0,[],[],[]],[[[4,".bin",3713464823,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":8496,"length":3744,"count":936,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":8496,"count":177,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.0011547231115400791,-0.0010649514151737094,-0.00008471399632981047],"maxPosition",8,[1,0.0010426283115521073,0.0010649538598954678,0.003693091217428446]]],-1],0,0,[],[],[]],[[[4,".bin",2142035269,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":8496,"length":3744,"count":936,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":8496,"count":177,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.0011547231115400791,-0.0010649514151737094,-0.00008471399632981047],"maxPosition",8,[1,0.0010426283115521073,0.0010649538598954678,0.003693091217428446]]],-1],0,0,[],[],[]],[[[73,"builtin-particle",[{"hash":2554907268,"name":"builtin-particle|particle-vs-legacy:lpvs_main|tinted-fs:add","blocks":[{"name":"Constants","stageFlags":1,"binding":0,"members":[{"name":"mainTiling_Offset","type":16,"count":1},{"name":"frameTile_velLenScale","type":16,"count":1},{"name":"scale","type":16,"count":1},{"name":"nodeRotation","type":16,"count":1}],"defines":[]},{"name":"FragConstants","stageFlags":16,"binding":1,"members":[{"name":"tintColor","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"mainTexture","type":28,"count":1,"stageFlags":16,"binding":2,"defines":[]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_texCoord","format":32,"location":1,"defines":[]},{"name":"a_texCoord1","format":32,"location":2,"defines":[]},{"name":"a_texCoord2","format":32,"location":3,"defines":[]},{"name":"a_color","format":44,"location":4,"defines":[]},{"name":"a_color1","format":32,"location":8,"defines":["CC_RENDER_MODE"]},{"name":"a_texCoord3","format":32,"location":6,"defines":["CC_RENDER_MODE"]},{"name":"a_normal","format":32,"location":7,"defines":["CC_RENDER_MODE"]}],"varyings":[{"name":"uv","type":14,"count":1,"stageFlags":17,"location":0,"defines":[]},{"name":"color","type":16,"count":1,"stageFlags":17,"location":1,"defines":[]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"glsl4":{"vert":"\nprecision highp float;\nvec4 quaternionFromAxis (vec3 xAxis,vec3 yAxis,vec3 zAxis){\n  mat3 m = mat3(xAxis,yAxis,zAxis);\n  float trace = m[0][0] + m[1][1] + m[2][2];\n  vec4 quat;\n  if (trace > 0.) {\n    float s = 0.5 / sqrt(trace + 1.0);\n    quat.w = 0.25 / s;\n    quat.x = (m[2][1] - m[1][2]) * s;\n    quat.y = (m[0][2] - m[2][0]) * s;\n    quat.z = (m[1][0] - m[0][1]) * s;\n  } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n    float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n    quat.w = (m[2][1] - m[1][2]) / s;\n    quat.x = 0.25 * s;\n    quat.y = (m[0][1] + m[1][0]) / s;\n    quat.z = (m[0][2] + m[2][0]) / s;\n  } else if (m[1][1] > m[2][2]) {\n    float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n    quat.w = (m[0][2] - m[2][0]) / s;\n    quat.x = (m[0][1] + m[1][0]) / s;\n    quat.y = 0.25 * s;\n    quat.z = (m[1][2] + m[2][1]) / s;\n  } else {\n    float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n    quat.w = (m[1][0] - m[0][1]) / s;\n    quat.x = (m[0][2] + m[2][0]) / s;\n    quat.y = (m[1][2] + m[2][1]) / s;\n    quat.z = 0.25 * s;\n  }\n  float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n  if (len > 0.) {\n    len = 1. / sqrt(len);\n    quat.x = quat.x * len;\n    quat.y = quat.y * len;\n    quat.z = quat.z * len;\n    quat.w = quat.w * len;\n  }\n  return quat;\n}\nvec4 quaternionFromEuler (vec3 angle){\n  float x = angle.x / 2.;\n  float y = angle.y / 2.;\n  float z = angle.z / 2.;\n  float sx = sin(x);\n  float cx = cos(x);\n  float sy = sin(y);\n  float cy = cos(y);\n  float sz = sin(z);\n  float cz = cos(z);\n  vec4 quat = vec4(0);\n  quat.x = sx * cy * cz + cx * sy * sz;\n  quat.y = cx * sy * cz + sx * cy * sz;\n  quat.z = cx * cy * sz - sx * sy * cz;\n  quat.w = cx * cy * cz - sx * sy * sz;\n  return quat;\n}\nmat4 matrixFromRT (vec4 q, vec3 p){\n  float x2 = q.x + q.x;\n  float y2 = q.y + q.y;\n  float z2 = q.z + q.z;\n  float xx = q.x * x2;\n  float xy = q.x * y2;\n  float xz = q.x * z2;\n  float yy = q.y * y2;\n  float yz = q.y * z2;\n  float zz = q.z * z2;\n  float wx = q.w * x2;\n  float wy = q.w * y2;\n  float wz = q.w * z2;\n  return mat4(\n    1. - (yy + zz), xy + wz, xz - wy, 0,\n    xy - wz, 1. - (xx + zz), yz + wx, 0,\n    xz + wy, yz - wx, 1. - (xx + yy), 0,\n    p.x, p.y, p.z, 1\n  );\n}\nmat4 matFromRTS (vec4 q, vec3 t, vec3 s){\n  float x = q.x, y = q.y, z = q.z, w = q.w;\n  float x2 = x + x;\n  float y2 = y + y;\n  float z2 = z + z;\n  float xx = x * x2;\n  float xy = x * y2;\n  float xz = x * z2;\n  float yy = y * y2;\n  float yz = y * z2;\n  float zz = z * z2;\n  float wx = w * x2;\n  float wy = w * y2;\n  float wz = w * z2;\n  float sx = s.x;\n  float sy = s.y;\n  float sz = s.z;\n  return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n    (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n    (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n    t.x, t.y, t.z, 1);\n}\nvec4 quatMultiply (vec4 a, vec4 b){\n  vec4 quat;\n  quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n  quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n  quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n  quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n  return quat;\n}\nvoid rotateVecFromQuat (inout vec3 v, vec4 q){\n  float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n  float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n  float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n  float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n  v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n  v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n  v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace (vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n  vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n  vec4 rotQuat = quatMultiply(viewQuat, q);\n  rotateVecFromQuat(pos, rotQuat);\n  return pos;\n}\nmat3 quatToMat3(vec4 q) {\n  vec3 m0 = vec3(\n    1.0 - 2.0 * q.y * q.y - 2.0 * q.z * q.z,\n    2.0 * q.x * q.y + 2.0 * q.w * q.z,\n    2.0 * q.x * q.z - 2.0 * q.w * q.y);\n\tvec3 m1 = vec3(\n    2.0 * q.x * q.y - 2.0 * q.w * q.z,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.z * q.z,\n    2.0 * q.y * q.z + 2.0 * q.w * q.x);\n\tvec3 m2 = vec3(\n    2.0 * q.x * q.z + 2.0 * q.w * q.y,\n    2.0 * q.y * q.z - 2.0 * q.w * q.x,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.y * q.y);\n  return mat3(m0, m1, m2);\n}\nvec4 mat3ToQuat(mat3 mat) {\n  float tr = mat[0][0] + mat[1][1] + mat[2][2];\n\tfloat qw, qx, qy, qz;\n  if (tr > 0.0) {\n    float S = sqrt(tr + 1.0) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = 0.25 * S;\n\t  qx = (mat[1][2] - mat[2][1]) * invS;\n\t  qy = (mat[2][0] - mat[0][2]) * invS;\n\t  qz = (mat[0][1] - mat[1][0]) * invS;\n  } else if ((mat[0][0] > mat[1][1])&&(mat[0][0] > mat[2][2])) {\n    float S = sqrt(1.0 + mat[0][0] - mat[1][1] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[1][2] - mat[2][1]) * invS;\n\t  qx = 0.25 * S;\n\t  qy = (mat[1][0] + mat[0][1]) * invS;\n\t  qz = (mat[2][0] + mat[0][2]) * invS;\n  } else if (mat[1][1] > mat[2][2]) {\n\t  float S = sqrt(1.0 + mat[1][1] - mat[0][0] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[2][0] - mat[0][2]) * invS;\n\t  qx = (mat[1][0] + mat[0][1]) * invS;\n\t  qy = 0.25 * S;\n\t  qz = (mat[2][1] + mat[1][2]) * invS;\n  } else {\n\t  float S = sqrt(1.0 + mat[2][2] - mat[0][0] - mat[1][1]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[0][1] - mat[1][0]) * invS;\n\t  qx = (mat[2][0] + mat[0][2]) * invS;\n\t  qy = (mat[2][1] + mat[1][2]) * invS;\n\t  qz = 0.25 * S;\n  }\n  return vec4(qx, qy, qz, qw);\n}\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 mainTiling_Offset;\n  vec4 frameTile_velLenScale;\n  vec4 scale;\n  vec4 nodeRotation;\n};\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(set = 2, binding = 0) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n};\nlayout(location = 0) out mediump vec2 uv;\nlayout(location = 1) out mediump vec4 color;\nvoid computeVertPos (inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n  , mat4 viewInv\n#endif\n#if CC_RENDER_MODE == 1\n  , vec3 eye\n  , vec4 velocity\n  , float velocityScale\n  , float lengthScale\n  , float xIndex\n#endif\n) {\n#if CC_RENDER_MODE == 0\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n  vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n  vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_RENDER_MODE == 1\n  vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n  vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n  pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_RENDER_MODE == 2\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = vec3(1, 0, 0);\n  vec3 camY = vec3(0, 0, -1);\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_RENDER_MODE == 3\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  rotateVecFromQuat(viewSpaceVert, q);\n  vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n  vec3 camY = vec3(0, 1, 0);\n  vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n  pos.xyz += offset;\n#else\n  pos.x += vertOffset.x;\n  pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV (float frameIndex, vec2 vertIndex, vec2 frameTile){\n  vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n  aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if CC_RENDER_MODE != 4\n  vertIndex.y = 1. - vertIndex.y;\n#endif\n  return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec3 a_texCoord;\nlayout(location = 2) in vec3 a_texCoord1;\nlayout(location = 3) in vec3 a_texCoord2;\nlayout(location = 4) in vec4 a_color;\n#if CC_RENDER_MODE == 1\n  layout(location = 8) in vec3 a_color1;\n#endif\n#if CC_RENDER_MODE == 4\n  layout(location = 6) in vec3 a_texCoord3;\n  layout(location = 7) in vec3 a_normal;\n  layout(location = 8) in vec4 a_color1;\n#endif\nvec4 lpvs_main () {\n  vec3 compScale = scale.xyz * a_texCoord1;\n  vec4 pos = vec4(a_position, 1);\n  #if CC_RENDER_MODE == 1\n    vec4 velocity = vec4(a_color1.xyz, 0);\n  #endif\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_RENDER_MODE == 1\n      velocity = cc_matWorld * velocity;\n    #endif\n  #endif\n  #if ROTATION_OVER_TIME_MODULE_ENABLE\n    vec3 rotTmp = a_texCoord2;\n    float mulFactor = 1.0;\n    if (rotTmp.x > 10.0 * 0.5) {\n        rotTmp.x -= 10.0;\n        mulFactor = -1.0;\n    }\n    vec4 rot = vec4(rotTmp, 0.0);\n    rot.w = mulFactor * sqrt(abs(1.0 - rot.x * rot.x - rot.y * rot.y - rot.z * rot.z));\n  #else\n    #if CC_RENDER_MODE != 4\n      #if CC_RENDER_MODE == 0\n        vec3 rotEuler = a_texCoord2;\n      #elif CC_RENDER_MODE == 1\n        vec3 rotEuler = vec3(0.);\n      #else\n        vec3 rotEuler = vec3(0., 0., a_texCoord2.z);\n      #endif\n      vec4 rot = quaternionFromEuler(rotEuler);\n    #else\n      vec4 rot = quaternionFromEuler(a_texCoord2);\n    #endif\n  #endif\n  #if CC_RENDER_MODE != 4\n    vec2 cornerOffset = vec2((a_texCoord.xy - 0.5));\n    #if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_matViewInv);\n    #elif CC_RENDER_MODE == 1\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_cameraPos.xyz, velocity, frameTile_velLenScale.z, frameTile_velLenScale.w, a_texCoord.x);\n    #elif 2\n      computeVertPos(pos, cornerOffset, rot, compScale);\n    #endif\n    color = a_color;\n  #else\n    mat3 rotMat = quatToMat3(rot);\n    mat3 nodeMat = quatToMat3(nodeRotation);\n    rotMat = nodeMat * rotMat;\n    rot = mat3ToQuat(rotMat);\n    mat4 xformNoScale = matrixFromRT(rot, pos.xyz);\n    mat4 xform = matFromRTS(rot, pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color = a_color * a_color1;\n  #endif\n  uv = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n  pos = cc_matViewProj * pos;\n  return pos;\n}\nvoid main() { gl_Position = lpvs_main(); }","frag":"\nprecision mediump float;\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\nlayout(location = 0) in vec2 uv;\nlayout(location = 1) in vec4 color;\nlayout(set = 1, binding = 2) uniform sampler2D mainTexture;\nlayout(set = 1, binding = 1) uniform FragConstants {\n  vec4 tintColor;\n};\nvec4 add () {\n  vec4 col = 2.0 * color * tintColor * texture(mainTexture, uv);\n  return CCFragOutput(col);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = add(); }"},"glsl3":{"vert":"\nprecision highp float;\nvec4 quaternionFromAxis (vec3 xAxis,vec3 yAxis,vec3 zAxis){\n  mat3 m = mat3(xAxis,yAxis,zAxis);\n  float trace = m[0][0] + m[1][1] + m[2][2];\n  vec4 quat;\n  if (trace > 0.) {\n    float s = 0.5 / sqrt(trace + 1.0);\n    quat.w = 0.25 / s;\n    quat.x = (m[2][1] - m[1][2]) * s;\n    quat.y = (m[0][2] - m[2][0]) * s;\n    quat.z = (m[1][0] - m[0][1]) * s;\n  } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n    float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n    quat.w = (m[2][1] - m[1][2]) / s;\n    quat.x = 0.25 * s;\n    quat.y = (m[0][1] + m[1][0]) / s;\n    quat.z = (m[0][2] + m[2][0]) / s;\n  } else if (m[1][1] > m[2][2]) {\n    float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n    quat.w = (m[0][2] - m[2][0]) / s;\n    quat.x = (m[0][1] + m[1][0]) / s;\n    quat.y = 0.25 * s;\n    quat.z = (m[1][2] + m[2][1]) / s;\n  } else {\n    float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n    quat.w = (m[1][0] - m[0][1]) / s;\n    quat.x = (m[0][2] + m[2][0]) / s;\n    quat.y = (m[1][2] + m[2][1]) / s;\n    quat.z = 0.25 * s;\n  }\n  float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n  if (len > 0.) {\n    len = 1. / sqrt(len);\n    quat.x = quat.x * len;\n    quat.y = quat.y * len;\n    quat.z = quat.z * len;\n    quat.w = quat.w * len;\n  }\n  return quat;\n}\nvec4 quaternionFromEuler (vec3 angle){\n  float x = angle.x / 2.;\n  float y = angle.y / 2.;\n  float z = angle.z / 2.;\n  float sx = sin(x);\n  float cx = cos(x);\n  float sy = sin(y);\n  float cy = cos(y);\n  float sz = sin(z);\n  float cz = cos(z);\n  vec4 quat = vec4(0);\n  quat.x = sx * cy * cz + cx * sy * sz;\n  quat.y = cx * sy * cz + sx * cy * sz;\n  quat.z = cx * cy * sz - sx * sy * cz;\n  quat.w = cx * cy * cz - sx * sy * sz;\n  return quat;\n}\nmat4 matrixFromRT (vec4 q, vec3 p){\n  float x2 = q.x + q.x;\n  float y2 = q.y + q.y;\n  float z2 = q.z + q.z;\n  float xx = q.x * x2;\n  float xy = q.x * y2;\n  float xz = q.x * z2;\n  float yy = q.y * y2;\n  float yz = q.y * z2;\n  float zz = q.z * z2;\n  float wx = q.w * x2;\n  float wy = q.w * y2;\n  float wz = q.w * z2;\n  return mat4(\n    1. - (yy + zz), xy + wz, xz - wy, 0,\n    xy - wz, 1. - (xx + zz), yz + wx, 0,\n    xz + wy, yz - wx, 1. - (xx + yy), 0,\n    p.x, p.y, p.z, 1\n  );\n}\nmat4 matFromRTS (vec4 q, vec3 t, vec3 s){\n  float x = q.x, y = q.y, z = q.z, w = q.w;\n  float x2 = x + x;\n  float y2 = y + y;\n  float z2 = z + z;\n  float xx = x * x2;\n  float xy = x * y2;\n  float xz = x * z2;\n  float yy = y * y2;\n  float yz = y * z2;\n  float zz = z * z2;\n  float wx = w * x2;\n  float wy = w * y2;\n  float wz = w * z2;\n  float sx = s.x;\n  float sy = s.y;\n  float sz = s.z;\n  return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n    (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n    (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n    t.x, t.y, t.z, 1);\n}\nvec4 quatMultiply (vec4 a, vec4 b){\n  vec4 quat;\n  quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n  quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n  quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n  quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n  return quat;\n}\nvoid rotateVecFromQuat (inout vec3 v, vec4 q){\n  float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n  float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n  float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n  float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n  v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n  v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n  v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace (vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n  vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n  vec4 rotQuat = quatMultiply(viewQuat, q);\n  rotateVecFromQuat(pos, rotQuat);\n  return pos;\n}\nmat3 quatToMat3(vec4 q) {\n  vec3 m0 = vec3(\n    1.0 - 2.0 * q.y * q.y - 2.0 * q.z * q.z,\n    2.0 * q.x * q.y + 2.0 * q.w * q.z,\n    2.0 * q.x * q.z - 2.0 * q.w * q.y);\n\tvec3 m1 = vec3(\n    2.0 * q.x * q.y - 2.0 * q.w * q.z,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.z * q.z,\n    2.0 * q.y * q.z + 2.0 * q.w * q.x);\n\tvec3 m2 = vec3(\n    2.0 * q.x * q.z + 2.0 * q.w * q.y,\n    2.0 * q.y * q.z - 2.0 * q.w * q.x,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.y * q.y);\n  return mat3(m0, m1, m2);\n}\nvec4 mat3ToQuat(mat3 mat) {\n  float tr = mat[0][0] + mat[1][1] + mat[2][2];\n\tfloat qw, qx, qy, qz;\n  if (tr > 0.0) {\n    float S = sqrt(tr + 1.0) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = 0.25 * S;\n\t  qx = (mat[1][2] - mat[2][1]) * invS;\n\t  qy = (mat[2][0] - mat[0][2]) * invS;\n\t  qz = (mat[0][1] - mat[1][0]) * invS;\n  } else if ((mat[0][0] > mat[1][1])&&(mat[0][0] > mat[2][2])) {\n    float S = sqrt(1.0 + mat[0][0] - mat[1][1] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[1][2] - mat[2][1]) * invS;\n\t  qx = 0.25 * S;\n\t  qy = (mat[1][0] + mat[0][1]) * invS;\n\t  qz = (mat[2][0] + mat[0][2]) * invS;\n  } else if (mat[1][1] > mat[2][2]) {\n\t  float S = sqrt(1.0 + mat[1][1] - mat[0][0] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[2][0] - mat[0][2]) * invS;\n\t  qx = (mat[1][0] + mat[0][1]) * invS;\n\t  qy = 0.25 * S;\n\t  qz = (mat[2][1] + mat[1][2]) * invS;\n  } else {\n\t  float S = sqrt(1.0 + mat[2][2] - mat[0][0] - mat[1][1]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[0][1] - mat[1][0]) * invS;\n\t  qx = (mat[2][0] + mat[0][2]) * invS;\n\t  qy = (mat[2][1] + mat[1][2]) * invS;\n\t  qz = 0.25 * S;\n  }\n  return vec4(qx, qy, qz, qw);\n}\nlayout(std140) uniform Constants {\n  vec4 mainTiling_Offset;\n  vec4 frameTile_velLenScale;\n  vec4 scale;\n  vec4 nodeRotation;\n};\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(std140) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n};\nout mediump vec2 uv;\nout mediump vec4 color;\nvoid computeVertPos (inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n  , mat4 viewInv\n#endif\n#if CC_RENDER_MODE == 1\n  , vec3 eye\n  , vec4 velocity\n  , float velocityScale\n  , float lengthScale\n  , float xIndex\n#endif\n) {\n#if CC_RENDER_MODE == 0\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n  vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n  vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_RENDER_MODE == 1\n  vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n  vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n  pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_RENDER_MODE == 2\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = vec3(1, 0, 0);\n  vec3 camY = vec3(0, 0, -1);\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_RENDER_MODE == 3\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  rotateVecFromQuat(viewSpaceVert, q);\n  vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n  vec3 camY = vec3(0, 1, 0);\n  vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n  pos.xyz += offset;\n#else\n  pos.x += vertOffset.x;\n  pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV (float frameIndex, vec2 vertIndex, vec2 frameTile){\n  vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n  aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if CC_RENDER_MODE != 4\n  vertIndex.y = 1. - vertIndex.y;\n#endif\n  return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nin vec3 a_position;\nin vec3 a_texCoord;\nin vec3 a_texCoord1;\nin vec3 a_texCoord2;\nin vec4 a_color;\n#if CC_RENDER_MODE == 1\n  in vec3 a_color1;\n#endif\n#if CC_RENDER_MODE == 4\n  in vec3 a_texCoord3;\n  in vec3 a_normal;\n  in vec4 a_color1;\n#endif\nvec4 lpvs_main () {\n  vec3 compScale = scale.xyz * a_texCoord1;\n  vec4 pos = vec4(a_position, 1);\n  #if CC_RENDER_MODE == 1\n    vec4 velocity = vec4(a_color1.xyz, 0);\n  #endif\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_RENDER_MODE == 1\n      velocity = cc_matWorld * velocity;\n    #endif\n  #endif\n  #if ROTATION_OVER_TIME_MODULE_ENABLE\n    vec3 rotTmp = a_texCoord2;\n    float mulFactor = 1.0;\n    if (rotTmp.x > 10.0 * 0.5) {\n        rotTmp.x -= 10.0;\n        mulFactor = -1.0;\n    }\n    vec4 rot = vec4(rotTmp, 0.0);\n    rot.w = mulFactor * sqrt(abs(1.0 - rot.x * rot.x - rot.y * rot.y - rot.z * rot.z));\n  #else\n    #if CC_RENDER_MODE != 4\n      #if CC_RENDER_MODE == 0\n        vec3 rotEuler = a_texCoord2;\n      #elif CC_RENDER_MODE == 1\n        vec3 rotEuler = vec3(0.);\n      #else\n        vec3 rotEuler = vec3(0., 0., a_texCoord2.z);\n      #endif\n      vec4 rot = quaternionFromEuler(rotEuler);\n    #else\n      vec4 rot = quaternionFromEuler(a_texCoord2);\n    #endif\n  #endif\n  #if CC_RENDER_MODE != 4\n    vec2 cornerOffset = vec2((a_texCoord.xy - 0.5));\n    #if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_matViewInv);\n    #elif CC_RENDER_MODE == 1\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_cameraPos.xyz, velocity, frameTile_velLenScale.z, frameTile_velLenScale.w, a_texCoord.x);\n    #elif 2\n      computeVertPos(pos, cornerOffset, rot, compScale);\n    #endif\n    color = a_color;\n  #else\n    mat3 rotMat = quatToMat3(rot);\n    mat3 nodeMat = quatToMat3(nodeRotation);\n    rotMat = nodeMat * rotMat;\n    rot = mat3ToQuat(rotMat);\n    mat4 xformNoScale = matrixFromRT(rot, pos.xyz);\n    mat4 xform = matFromRTS(rot, pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color = a_color * a_color1;\n  #endif\n  uv = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n  pos = cc_matViewProj * pos;\n  return pos;\n}\nvoid main() { gl_Position = lpvs_main(); }","frag":"\nprecision mediump float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\nin vec2 uv;\nin vec4 color;\nuniform sampler2D mainTexture;\nlayout(std140) uniform FragConstants {\n  vec4 tintColor;\n};\nvec4 add () {\n  vec4 col = 2.0 * color * tintColor * texture(mainTexture, uv);\n  return CCFragOutput(col);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = add(); }"},"glsl1":{"vert":"\nprecision highp float;\nvec4 quaternionFromAxis (vec3 xAxis,vec3 yAxis,vec3 zAxis){\n  mat3 m = mat3(xAxis,yAxis,zAxis);\n  float trace = m[0][0] + m[1][1] + m[2][2];\n  vec4 quat;\n  if (trace > 0.) {\n    float s = 0.5 / sqrt(trace + 1.0);\n    quat.w = 0.25 / s;\n    quat.x = (m[2][1] - m[1][2]) * s;\n    quat.y = (m[0][2] - m[2][0]) * s;\n    quat.z = (m[1][0] - m[0][1]) * s;\n  } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n    float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n    quat.w = (m[2][1] - m[1][2]) / s;\n    quat.x = 0.25 * s;\n    quat.y = (m[0][1] + m[1][0]) / s;\n    quat.z = (m[0][2] + m[2][0]) / s;\n  } else if (m[1][1] > m[2][2]) {\n    float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n    quat.w = (m[0][2] - m[2][0]) / s;\n    quat.x = (m[0][1] + m[1][0]) / s;\n    quat.y = 0.25 * s;\n    quat.z = (m[1][2] + m[2][1]) / s;\n  } else {\n    float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n    quat.w = (m[1][0] - m[0][1]) / s;\n    quat.x = (m[0][2] + m[2][0]) / s;\n    quat.y = (m[1][2] + m[2][1]) / s;\n    quat.z = 0.25 * s;\n  }\n  float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n  if (len > 0.) {\n    len = 1. / sqrt(len);\n    quat.x = quat.x * len;\n    quat.y = quat.y * len;\n    quat.z = quat.z * len;\n    quat.w = quat.w * len;\n  }\n  return quat;\n}\nvec4 quaternionFromEuler (vec3 angle){\n  float x = angle.x / 2.;\n  float y = angle.y / 2.;\n  float z = angle.z / 2.;\n  float sx = sin(x);\n  float cx = cos(x);\n  float sy = sin(y);\n  float cy = cos(y);\n  float sz = sin(z);\n  float cz = cos(z);\n  vec4 quat = vec4(0);\n  quat.x = sx * cy * cz + cx * sy * sz;\n  quat.y = cx * sy * cz + sx * cy * sz;\n  quat.z = cx * cy * sz - sx * sy * cz;\n  quat.w = cx * cy * cz - sx * sy * sz;\n  return quat;\n}\nmat4 matrixFromRT (vec4 q, vec3 p){\n  float x2 = q.x + q.x;\n  float y2 = q.y + q.y;\n  float z2 = q.z + q.z;\n  float xx = q.x * x2;\n  float xy = q.x * y2;\n  float xz = q.x * z2;\n  float yy = q.y * y2;\n  float yz = q.y * z2;\n  float zz = q.z * z2;\n  float wx = q.w * x2;\n  float wy = q.w * y2;\n  float wz = q.w * z2;\n  return mat4(\n    1. - (yy + zz), xy + wz, xz - wy, 0,\n    xy - wz, 1. - (xx + zz), yz + wx, 0,\n    xz + wy, yz - wx, 1. - (xx + yy), 0,\n    p.x, p.y, p.z, 1\n  );\n}\nmat4 matFromRTS (vec4 q, vec3 t, vec3 s){\n  float x = q.x, y = q.y, z = q.z, w = q.w;\n  float x2 = x + x;\n  float y2 = y + y;\n  float z2 = z + z;\n  float xx = x * x2;\n  float xy = x * y2;\n  float xz = x * z2;\n  float yy = y * y2;\n  float yz = y * z2;\n  float zz = z * z2;\n  float wx = w * x2;\n  float wy = w * y2;\n  float wz = w * z2;\n  float sx = s.x;\n  float sy = s.y;\n  float sz = s.z;\n  return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n    (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n    (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n    t.x, t.y, t.z, 1);\n}\nvec4 quatMultiply (vec4 a, vec4 b){\n  vec4 quat;\n  quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n  quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n  quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n  quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n  return quat;\n}\nvoid rotateVecFromQuat (inout vec3 v, vec4 q){\n  float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n  float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n  float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n  float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n  v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n  v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n  v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace (vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n  vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n  vec4 rotQuat = quatMultiply(viewQuat, q);\n  rotateVecFromQuat(pos, rotQuat);\n  return pos;\n}\nmat3 quatToMat3(vec4 q) {\n  vec3 m0 = vec3(\n    1.0 - 2.0 * q.y * q.y - 2.0 * q.z * q.z,\n    2.0 * q.x * q.y + 2.0 * q.w * q.z,\n    2.0 * q.x * q.z - 2.0 * q.w * q.y);\n\tvec3 m1 = vec3(\n    2.0 * q.x * q.y - 2.0 * q.w * q.z,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.z * q.z,\n    2.0 * q.y * q.z + 2.0 * q.w * q.x);\n\tvec3 m2 = vec3(\n    2.0 * q.x * q.z + 2.0 * q.w * q.y,\n    2.0 * q.y * q.z - 2.0 * q.w * q.x,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.y * q.y);\n  return mat3(m0, m1, m2);\n}\nvec4 mat3ToQuat(mat3 mat) {\n  float tr = mat[0][0] + mat[1][1] + mat[2][2];\n\tfloat qw, qx, qy, qz;\n  if (tr > 0.0) {\n    float S = sqrt(tr + 1.0) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = 0.25 * S;\n\t  qx = (mat[1][2] - mat[2][1]) * invS;\n\t  qy = (mat[2][0] - mat[0][2]) * invS;\n\t  qz = (mat[0][1] - mat[1][0]) * invS;\n  } else if ((mat[0][0] > mat[1][1])&&(mat[0][0] > mat[2][2])) {\n    float S = sqrt(1.0 + mat[0][0] - mat[1][1] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[1][2] - mat[2][1]) * invS;\n\t  qx = 0.25 * S;\n\t  qy = (mat[1][0] + mat[0][1]) * invS;\n\t  qz = (mat[2][0] + mat[0][2]) * invS;\n  } else if (mat[1][1] > mat[2][2]) {\n\t  float S = sqrt(1.0 + mat[1][1] - mat[0][0] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[2][0] - mat[0][2]) * invS;\n\t  qx = (mat[1][0] + mat[0][1]) * invS;\n\t  qy = 0.25 * S;\n\t  qz = (mat[2][1] + mat[1][2]) * invS;\n  } else {\n\t  float S = sqrt(1.0 + mat[2][2] - mat[0][0] - mat[1][1]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[0][1] - mat[1][0]) * invS;\n\t  qx = (mat[2][0] + mat[0][2]) * invS;\n\t  qy = (mat[2][1] + mat[1][2]) * invS;\n\t  qz = 0.25 * S;\n  }\n  return vec4(qx, qy, qz, qw);\n}\n   uniform vec4 mainTiling_Offset;\n   uniform vec4 frameTile_velLenScale;\n   uniform vec4 scale;\n   uniform vec4 nodeRotation;\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matViewInv;\n  uniform highp mat4 cc_matViewProj;\n  uniform highp vec4 cc_cameraPos;\nuniform highp mat4 cc_matWorld;\nvarying mediump vec2 uv;\nvarying mediump vec4 color;\nvoid computeVertPos (inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n  , mat4 viewInv\n#endif\n#if CC_RENDER_MODE == 1\n  , vec3 eye\n  , vec4 velocity\n  , float velocityScale\n  , float lengthScale\n  , float xIndex\n#endif\n) {\n#if CC_RENDER_MODE == 0\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n  vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n  vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_RENDER_MODE == 1\n  vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n  vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n  pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_RENDER_MODE == 2\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = vec3(1, 0, 0);\n  vec3 camY = vec3(0, 0, -1);\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_RENDER_MODE == 3\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  rotateVecFromQuat(viewSpaceVert, q);\n  vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n  vec3 camY = vec3(0, 1, 0);\n  vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n  pos.xyz += offset;\n#else\n  pos.x += vertOffset.x;\n  pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV (float frameIndex, vec2 vertIndex, vec2 frameTile){\n  vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n  aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if CC_RENDER_MODE != 4\n  vertIndex.y = 1. - vertIndex.y;\n#endif\n  return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nattribute vec3 a_position;\nattribute vec3 a_texCoord;\nattribute vec3 a_texCoord1;\nattribute vec3 a_texCoord2;\nattribute vec4 a_color;\n#if CC_RENDER_MODE == 1\n  attribute vec3 a_color1;\n#endif\n#if CC_RENDER_MODE == 4\n  attribute vec3 a_texCoord3;\n  attribute vec3 a_normal;\n  attribute vec4 a_color1;\n#endif\nvec4 lpvs_main () {\n  vec3 compScale = scale.xyz * a_texCoord1;\n  vec4 pos = vec4(a_position, 1);\n  #if CC_RENDER_MODE == 1\n    vec4 velocity = vec4(a_color1.xyz, 0);\n  #endif\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_RENDER_MODE == 1\n      velocity = cc_matWorld * velocity;\n    #endif\n  #endif\n  #if ROTATION_OVER_TIME_MODULE_ENABLE\n    vec3 rotTmp = a_texCoord2;\n    float mulFactor = 1.0;\n    if (rotTmp.x > 10.0 * 0.5) {\n        rotTmp.x -= 10.0;\n        mulFactor = -1.0;\n    }\n    vec4 rot = vec4(rotTmp, 0.0);\n    rot.w = mulFactor * sqrt(abs(1.0 - rot.x * rot.x - rot.y * rot.y - rot.z * rot.z));\n  #else\n    #if CC_RENDER_MODE != 4\n      #if CC_RENDER_MODE == 0\n        vec3 rotEuler = a_texCoord2;\n      #elif CC_RENDER_MODE == 1\n        vec3 rotEuler = vec3(0.);\n      #else\n        vec3 rotEuler = vec3(0., 0., a_texCoord2.z);\n      #endif\n      vec4 rot = quaternionFromEuler(rotEuler);\n    #else\n      vec4 rot = quaternionFromEuler(a_texCoord2);\n    #endif\n  #endif\n  #if CC_RENDER_MODE != 4\n    vec2 cornerOffset = vec2((a_texCoord.xy - 0.5));\n    #if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_matViewInv);\n    #elif CC_RENDER_MODE == 1\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_cameraPos.xyz, velocity, frameTile_velLenScale.z, frameTile_velLenScale.w, a_texCoord.x);\n    #elif 2\n      computeVertPos(pos, cornerOffset, rot, compScale);\n    #endif\n    color = a_color;\n  #else\n    mat3 rotMat = quatToMat3(rot);\n    mat3 nodeMat = quatToMat3(nodeRotation);\n    rotMat = nodeMat * rotMat;\n    rot = mat3ToQuat(rotMat);\n    mat4 xformNoScale = matrixFromRT(rot, pos.xyz);\n    mat4 xform = matFromRTS(rot, pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color = a_color * a_color1;\n  #endif\n  uv = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n  pos = cc_matViewProj * pos;\n  return pos;\n}\nvoid main() { gl_Position = lpvs_main(); }","frag":"\nprecision mediump float;\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\nvarying vec2 uv;\nvarying vec4 color;\nuniform sampler2D mainTexture;\n  uniform vec4 tintColor;\nvec4 add () {\n  vec4 col = 2.0 * color * tintColor * texture2D(mainTexture, uv);\n  return CCFragOutput(col);\n}\nvoid main() { gl_FragColor = add(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":52,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":40}},"defines":[{"name":"CC_RENDER_MODE","type":"number","defines":[],"range":[0,4]},{"name":"CC_USE_WORLD_SPACE","type":"boolean","defines":[]},{"name":"ROTATION_OVER_TIME_MODULE_ENABLE","type":"boolean","defines":[]}]},{"hash":1720952533,"name":"builtin-particle|particle-vs-legacy:lpvs_main|tinted-fs:multiply","blocks":[{"name":"Constants","stageFlags":1,"binding":0,"members":[{"name":"mainTiling_Offset","type":16,"count":1},{"name":"frameTile_velLenScale","type":16,"count":1},{"name":"scale","type":16,"count":1},{"name":"nodeRotation","type":16,"count":1}],"defines":[]},{"name":"FragConstants","stageFlags":16,"binding":1,"members":[{"name":"tintColor","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"mainTexture","type":28,"count":1,"stageFlags":16,"binding":2,"defines":[]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_texCoord","format":32,"location":1,"defines":[]},{"name":"a_texCoord1","format":32,"location":2,"defines":[]},{"name":"a_texCoord2","format":32,"location":3,"defines":[]},{"name":"a_color","format":44,"location":4,"defines":[]},{"name":"a_color1","format":32,"location":8,"defines":["CC_RENDER_MODE"]},{"name":"a_texCoord3","format":32,"location":6,"defines":["CC_RENDER_MODE"]},{"name":"a_normal","format":32,"location":7,"defines":["CC_RENDER_MODE"]}],"varyings":[{"name":"uv","type":14,"count":1,"stageFlags":17,"location":0,"defines":[]},{"name":"color","type":16,"count":1,"stageFlags":17,"location":1,"defines":[]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"glsl4":{"vert":"\nprecision highp float;\nvec4 quaternionFromAxis (vec3 xAxis,vec3 yAxis,vec3 zAxis){\n  mat3 m = mat3(xAxis,yAxis,zAxis);\n  float trace = m[0][0] + m[1][1] + m[2][2];\n  vec4 quat;\n  if (trace > 0.) {\n    float s = 0.5 / sqrt(trace + 1.0);\n    quat.w = 0.25 / s;\n    quat.x = (m[2][1] - m[1][2]) * s;\n    quat.y = (m[0][2] - m[2][0]) * s;\n    quat.z = (m[1][0] - m[0][1]) * s;\n  } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n    float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n    quat.w = (m[2][1] - m[1][2]) / s;\n    quat.x = 0.25 * s;\n    quat.y = (m[0][1] + m[1][0]) / s;\n    quat.z = (m[0][2] + m[2][0]) / s;\n  } else if (m[1][1] > m[2][2]) {\n    float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n    quat.w = (m[0][2] - m[2][0]) / s;\n    quat.x = (m[0][1] + m[1][0]) / s;\n    quat.y = 0.25 * s;\n    quat.z = (m[1][2] + m[2][1]) / s;\n  } else {\n    float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n    quat.w = (m[1][0] - m[0][1]) / s;\n    quat.x = (m[0][2] + m[2][0]) / s;\n    quat.y = (m[1][2] + m[2][1]) / s;\n    quat.z = 0.25 * s;\n  }\n  float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n  if (len > 0.) {\n    len = 1. / sqrt(len);\n    quat.x = quat.x * len;\n    quat.y = quat.y * len;\n    quat.z = quat.z * len;\n    quat.w = quat.w * len;\n  }\n  return quat;\n}\nvec4 quaternionFromEuler (vec3 angle){\n  float x = angle.x / 2.;\n  float y = angle.y / 2.;\n  float z = angle.z / 2.;\n  float sx = sin(x);\n  float cx = cos(x);\n  float sy = sin(y);\n  float cy = cos(y);\n  float sz = sin(z);\n  float cz = cos(z);\n  vec4 quat = vec4(0);\n  quat.x = sx * cy * cz + cx * sy * sz;\n  quat.y = cx * sy * cz + sx * cy * sz;\n  quat.z = cx * cy * sz - sx * sy * cz;\n  quat.w = cx * cy * cz - sx * sy * sz;\n  return quat;\n}\nmat4 matrixFromRT (vec4 q, vec3 p){\n  float x2 = q.x + q.x;\n  float y2 = q.y + q.y;\n  float z2 = q.z + q.z;\n  float xx = q.x * x2;\n  float xy = q.x * y2;\n  float xz = q.x * z2;\n  float yy = q.y * y2;\n  float yz = q.y * z2;\n  float zz = q.z * z2;\n  float wx = q.w * x2;\n  float wy = q.w * y2;\n  float wz = q.w * z2;\n  return mat4(\n    1. - (yy + zz), xy + wz, xz - wy, 0,\n    xy - wz, 1. - (xx + zz), yz + wx, 0,\n    xz + wy, yz - wx, 1. - (xx + yy), 0,\n    p.x, p.y, p.z, 1\n  );\n}\nmat4 matFromRTS (vec4 q, vec3 t, vec3 s){\n  float x = q.x, y = q.y, z = q.z, w = q.w;\n  float x2 = x + x;\n  float y2 = y + y;\n  float z2 = z + z;\n  float xx = x * x2;\n  float xy = x * y2;\n  float xz = x * z2;\n  float yy = y * y2;\n  float yz = y * z2;\n  float zz = z * z2;\n  float wx = w * x2;\n  float wy = w * y2;\n  float wz = w * z2;\n  float sx = s.x;\n  float sy = s.y;\n  float sz = s.z;\n  return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n    (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n    (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n    t.x, t.y, t.z, 1);\n}\nvec4 quatMultiply (vec4 a, vec4 b){\n  vec4 quat;\n  quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n  quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n  quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n  quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n  return quat;\n}\nvoid rotateVecFromQuat (inout vec3 v, vec4 q){\n  float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n  float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n  float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n  float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n  v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n  v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n  v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace (vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n  vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n  vec4 rotQuat = quatMultiply(viewQuat, q);\n  rotateVecFromQuat(pos, rotQuat);\n  return pos;\n}\nmat3 quatToMat3(vec4 q) {\n  vec3 m0 = vec3(\n    1.0 - 2.0 * q.y * q.y - 2.0 * q.z * q.z,\n    2.0 * q.x * q.y + 2.0 * q.w * q.z,\n    2.0 * q.x * q.z - 2.0 * q.w * q.y);\n\tvec3 m1 = vec3(\n    2.0 * q.x * q.y - 2.0 * q.w * q.z,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.z * q.z,\n    2.0 * q.y * q.z + 2.0 * q.w * q.x);\n\tvec3 m2 = vec3(\n    2.0 * q.x * q.z + 2.0 * q.w * q.y,\n    2.0 * q.y * q.z - 2.0 * q.w * q.x,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.y * q.y);\n  return mat3(m0, m1, m2);\n}\nvec4 mat3ToQuat(mat3 mat) {\n  float tr = mat[0][0] + mat[1][1] + mat[2][2];\n\tfloat qw, qx, qy, qz;\n  if (tr > 0.0) {\n    float S = sqrt(tr + 1.0) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = 0.25 * S;\n\t  qx = (mat[1][2] - mat[2][1]) * invS;\n\t  qy = (mat[2][0] - mat[0][2]) * invS;\n\t  qz = (mat[0][1] - mat[1][0]) * invS;\n  } else if ((mat[0][0] > mat[1][1])&&(mat[0][0] > mat[2][2])) {\n    float S = sqrt(1.0 + mat[0][0] - mat[1][1] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[1][2] - mat[2][1]) * invS;\n\t  qx = 0.25 * S;\n\t  qy = (mat[1][0] + mat[0][1]) * invS;\n\t  qz = (mat[2][0] + mat[0][2]) * invS;\n  } else if (mat[1][1] > mat[2][2]) {\n\t  float S = sqrt(1.0 + mat[1][1] - mat[0][0] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[2][0] - mat[0][2]) * invS;\n\t  qx = (mat[1][0] + mat[0][1]) * invS;\n\t  qy = 0.25 * S;\n\t  qz = (mat[2][1] + mat[1][2]) * invS;\n  } else {\n\t  float S = sqrt(1.0 + mat[2][2] - mat[0][0] - mat[1][1]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[0][1] - mat[1][0]) * invS;\n\t  qx = (mat[2][0] + mat[0][2]) * invS;\n\t  qy = (mat[2][1] + mat[1][2]) * invS;\n\t  qz = 0.25 * S;\n  }\n  return vec4(qx, qy, qz, qw);\n}\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 mainTiling_Offset;\n  vec4 frameTile_velLenScale;\n  vec4 scale;\n  vec4 nodeRotation;\n};\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(set = 2, binding = 0) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n};\nlayout(location = 0) out mediump vec2 uv;\nlayout(location = 1) out mediump vec4 color;\nvoid computeVertPos (inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n  , mat4 viewInv\n#endif\n#if CC_RENDER_MODE == 1\n  , vec3 eye\n  , vec4 velocity\n  , float velocityScale\n  , float lengthScale\n  , float xIndex\n#endif\n) {\n#if CC_RENDER_MODE == 0\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n  vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n  vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_RENDER_MODE == 1\n  vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n  vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n  pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_RENDER_MODE == 2\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = vec3(1, 0, 0);\n  vec3 camY = vec3(0, 0, -1);\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_RENDER_MODE == 3\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  rotateVecFromQuat(viewSpaceVert, q);\n  vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n  vec3 camY = vec3(0, 1, 0);\n  vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n  pos.xyz += offset;\n#else\n  pos.x += vertOffset.x;\n  pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV (float frameIndex, vec2 vertIndex, vec2 frameTile){\n  vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n  aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if CC_RENDER_MODE != 4\n  vertIndex.y = 1. - vertIndex.y;\n#endif\n  return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec3 a_texCoord;\nlayout(location = 2) in vec3 a_texCoord1;\nlayout(location = 3) in vec3 a_texCoord2;\nlayout(location = 4) in vec4 a_color;\n#if CC_RENDER_MODE == 1\n  layout(location = 8) in vec3 a_color1;\n#endif\n#if CC_RENDER_MODE == 4\n  layout(location = 6) in vec3 a_texCoord3;\n  layout(location = 7) in vec3 a_normal;\n  layout(location = 8) in vec4 a_color1;\n#endif\nvec4 lpvs_main () {\n  vec3 compScale = scale.xyz * a_texCoord1;\n  vec4 pos = vec4(a_position, 1);\n  #if CC_RENDER_MODE == 1\n    vec4 velocity = vec4(a_color1.xyz, 0);\n  #endif\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_RENDER_MODE == 1\n      velocity = cc_matWorld * velocity;\n    #endif\n  #endif\n  #if ROTATION_OVER_TIME_MODULE_ENABLE\n    vec3 rotTmp = a_texCoord2;\n    float mulFactor = 1.0;\n    if (rotTmp.x > 10.0 * 0.5) {\n        rotTmp.x -= 10.0;\n        mulFactor = -1.0;\n    }\n    vec4 rot = vec4(rotTmp, 0.0);\n    rot.w = mulFactor * sqrt(abs(1.0 - rot.x * rot.x - rot.y * rot.y - rot.z * rot.z));\n  #else\n    #if CC_RENDER_MODE != 4\n      #if CC_RENDER_MODE == 0\n        vec3 rotEuler = a_texCoord2;\n      #elif CC_RENDER_MODE == 1\n        vec3 rotEuler = vec3(0.);\n      #else\n        vec3 rotEuler = vec3(0., 0., a_texCoord2.z);\n      #endif\n      vec4 rot = quaternionFromEuler(rotEuler);\n    #else\n      vec4 rot = quaternionFromEuler(a_texCoord2);\n    #endif\n  #endif\n  #if CC_RENDER_MODE != 4\n    vec2 cornerOffset = vec2((a_texCoord.xy - 0.5));\n    #if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_matViewInv);\n    #elif CC_RENDER_MODE == 1\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_cameraPos.xyz, velocity, frameTile_velLenScale.z, frameTile_velLenScale.w, a_texCoord.x);\n    #elif 2\n      computeVertPos(pos, cornerOffset, rot, compScale);\n    #endif\n    color = a_color;\n  #else\n    mat3 rotMat = quatToMat3(rot);\n    mat3 nodeMat = quatToMat3(nodeRotation);\n    rotMat = nodeMat * rotMat;\n    rot = mat3ToQuat(rotMat);\n    mat4 xformNoScale = matrixFromRT(rot, pos.xyz);\n    mat4 xform = matFromRTS(rot, pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color = a_color * a_color1;\n  #endif\n  uv = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n  pos = cc_matViewProj * pos;\n  return pos;\n}\nvoid main() { gl_Position = lpvs_main(); }","frag":"\nprecision mediump float;\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\nlayout(location = 0) in vec2 uv;\nlayout(location = 1) in vec4 color;\nlayout(set = 1, binding = 2) uniform sampler2D mainTexture;\nlayout(set = 1, binding = 1) uniform FragConstants {\n  vec4 tintColor;\n};\nvec4 multiply () {\n  vec4 col;\n  vec4 texColor = texture(mainTexture, uv);\n  col.rgb = tintColor.rgb * texColor.rgb * color.rgb * vec3(2.0);\n  return CCFragOutput(col);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = multiply(); }"},"glsl3":{"vert":"\nprecision highp float;\nvec4 quaternionFromAxis (vec3 xAxis,vec3 yAxis,vec3 zAxis){\n  mat3 m = mat3(xAxis,yAxis,zAxis);\n  float trace = m[0][0] + m[1][1] + m[2][2];\n  vec4 quat;\n  if (trace > 0.) {\n    float s = 0.5 / sqrt(trace + 1.0);\n    quat.w = 0.25 / s;\n    quat.x = (m[2][1] - m[1][2]) * s;\n    quat.y = (m[0][2] - m[2][0]) * s;\n    quat.z = (m[1][0] - m[0][1]) * s;\n  } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n    float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n    quat.w = (m[2][1] - m[1][2]) / s;\n    quat.x = 0.25 * s;\n    quat.y = (m[0][1] + m[1][0]) / s;\n    quat.z = (m[0][2] + m[2][0]) / s;\n  } else if (m[1][1] > m[2][2]) {\n    float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n    quat.w = (m[0][2] - m[2][0]) / s;\n    quat.x = (m[0][1] + m[1][0]) / s;\n    quat.y = 0.25 * s;\n    quat.z = (m[1][2] + m[2][1]) / s;\n  } else {\n    float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n    quat.w = (m[1][0] - m[0][1]) / s;\n    quat.x = (m[0][2] + m[2][0]) / s;\n    quat.y = (m[1][2] + m[2][1]) / s;\n    quat.z = 0.25 * s;\n  }\n  float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n  if (len > 0.) {\n    len = 1. / sqrt(len);\n    quat.x = quat.x * len;\n    quat.y = quat.y * len;\n    quat.z = quat.z * len;\n    quat.w = quat.w * len;\n  }\n  return quat;\n}\nvec4 quaternionFromEuler (vec3 angle){\n  float x = angle.x / 2.;\n  float y = angle.y / 2.;\n  float z = angle.z / 2.;\n  float sx = sin(x);\n  float cx = cos(x);\n  float sy = sin(y);\n  float cy = cos(y);\n  float sz = sin(z);\n  float cz = cos(z);\n  vec4 quat = vec4(0);\n  quat.x = sx * cy * cz + cx * sy * sz;\n  quat.y = cx * sy * cz + sx * cy * sz;\n  quat.z = cx * cy * sz - sx * sy * cz;\n  quat.w = cx * cy * cz - sx * sy * sz;\n  return quat;\n}\nmat4 matrixFromRT (vec4 q, vec3 p){\n  float x2 = q.x + q.x;\n  float y2 = q.y + q.y;\n  float z2 = q.z + q.z;\n  float xx = q.x * x2;\n  float xy = q.x * y2;\n  float xz = q.x * z2;\n  float yy = q.y * y2;\n  float yz = q.y * z2;\n  float zz = q.z * z2;\n  float wx = q.w * x2;\n  float wy = q.w * y2;\n  float wz = q.w * z2;\n  return mat4(\n    1. - (yy + zz), xy + wz, xz - wy, 0,\n    xy - wz, 1. - (xx + zz), yz + wx, 0,\n    xz + wy, yz - wx, 1. - (xx + yy), 0,\n    p.x, p.y, p.z, 1\n  );\n}\nmat4 matFromRTS (vec4 q, vec3 t, vec3 s){\n  float x = q.x, y = q.y, z = q.z, w = q.w;\n  float x2 = x + x;\n  float y2 = y + y;\n  float z2 = z + z;\n  float xx = x * x2;\n  float xy = x * y2;\n  float xz = x * z2;\n  float yy = y * y2;\n  float yz = y * z2;\n  float zz = z * z2;\n  float wx = w * x2;\n  float wy = w * y2;\n  float wz = w * z2;\n  float sx = s.x;\n  float sy = s.y;\n  float sz = s.z;\n  return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n    (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n    (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n    t.x, t.y, t.z, 1);\n}\nvec4 quatMultiply (vec4 a, vec4 b){\n  vec4 quat;\n  quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n  quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n  quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n  quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n  return quat;\n}\nvoid rotateVecFromQuat (inout vec3 v, vec4 q){\n  float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n  float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n  float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n  float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n  v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n  v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n  v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace (vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n  vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n  vec4 rotQuat = quatMultiply(viewQuat, q);\n  rotateVecFromQuat(pos, rotQuat);\n  return pos;\n}\nmat3 quatToMat3(vec4 q) {\n  vec3 m0 = vec3(\n    1.0 - 2.0 * q.y * q.y - 2.0 * q.z * q.z,\n    2.0 * q.x * q.y + 2.0 * q.w * q.z,\n    2.0 * q.x * q.z - 2.0 * q.w * q.y);\n\tvec3 m1 = vec3(\n    2.0 * q.x * q.y - 2.0 * q.w * q.z,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.z * q.z,\n    2.0 * q.y * q.z + 2.0 * q.w * q.x);\n\tvec3 m2 = vec3(\n    2.0 * q.x * q.z + 2.0 * q.w * q.y,\n    2.0 * q.y * q.z - 2.0 * q.w * q.x,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.y * q.y);\n  return mat3(m0, m1, m2);\n}\nvec4 mat3ToQuat(mat3 mat) {\n  float tr = mat[0][0] + mat[1][1] + mat[2][2];\n\tfloat qw, qx, qy, qz;\n  if (tr > 0.0) {\n    float S = sqrt(tr + 1.0) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = 0.25 * S;\n\t  qx = (mat[1][2] - mat[2][1]) * invS;\n\t  qy = (mat[2][0] - mat[0][2]) * invS;\n\t  qz = (mat[0][1] - mat[1][0]) * invS;\n  } else if ((mat[0][0] > mat[1][1])&&(mat[0][0] > mat[2][2])) {\n    float S = sqrt(1.0 + mat[0][0] - mat[1][1] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[1][2] - mat[2][1]) * invS;\n\t  qx = 0.25 * S;\n\t  qy = (mat[1][0] + mat[0][1]) * invS;\n\t  qz = (mat[2][0] + mat[0][2]) * invS;\n  } else if (mat[1][1] > mat[2][2]) {\n\t  float S = sqrt(1.0 + mat[1][1] - mat[0][0] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[2][0] - mat[0][2]) * invS;\n\t  qx = (mat[1][0] + mat[0][1]) * invS;\n\t  qy = 0.25 * S;\n\t  qz = (mat[2][1] + mat[1][2]) * invS;\n  } else {\n\t  float S = sqrt(1.0 + mat[2][2] - mat[0][0] - mat[1][1]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[0][1] - mat[1][0]) * invS;\n\t  qx = (mat[2][0] + mat[0][2]) * invS;\n\t  qy = (mat[2][1] + mat[1][2]) * invS;\n\t  qz = 0.25 * S;\n  }\n  return vec4(qx, qy, qz, qw);\n}\nlayout(std140) uniform Constants {\n  vec4 mainTiling_Offset;\n  vec4 frameTile_velLenScale;\n  vec4 scale;\n  vec4 nodeRotation;\n};\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(std140) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n};\nout mediump vec2 uv;\nout mediump vec4 color;\nvoid computeVertPos (inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n  , mat4 viewInv\n#endif\n#if CC_RENDER_MODE == 1\n  , vec3 eye\n  , vec4 velocity\n  , float velocityScale\n  , float lengthScale\n  , float xIndex\n#endif\n) {\n#if CC_RENDER_MODE == 0\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n  vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n  vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_RENDER_MODE == 1\n  vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n  vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n  pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_RENDER_MODE == 2\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = vec3(1, 0, 0);\n  vec3 camY = vec3(0, 0, -1);\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_RENDER_MODE == 3\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  rotateVecFromQuat(viewSpaceVert, q);\n  vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n  vec3 camY = vec3(0, 1, 0);\n  vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n  pos.xyz += offset;\n#else\n  pos.x += vertOffset.x;\n  pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV (float frameIndex, vec2 vertIndex, vec2 frameTile){\n  vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n  aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if CC_RENDER_MODE != 4\n  vertIndex.y = 1. - vertIndex.y;\n#endif\n  return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nin vec3 a_position;\nin vec3 a_texCoord;\nin vec3 a_texCoord1;\nin vec3 a_texCoord2;\nin vec4 a_color;\n#if CC_RENDER_MODE == 1\n  in vec3 a_color1;\n#endif\n#if CC_RENDER_MODE == 4\n  in vec3 a_texCoord3;\n  in vec3 a_normal;\n  in vec4 a_color1;\n#endif\nvec4 lpvs_main () {\n  vec3 compScale = scale.xyz * a_texCoord1;\n  vec4 pos = vec4(a_position, 1);\n  #if CC_RENDER_MODE == 1\n    vec4 velocity = vec4(a_color1.xyz, 0);\n  #endif\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_RENDER_MODE == 1\n      velocity = cc_matWorld * velocity;\n    #endif\n  #endif\n  #if ROTATION_OVER_TIME_MODULE_ENABLE\n    vec3 rotTmp = a_texCoord2;\n    float mulFactor = 1.0;\n    if (rotTmp.x > 10.0 * 0.5) {\n        rotTmp.x -= 10.0;\n        mulFactor = -1.0;\n    }\n    vec4 rot = vec4(rotTmp, 0.0);\n    rot.w = mulFactor * sqrt(abs(1.0 - rot.x * rot.x - rot.y * rot.y - rot.z * rot.z));\n  #else\n    #if CC_RENDER_MODE != 4\n      #if CC_RENDER_MODE == 0\n        vec3 rotEuler = a_texCoord2;\n      #elif CC_RENDER_MODE == 1\n        vec3 rotEuler = vec3(0.);\n      #else\n        vec3 rotEuler = vec3(0., 0., a_texCoord2.z);\n      #endif\n      vec4 rot = quaternionFromEuler(rotEuler);\n    #else\n      vec4 rot = quaternionFromEuler(a_texCoord2);\n    #endif\n  #endif\n  #if CC_RENDER_MODE != 4\n    vec2 cornerOffset = vec2((a_texCoord.xy - 0.5));\n    #if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_matViewInv);\n    #elif CC_RENDER_MODE == 1\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_cameraPos.xyz, velocity, frameTile_velLenScale.z, frameTile_velLenScale.w, a_texCoord.x);\n    #elif 2\n      computeVertPos(pos, cornerOffset, rot, compScale);\n    #endif\n    color = a_color;\n  #else\n    mat3 rotMat = quatToMat3(rot);\n    mat3 nodeMat = quatToMat3(nodeRotation);\n    rotMat = nodeMat * rotMat;\n    rot = mat3ToQuat(rotMat);\n    mat4 xformNoScale = matrixFromRT(rot, pos.xyz);\n    mat4 xform = matFromRTS(rot, pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color = a_color * a_color1;\n  #endif\n  uv = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n  pos = cc_matViewProj * pos;\n  return pos;\n}\nvoid main() { gl_Position = lpvs_main(); }","frag":"\nprecision mediump float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\nin vec2 uv;\nin vec4 color;\nuniform sampler2D mainTexture;\nlayout(std140) uniform FragConstants {\n  vec4 tintColor;\n};\nvec4 multiply () {\n  vec4 col;\n  vec4 texColor = texture(mainTexture, uv);\n  col.rgb = tintColor.rgb * texColor.rgb * color.rgb * vec3(2.0);\n  return CCFragOutput(col);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = multiply(); }"},"glsl1":{"vert":"\nprecision highp float;\nvec4 quaternionFromAxis (vec3 xAxis,vec3 yAxis,vec3 zAxis){\n  mat3 m = mat3(xAxis,yAxis,zAxis);\n  float trace = m[0][0] + m[1][1] + m[2][2];\n  vec4 quat;\n  if (trace > 0.) {\n    float s = 0.5 / sqrt(trace + 1.0);\n    quat.w = 0.25 / s;\n    quat.x = (m[2][1] - m[1][2]) * s;\n    quat.y = (m[0][2] - m[2][0]) * s;\n    quat.z = (m[1][0] - m[0][1]) * s;\n  } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n    float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n    quat.w = (m[2][1] - m[1][2]) / s;\n    quat.x = 0.25 * s;\n    quat.y = (m[0][1] + m[1][0]) / s;\n    quat.z = (m[0][2] + m[2][0]) / s;\n  } else if (m[1][1] > m[2][2]) {\n    float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n    quat.w = (m[0][2] - m[2][0]) / s;\n    quat.x = (m[0][1] + m[1][0]) / s;\n    quat.y = 0.25 * s;\n    quat.z = (m[1][2] + m[2][1]) / s;\n  } else {\n    float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n    quat.w = (m[1][0] - m[0][1]) / s;\n    quat.x = (m[0][2] + m[2][0]) / s;\n    quat.y = (m[1][2] + m[2][1]) / s;\n    quat.z = 0.25 * s;\n  }\n  float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n  if (len > 0.) {\n    len = 1. / sqrt(len);\n    quat.x = quat.x * len;\n    quat.y = quat.y * len;\n    quat.z = quat.z * len;\n    quat.w = quat.w * len;\n  }\n  return quat;\n}\nvec4 quaternionFromEuler (vec3 angle){\n  float x = angle.x / 2.;\n  float y = angle.y / 2.;\n  float z = angle.z / 2.;\n  float sx = sin(x);\n  float cx = cos(x);\n  float sy = sin(y);\n  float cy = cos(y);\n  float sz = sin(z);\n  float cz = cos(z);\n  vec4 quat = vec4(0);\n  quat.x = sx * cy * cz + cx * sy * sz;\n  quat.y = cx * sy * cz + sx * cy * sz;\n  quat.z = cx * cy * sz - sx * sy * cz;\n  quat.w = cx * cy * cz - sx * sy * sz;\n  return quat;\n}\nmat4 matrixFromRT (vec4 q, vec3 p){\n  float x2 = q.x + q.x;\n  float y2 = q.y + q.y;\n  float z2 = q.z + q.z;\n  float xx = q.x * x2;\n  float xy = q.x * y2;\n  float xz = q.x * z2;\n  float yy = q.y * y2;\n  float yz = q.y * z2;\n  float zz = q.z * z2;\n  float wx = q.w * x2;\n  float wy = q.w * y2;\n  float wz = q.w * z2;\n  return mat4(\n    1. - (yy + zz), xy + wz, xz - wy, 0,\n    xy - wz, 1. - (xx + zz), yz + wx, 0,\n    xz + wy, yz - wx, 1. - (xx + yy), 0,\n    p.x, p.y, p.z, 1\n  );\n}\nmat4 matFromRTS (vec4 q, vec3 t, vec3 s){\n  float x = q.x, y = q.y, z = q.z, w = q.w;\n  float x2 = x + x;\n  float y2 = y + y;\n  float z2 = z + z;\n  float xx = x * x2;\n  float xy = x * y2;\n  float xz = x * z2;\n  float yy = y * y2;\n  float yz = y * z2;\n  float zz = z * z2;\n  float wx = w * x2;\n  float wy = w * y2;\n  float wz = w * z2;\n  float sx = s.x;\n  float sy = s.y;\n  float sz = s.z;\n  return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n    (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n    (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n    t.x, t.y, t.z, 1);\n}\nvec4 quatMultiply (vec4 a, vec4 b){\n  vec4 quat;\n  quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n  quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n  quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n  quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n  return quat;\n}\nvoid rotateVecFromQuat (inout vec3 v, vec4 q){\n  float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n  float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n  float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n  float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n  v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n  v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n  v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace (vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n  vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n  vec4 rotQuat = quatMultiply(viewQuat, q);\n  rotateVecFromQuat(pos, rotQuat);\n  return pos;\n}\nmat3 quatToMat3(vec4 q) {\n  vec3 m0 = vec3(\n    1.0 - 2.0 * q.y * q.y - 2.0 * q.z * q.z,\n    2.0 * q.x * q.y + 2.0 * q.w * q.z,\n    2.0 * q.x * q.z - 2.0 * q.w * q.y);\n\tvec3 m1 = vec3(\n    2.0 * q.x * q.y - 2.0 * q.w * q.z,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.z * q.z,\n    2.0 * q.y * q.z + 2.0 * q.w * q.x);\n\tvec3 m2 = vec3(\n    2.0 * q.x * q.z + 2.0 * q.w * q.y,\n    2.0 * q.y * q.z - 2.0 * q.w * q.x,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.y * q.y);\n  return mat3(m0, m1, m2);\n}\nvec4 mat3ToQuat(mat3 mat) {\n  float tr = mat[0][0] + mat[1][1] + mat[2][2];\n\tfloat qw, qx, qy, qz;\n  if (tr > 0.0) {\n    float S = sqrt(tr + 1.0) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = 0.25 * S;\n\t  qx = (mat[1][2] - mat[2][1]) * invS;\n\t  qy = (mat[2][0] - mat[0][2]) * invS;\n\t  qz = (mat[0][1] - mat[1][0]) * invS;\n  } else if ((mat[0][0] > mat[1][1])&&(mat[0][0] > mat[2][2])) {\n    float S = sqrt(1.0 + mat[0][0] - mat[1][1] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[1][2] - mat[2][1]) * invS;\n\t  qx = 0.25 * S;\n\t  qy = (mat[1][0] + mat[0][1]) * invS;\n\t  qz = (mat[2][0] + mat[0][2]) * invS;\n  } else if (mat[1][1] > mat[2][2]) {\n\t  float S = sqrt(1.0 + mat[1][1] - mat[0][0] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[2][0] - mat[0][2]) * invS;\n\t  qx = (mat[1][0] + mat[0][1]) * invS;\n\t  qy = 0.25 * S;\n\t  qz = (mat[2][1] + mat[1][2]) * invS;\n  } else {\n\t  float S = sqrt(1.0 + mat[2][2] - mat[0][0] - mat[1][1]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[0][1] - mat[1][0]) * invS;\n\t  qx = (mat[2][0] + mat[0][2]) * invS;\n\t  qy = (mat[2][1] + mat[1][2]) * invS;\n\t  qz = 0.25 * S;\n  }\n  return vec4(qx, qy, qz, qw);\n}\n   uniform vec4 mainTiling_Offset;\n   uniform vec4 frameTile_velLenScale;\n   uniform vec4 scale;\n   uniform vec4 nodeRotation;\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matViewInv;\n  uniform highp mat4 cc_matViewProj;\n  uniform highp vec4 cc_cameraPos;\nuniform highp mat4 cc_matWorld;\nvarying mediump vec2 uv;\nvarying mediump vec4 color;\nvoid computeVertPos (inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n  , mat4 viewInv\n#endif\n#if CC_RENDER_MODE == 1\n  , vec3 eye\n  , vec4 velocity\n  , float velocityScale\n  , float lengthScale\n  , float xIndex\n#endif\n) {\n#if CC_RENDER_MODE == 0\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n  vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n  vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_RENDER_MODE == 1\n  vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n  vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n  pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_RENDER_MODE == 2\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = vec3(1, 0, 0);\n  vec3 camY = vec3(0, 0, -1);\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_RENDER_MODE == 3\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  rotateVecFromQuat(viewSpaceVert, q);\n  vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n  vec3 camY = vec3(0, 1, 0);\n  vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n  pos.xyz += offset;\n#else\n  pos.x += vertOffset.x;\n  pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV (float frameIndex, vec2 vertIndex, vec2 frameTile){\n  vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n  aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if CC_RENDER_MODE != 4\n  vertIndex.y = 1. - vertIndex.y;\n#endif\n  return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nattribute vec3 a_position;\nattribute vec3 a_texCoord;\nattribute vec3 a_texCoord1;\nattribute vec3 a_texCoord2;\nattribute vec4 a_color;\n#if CC_RENDER_MODE == 1\n  attribute vec3 a_color1;\n#endif\n#if CC_RENDER_MODE == 4\n  attribute vec3 a_texCoord3;\n  attribute vec3 a_normal;\n  attribute vec4 a_color1;\n#endif\nvec4 lpvs_main () {\n  vec3 compScale = scale.xyz * a_texCoord1;\n  vec4 pos = vec4(a_position, 1);\n  #if CC_RENDER_MODE == 1\n    vec4 velocity = vec4(a_color1.xyz, 0);\n  #endif\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_RENDER_MODE == 1\n      velocity = cc_matWorld * velocity;\n    #endif\n  #endif\n  #if ROTATION_OVER_TIME_MODULE_ENABLE\n    vec3 rotTmp = a_texCoord2;\n    float mulFactor = 1.0;\n    if (rotTmp.x > 10.0 * 0.5) {\n        rotTmp.x -= 10.0;\n        mulFactor = -1.0;\n    }\n    vec4 rot = vec4(rotTmp, 0.0);\n    rot.w = mulFactor * sqrt(abs(1.0 - rot.x * rot.x - rot.y * rot.y - rot.z * rot.z));\n  #else\n    #if CC_RENDER_MODE != 4\n      #if CC_RENDER_MODE == 0\n        vec3 rotEuler = a_texCoord2;\n      #elif CC_RENDER_MODE == 1\n        vec3 rotEuler = vec3(0.);\n      #else\n        vec3 rotEuler = vec3(0., 0., a_texCoord2.z);\n      #endif\n      vec4 rot = quaternionFromEuler(rotEuler);\n    #else\n      vec4 rot = quaternionFromEuler(a_texCoord2);\n    #endif\n  #endif\n  #if CC_RENDER_MODE != 4\n    vec2 cornerOffset = vec2((a_texCoord.xy - 0.5));\n    #if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_matViewInv);\n    #elif CC_RENDER_MODE == 1\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_cameraPos.xyz, velocity, frameTile_velLenScale.z, frameTile_velLenScale.w, a_texCoord.x);\n    #elif 2\n      computeVertPos(pos, cornerOffset, rot, compScale);\n    #endif\n    color = a_color;\n  #else\n    mat3 rotMat = quatToMat3(rot);\n    mat3 nodeMat = quatToMat3(nodeRotation);\n    rotMat = nodeMat * rotMat;\n    rot = mat3ToQuat(rotMat);\n    mat4 xformNoScale = matrixFromRT(rot, pos.xyz);\n    mat4 xform = matFromRTS(rot, pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color = a_color * a_color1;\n  #endif\n  uv = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n  pos = cc_matViewProj * pos;\n  return pos;\n}\nvoid main() { gl_Position = lpvs_main(); }","frag":"\nprecision mediump float;\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\nvarying vec2 uv;\nvarying vec4 color;\nuniform sampler2D mainTexture;\n  uniform vec4 tintColor;\nvec4 multiply () {\n  vec4 col;\n  vec4 texColor = texture2D(mainTexture, uv);\n  col.rgb = tintColor.rgb * texColor.rgb * color.rgb * vec3(2.0);\n  return CCFragOutput(col);\n}\nvoid main() { gl_FragColor = multiply(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":52,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":40}},"defines":[{"name":"CC_RENDER_MODE","type":"number","defines":[],"range":[0,4]},{"name":"CC_USE_WORLD_SPACE","type":"boolean","defines":[]},{"name":"ROTATION_OVER_TIME_MODULE_ENABLE","type":"boolean","defines":[]}]},{"hash":1759026248,"name":"builtin-particle|particle-vs-legacy:lpvs_main|no-tint-fs:addSmooth","blocks":[{"name":"Constants","stageFlags":1,"binding":0,"members":[{"name":"mainTiling_Offset","type":16,"count":1},{"name":"frameTile_velLenScale","type":16,"count":1},{"name":"scale","type":16,"count":1},{"name":"nodeRotation","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"mainTexture","type":28,"count":1,"stageFlags":16,"binding":1,"defines":[]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_texCoord","format":32,"location":1,"defines":[]},{"name":"a_texCoord1","format":32,"location":2,"defines":[]},{"name":"a_texCoord2","format":32,"location":3,"defines":[]},{"name":"a_color","format":44,"location":4,"defines":[]},{"name":"a_color1","format":32,"location":8,"defines":["CC_RENDER_MODE"]},{"name":"a_texCoord3","format":32,"location":6,"defines":["CC_RENDER_MODE"]},{"name":"a_normal","format":32,"location":7,"defines":["CC_RENDER_MODE"]}],"varyings":[{"name":"uv","type":14,"count":1,"stageFlags":17,"location":0,"defines":[]},{"name":"color","type":16,"count":1,"stageFlags":17,"location":1,"defines":[]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"glsl4":{"vert":"\nprecision highp float;\nvec4 quaternionFromAxis (vec3 xAxis,vec3 yAxis,vec3 zAxis){\n  mat3 m = mat3(xAxis,yAxis,zAxis);\n  float trace = m[0][0] + m[1][1] + m[2][2];\n  vec4 quat;\n  if (trace > 0.) {\n    float s = 0.5 / sqrt(trace + 1.0);\n    quat.w = 0.25 / s;\n    quat.x = (m[2][1] - m[1][2]) * s;\n    quat.y = (m[0][2] - m[2][0]) * s;\n    quat.z = (m[1][0] - m[0][1]) * s;\n  } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n    float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n    quat.w = (m[2][1] - m[1][2]) / s;\n    quat.x = 0.25 * s;\n    quat.y = (m[0][1] + m[1][0]) / s;\n    quat.z = (m[0][2] + m[2][0]) / s;\n  } else if (m[1][1] > m[2][2]) {\n    float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n    quat.w = (m[0][2] - m[2][0]) / s;\n    quat.x = (m[0][1] + m[1][0]) / s;\n    quat.y = 0.25 * s;\n    quat.z = (m[1][2] + m[2][1]) / s;\n  } else {\n    float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n    quat.w = (m[1][0] - m[0][1]) / s;\n    quat.x = (m[0][2] + m[2][0]) / s;\n    quat.y = (m[1][2] + m[2][1]) / s;\n    quat.z = 0.25 * s;\n  }\n  float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n  if (len > 0.) {\n    len = 1. / sqrt(len);\n    quat.x = quat.x * len;\n    quat.y = quat.y * len;\n    quat.z = quat.z * len;\n    quat.w = quat.w * len;\n  }\n  return quat;\n}\nvec4 quaternionFromEuler (vec3 angle){\n  float x = angle.x / 2.;\n  float y = angle.y / 2.;\n  float z = angle.z / 2.;\n  float sx = sin(x);\n  float cx = cos(x);\n  float sy = sin(y);\n  float cy = cos(y);\n  float sz = sin(z);\n  float cz = cos(z);\n  vec4 quat = vec4(0);\n  quat.x = sx * cy * cz + cx * sy * sz;\n  quat.y = cx * sy * cz + sx * cy * sz;\n  quat.z = cx * cy * sz - sx * sy * cz;\n  quat.w = cx * cy * cz - sx * sy * sz;\n  return quat;\n}\nmat4 matrixFromRT (vec4 q, vec3 p){\n  float x2 = q.x + q.x;\n  float y2 = q.y + q.y;\n  float z2 = q.z + q.z;\n  float xx = q.x * x2;\n  float xy = q.x * y2;\n  float xz = q.x * z2;\n  float yy = q.y * y2;\n  float yz = q.y * z2;\n  float zz = q.z * z2;\n  float wx = q.w * x2;\n  float wy = q.w * y2;\n  float wz = q.w * z2;\n  return mat4(\n    1. - (yy + zz), xy + wz, xz - wy, 0,\n    xy - wz, 1. - (xx + zz), yz + wx, 0,\n    xz + wy, yz - wx, 1. - (xx + yy), 0,\n    p.x, p.y, p.z, 1\n  );\n}\nmat4 matFromRTS (vec4 q, vec3 t, vec3 s){\n  float x = q.x, y = q.y, z = q.z, w = q.w;\n  float x2 = x + x;\n  float y2 = y + y;\n  float z2 = z + z;\n  float xx = x * x2;\n  float xy = x * y2;\n  float xz = x * z2;\n  float yy = y * y2;\n  float yz = y * z2;\n  float zz = z * z2;\n  float wx = w * x2;\n  float wy = w * y2;\n  float wz = w * z2;\n  float sx = s.x;\n  float sy = s.y;\n  float sz = s.z;\n  return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n    (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n    (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n    t.x, t.y, t.z, 1);\n}\nvec4 quatMultiply (vec4 a, vec4 b){\n  vec4 quat;\n  quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n  quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n  quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n  quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n  return quat;\n}\nvoid rotateVecFromQuat (inout vec3 v, vec4 q){\n  float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n  float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n  float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n  float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n  v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n  v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n  v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace (vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n  vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n  vec4 rotQuat = quatMultiply(viewQuat, q);\n  rotateVecFromQuat(pos, rotQuat);\n  return pos;\n}\nmat3 quatToMat3(vec4 q) {\n  vec3 m0 = vec3(\n    1.0 - 2.0 * q.y * q.y - 2.0 * q.z * q.z,\n    2.0 * q.x * q.y + 2.0 * q.w * q.z,\n    2.0 * q.x * q.z - 2.0 * q.w * q.y);\n\tvec3 m1 = vec3(\n    2.0 * q.x * q.y - 2.0 * q.w * q.z,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.z * q.z,\n    2.0 * q.y * q.z + 2.0 * q.w * q.x);\n\tvec3 m2 = vec3(\n    2.0 * q.x * q.z + 2.0 * q.w * q.y,\n    2.0 * q.y * q.z - 2.0 * q.w * q.x,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.y * q.y);\n  return mat3(m0, m1, m2);\n}\nvec4 mat3ToQuat(mat3 mat) {\n  float tr = mat[0][0] + mat[1][1] + mat[2][2];\n\tfloat qw, qx, qy, qz;\n  if (tr > 0.0) {\n    float S = sqrt(tr + 1.0) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = 0.25 * S;\n\t  qx = (mat[1][2] - mat[2][1]) * invS;\n\t  qy = (mat[2][0] - mat[0][2]) * invS;\n\t  qz = (mat[0][1] - mat[1][0]) * invS;\n  } else if ((mat[0][0] > mat[1][1])&&(mat[0][0] > mat[2][2])) {\n    float S = sqrt(1.0 + mat[0][0] - mat[1][1] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[1][2] - mat[2][1]) * invS;\n\t  qx = 0.25 * S;\n\t  qy = (mat[1][0] + mat[0][1]) * invS;\n\t  qz = (mat[2][0] + mat[0][2]) * invS;\n  } else if (mat[1][1] > mat[2][2]) {\n\t  float S = sqrt(1.0 + mat[1][1] - mat[0][0] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[2][0] - mat[0][2]) * invS;\n\t  qx = (mat[1][0] + mat[0][1]) * invS;\n\t  qy = 0.25 * S;\n\t  qz = (mat[2][1] + mat[1][2]) * invS;\n  } else {\n\t  float S = sqrt(1.0 + mat[2][2] - mat[0][0] - mat[1][1]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[0][1] - mat[1][0]) * invS;\n\t  qx = (mat[2][0] + mat[0][2]) * invS;\n\t  qy = (mat[2][1] + mat[1][2]) * invS;\n\t  qz = 0.25 * S;\n  }\n  return vec4(qx, qy, qz, qw);\n}\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 mainTiling_Offset;\n  vec4 frameTile_velLenScale;\n  vec4 scale;\n  vec4 nodeRotation;\n};\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(set = 2, binding = 0) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n};\nlayout(location = 0) out mediump vec2 uv;\nlayout(location = 1) out mediump vec4 color;\nvoid computeVertPos (inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n  , mat4 viewInv\n#endif\n#if CC_RENDER_MODE == 1\n  , vec3 eye\n  , vec4 velocity\n  , float velocityScale\n  , float lengthScale\n  , float xIndex\n#endif\n) {\n#if CC_RENDER_MODE == 0\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n  vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n  vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_RENDER_MODE == 1\n  vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n  vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n  pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_RENDER_MODE == 2\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = vec3(1, 0, 0);\n  vec3 camY = vec3(0, 0, -1);\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_RENDER_MODE == 3\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  rotateVecFromQuat(viewSpaceVert, q);\n  vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n  vec3 camY = vec3(0, 1, 0);\n  vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n  pos.xyz += offset;\n#else\n  pos.x += vertOffset.x;\n  pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV (float frameIndex, vec2 vertIndex, vec2 frameTile){\n  vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n  aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if CC_RENDER_MODE != 4\n  vertIndex.y = 1. - vertIndex.y;\n#endif\n  return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec3 a_texCoord;\nlayout(location = 2) in vec3 a_texCoord1;\nlayout(location = 3) in vec3 a_texCoord2;\nlayout(location = 4) in vec4 a_color;\n#if CC_RENDER_MODE == 1\n  layout(location = 8) in vec3 a_color1;\n#endif\n#if CC_RENDER_MODE == 4\n  layout(location = 6) in vec3 a_texCoord3;\n  layout(location = 7) in vec3 a_normal;\n  layout(location = 8) in vec4 a_color1;\n#endif\nvec4 lpvs_main () {\n  vec3 compScale = scale.xyz * a_texCoord1;\n  vec4 pos = vec4(a_position, 1);\n  #if CC_RENDER_MODE == 1\n    vec4 velocity = vec4(a_color1.xyz, 0);\n  #endif\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_RENDER_MODE == 1\n      velocity = cc_matWorld * velocity;\n    #endif\n  #endif\n  #if ROTATION_OVER_TIME_MODULE_ENABLE\n    vec3 rotTmp = a_texCoord2;\n    float mulFactor = 1.0;\n    if (rotTmp.x > 10.0 * 0.5) {\n        rotTmp.x -= 10.0;\n        mulFactor = -1.0;\n    }\n    vec4 rot = vec4(rotTmp, 0.0);\n    rot.w = mulFactor * sqrt(abs(1.0 - rot.x * rot.x - rot.y * rot.y - rot.z * rot.z));\n  #else\n    #if CC_RENDER_MODE != 4\n      #if CC_RENDER_MODE == 0\n        vec3 rotEuler = a_texCoord2;\n      #elif CC_RENDER_MODE == 1\n        vec3 rotEuler = vec3(0.);\n      #else\n        vec3 rotEuler = vec3(0., 0., a_texCoord2.z);\n      #endif\n      vec4 rot = quaternionFromEuler(rotEuler);\n    #else\n      vec4 rot = quaternionFromEuler(a_texCoord2);\n    #endif\n  #endif\n  #if CC_RENDER_MODE != 4\n    vec2 cornerOffset = vec2((a_texCoord.xy - 0.5));\n    #if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_matViewInv);\n    #elif CC_RENDER_MODE == 1\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_cameraPos.xyz, velocity, frameTile_velLenScale.z, frameTile_velLenScale.w, a_texCoord.x);\n    #elif 2\n      computeVertPos(pos, cornerOffset, rot, compScale);\n    #endif\n    color = a_color;\n  #else\n    mat3 rotMat = quatToMat3(rot);\n    mat3 nodeMat = quatToMat3(nodeRotation);\n    rotMat = nodeMat * rotMat;\n    rot = mat3ToQuat(rotMat);\n    mat4 xformNoScale = matrixFromRT(rot, pos.xyz);\n    mat4 xform = matFromRTS(rot, pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color = a_color * a_color1;\n  #endif\n  uv = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n  pos = cc_matViewProj * pos;\n  return pos;\n}\nvoid main() { gl_Position = lpvs_main(); }","frag":"\nprecision mediump float;\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\nlayout(location = 0) in vec2 uv;\nlayout(location = 1) in vec4 color;\nlayout(set = 1, binding = 1) uniform sampler2D mainTexture;\nvec4 addSmooth () {\n  vec4 col = color * texture(mainTexture, uv);\n  col.rgb *= col.a;\n  return CCFragOutput(col);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = addSmooth(); }"},"glsl3":{"vert":"\nprecision highp float;\nvec4 quaternionFromAxis (vec3 xAxis,vec3 yAxis,vec3 zAxis){\n  mat3 m = mat3(xAxis,yAxis,zAxis);\n  float trace = m[0][0] + m[1][1] + m[2][2];\n  vec4 quat;\n  if (trace > 0.) {\n    float s = 0.5 / sqrt(trace + 1.0);\n    quat.w = 0.25 / s;\n    quat.x = (m[2][1] - m[1][2]) * s;\n    quat.y = (m[0][2] - m[2][0]) * s;\n    quat.z = (m[1][0] - m[0][1]) * s;\n  } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n    float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n    quat.w = (m[2][1] - m[1][2]) / s;\n    quat.x = 0.25 * s;\n    quat.y = (m[0][1] + m[1][0]) / s;\n    quat.z = (m[0][2] + m[2][0]) / s;\n  } else if (m[1][1] > m[2][2]) {\n    float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n    quat.w = (m[0][2] - m[2][0]) / s;\n    quat.x = (m[0][1] + m[1][0]) / s;\n    quat.y = 0.25 * s;\n    quat.z = (m[1][2] + m[2][1]) / s;\n  } else {\n    float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n    quat.w = (m[1][0] - m[0][1]) / s;\n    quat.x = (m[0][2] + m[2][0]) / s;\n    quat.y = (m[1][2] + m[2][1]) / s;\n    quat.z = 0.25 * s;\n  }\n  float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n  if (len > 0.) {\n    len = 1. / sqrt(len);\n    quat.x = quat.x * len;\n    quat.y = quat.y * len;\n    quat.z = quat.z * len;\n    quat.w = quat.w * len;\n  }\n  return quat;\n}\nvec4 quaternionFromEuler (vec3 angle){\n  float x = angle.x / 2.;\n  float y = angle.y / 2.;\n  float z = angle.z / 2.;\n  float sx = sin(x);\n  float cx = cos(x);\n  float sy = sin(y);\n  float cy = cos(y);\n  float sz = sin(z);\n  float cz = cos(z);\n  vec4 quat = vec4(0);\n  quat.x = sx * cy * cz + cx * sy * sz;\n  quat.y = cx * sy * cz + sx * cy * sz;\n  quat.z = cx * cy * sz - sx * sy * cz;\n  quat.w = cx * cy * cz - sx * sy * sz;\n  return quat;\n}\nmat4 matrixFromRT (vec4 q, vec3 p){\n  float x2 = q.x + q.x;\n  float y2 = q.y + q.y;\n  float z2 = q.z + q.z;\n  float xx = q.x * x2;\n  float xy = q.x * y2;\n  float xz = q.x * z2;\n  float yy = q.y * y2;\n  float yz = q.y * z2;\n  float zz = q.z * z2;\n  float wx = q.w * x2;\n  float wy = q.w * y2;\n  float wz = q.w * z2;\n  return mat4(\n    1. - (yy + zz), xy + wz, xz - wy, 0,\n    xy - wz, 1. - (xx + zz), yz + wx, 0,\n    xz + wy, yz - wx, 1. - (xx + yy), 0,\n    p.x, p.y, p.z, 1\n  );\n}\nmat4 matFromRTS (vec4 q, vec3 t, vec3 s){\n  float x = q.x, y = q.y, z = q.z, w = q.w;\n  float x2 = x + x;\n  float y2 = y + y;\n  float z2 = z + z;\n  float xx = x * x2;\n  float xy = x * y2;\n  float xz = x * z2;\n  float yy = y * y2;\n  float yz = y * z2;\n  float zz = z * z2;\n  float wx = w * x2;\n  float wy = w * y2;\n  float wz = w * z2;\n  float sx = s.x;\n  float sy = s.y;\n  float sz = s.z;\n  return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n    (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n    (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n    t.x, t.y, t.z, 1);\n}\nvec4 quatMultiply (vec4 a, vec4 b){\n  vec4 quat;\n  quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n  quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n  quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n  quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n  return quat;\n}\nvoid rotateVecFromQuat (inout vec3 v, vec4 q){\n  float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n  float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n  float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n  float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n  v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n  v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n  v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace (vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n  vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n  vec4 rotQuat = quatMultiply(viewQuat, q);\n  rotateVecFromQuat(pos, rotQuat);\n  return pos;\n}\nmat3 quatToMat3(vec4 q) {\n  vec3 m0 = vec3(\n    1.0 - 2.0 * q.y * q.y - 2.0 * q.z * q.z,\n    2.0 * q.x * q.y + 2.0 * q.w * q.z,\n    2.0 * q.x * q.z - 2.0 * q.w * q.y);\n\tvec3 m1 = vec3(\n    2.0 * q.x * q.y - 2.0 * q.w * q.z,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.z * q.z,\n    2.0 * q.y * q.z + 2.0 * q.w * q.x);\n\tvec3 m2 = vec3(\n    2.0 * q.x * q.z + 2.0 * q.w * q.y,\n    2.0 * q.y * q.z - 2.0 * q.w * q.x,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.y * q.y);\n  return mat3(m0, m1, m2);\n}\nvec4 mat3ToQuat(mat3 mat) {\n  float tr = mat[0][0] + mat[1][1] + mat[2][2];\n\tfloat qw, qx, qy, qz;\n  if (tr > 0.0) {\n    float S = sqrt(tr + 1.0) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = 0.25 * S;\n\t  qx = (mat[1][2] - mat[2][1]) * invS;\n\t  qy = (mat[2][0] - mat[0][2]) * invS;\n\t  qz = (mat[0][1] - mat[1][0]) * invS;\n  } else if ((mat[0][0] > mat[1][1])&&(mat[0][0] > mat[2][2])) {\n    float S = sqrt(1.0 + mat[0][0] - mat[1][1] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[1][2] - mat[2][1]) * invS;\n\t  qx = 0.25 * S;\n\t  qy = (mat[1][0] + mat[0][1]) * invS;\n\t  qz = (mat[2][0] + mat[0][2]) * invS;\n  } else if (mat[1][1] > mat[2][2]) {\n\t  float S = sqrt(1.0 + mat[1][1] - mat[0][0] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[2][0] - mat[0][2]) * invS;\n\t  qx = (mat[1][0] + mat[0][1]) * invS;\n\t  qy = 0.25 * S;\n\t  qz = (mat[2][1] + mat[1][2]) * invS;\n  } else {\n\t  float S = sqrt(1.0 + mat[2][2] - mat[0][0] - mat[1][1]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[0][1] - mat[1][0]) * invS;\n\t  qx = (mat[2][0] + mat[0][2]) * invS;\n\t  qy = (mat[2][1] + mat[1][2]) * invS;\n\t  qz = 0.25 * S;\n  }\n  return vec4(qx, qy, qz, qw);\n}\nlayout(std140) uniform Constants {\n  vec4 mainTiling_Offset;\n  vec4 frameTile_velLenScale;\n  vec4 scale;\n  vec4 nodeRotation;\n};\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(std140) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n};\nout mediump vec2 uv;\nout mediump vec4 color;\nvoid computeVertPos (inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n  , mat4 viewInv\n#endif\n#if CC_RENDER_MODE == 1\n  , vec3 eye\n  , vec4 velocity\n  , float velocityScale\n  , float lengthScale\n  , float xIndex\n#endif\n) {\n#if CC_RENDER_MODE == 0\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n  vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n  vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_RENDER_MODE == 1\n  vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n  vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n  pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_RENDER_MODE == 2\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = vec3(1, 0, 0);\n  vec3 camY = vec3(0, 0, -1);\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_RENDER_MODE == 3\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  rotateVecFromQuat(viewSpaceVert, q);\n  vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n  vec3 camY = vec3(0, 1, 0);\n  vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n  pos.xyz += offset;\n#else\n  pos.x += vertOffset.x;\n  pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV (float frameIndex, vec2 vertIndex, vec2 frameTile){\n  vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n  aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if CC_RENDER_MODE != 4\n  vertIndex.y = 1. - vertIndex.y;\n#endif\n  return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nin vec3 a_position;\nin vec3 a_texCoord;\nin vec3 a_texCoord1;\nin vec3 a_texCoord2;\nin vec4 a_color;\n#if CC_RENDER_MODE == 1\n  in vec3 a_color1;\n#endif\n#if CC_RENDER_MODE == 4\n  in vec3 a_texCoord3;\n  in vec3 a_normal;\n  in vec4 a_color1;\n#endif\nvec4 lpvs_main () {\n  vec3 compScale = scale.xyz * a_texCoord1;\n  vec4 pos = vec4(a_position, 1);\n  #if CC_RENDER_MODE == 1\n    vec4 velocity = vec4(a_color1.xyz, 0);\n  #endif\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_RENDER_MODE == 1\n      velocity = cc_matWorld * velocity;\n    #endif\n  #endif\n  #if ROTATION_OVER_TIME_MODULE_ENABLE\n    vec3 rotTmp = a_texCoord2;\n    float mulFactor = 1.0;\n    if (rotTmp.x > 10.0 * 0.5) {\n        rotTmp.x -= 10.0;\n        mulFactor = -1.0;\n    }\n    vec4 rot = vec4(rotTmp, 0.0);\n    rot.w = mulFactor * sqrt(abs(1.0 - rot.x * rot.x - rot.y * rot.y - rot.z * rot.z));\n  #else\n    #if CC_RENDER_MODE != 4\n      #if CC_RENDER_MODE == 0\n        vec3 rotEuler = a_texCoord2;\n      #elif CC_RENDER_MODE == 1\n        vec3 rotEuler = vec3(0.);\n      #else\n        vec3 rotEuler = vec3(0., 0., a_texCoord2.z);\n      #endif\n      vec4 rot = quaternionFromEuler(rotEuler);\n    #else\n      vec4 rot = quaternionFromEuler(a_texCoord2);\n    #endif\n  #endif\n  #if CC_RENDER_MODE != 4\n    vec2 cornerOffset = vec2((a_texCoord.xy - 0.5));\n    #if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_matViewInv);\n    #elif CC_RENDER_MODE == 1\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_cameraPos.xyz, velocity, frameTile_velLenScale.z, frameTile_velLenScale.w, a_texCoord.x);\n    #elif 2\n      computeVertPos(pos, cornerOffset, rot, compScale);\n    #endif\n    color = a_color;\n  #else\n    mat3 rotMat = quatToMat3(rot);\n    mat3 nodeMat = quatToMat3(nodeRotation);\n    rotMat = nodeMat * rotMat;\n    rot = mat3ToQuat(rotMat);\n    mat4 xformNoScale = matrixFromRT(rot, pos.xyz);\n    mat4 xform = matFromRTS(rot, pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color = a_color * a_color1;\n  #endif\n  uv = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n  pos = cc_matViewProj * pos;\n  return pos;\n}\nvoid main() { gl_Position = lpvs_main(); }","frag":"\nprecision mediump float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\nin vec2 uv;\nin vec4 color;\nuniform sampler2D mainTexture;\nvec4 addSmooth () {\n  vec4 col = color * texture(mainTexture, uv);\n  col.rgb *= col.a;\n  return CCFragOutput(col);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = addSmooth(); }"},"glsl1":{"vert":"\nprecision highp float;\nvec4 quaternionFromAxis (vec3 xAxis,vec3 yAxis,vec3 zAxis){\n  mat3 m = mat3(xAxis,yAxis,zAxis);\n  float trace = m[0][0] + m[1][1] + m[2][2];\n  vec4 quat;\n  if (trace > 0.) {\n    float s = 0.5 / sqrt(trace + 1.0);\n    quat.w = 0.25 / s;\n    quat.x = (m[2][1] - m[1][2]) * s;\n    quat.y = (m[0][2] - m[2][0]) * s;\n    quat.z = (m[1][0] - m[0][1]) * s;\n  } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n    float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n    quat.w = (m[2][1] - m[1][2]) / s;\n    quat.x = 0.25 * s;\n    quat.y = (m[0][1] + m[1][0]) / s;\n    quat.z = (m[0][2] + m[2][0]) / s;\n  } else if (m[1][1] > m[2][2]) {\n    float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n    quat.w = (m[0][2] - m[2][0]) / s;\n    quat.x = (m[0][1] + m[1][0]) / s;\n    quat.y = 0.25 * s;\n    quat.z = (m[1][2] + m[2][1]) / s;\n  } else {\n    float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n    quat.w = (m[1][0] - m[0][1]) / s;\n    quat.x = (m[0][2] + m[2][0]) / s;\n    quat.y = (m[1][2] + m[2][1]) / s;\n    quat.z = 0.25 * s;\n  }\n  float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n  if (len > 0.) {\n    len = 1. / sqrt(len);\n    quat.x = quat.x * len;\n    quat.y = quat.y * len;\n    quat.z = quat.z * len;\n    quat.w = quat.w * len;\n  }\n  return quat;\n}\nvec4 quaternionFromEuler (vec3 angle){\n  float x = angle.x / 2.;\n  float y = angle.y / 2.;\n  float z = angle.z / 2.;\n  float sx = sin(x);\n  float cx = cos(x);\n  float sy = sin(y);\n  float cy = cos(y);\n  float sz = sin(z);\n  float cz = cos(z);\n  vec4 quat = vec4(0);\n  quat.x = sx * cy * cz + cx * sy * sz;\n  quat.y = cx * sy * cz + sx * cy * sz;\n  quat.z = cx * cy * sz - sx * sy * cz;\n  quat.w = cx * cy * cz - sx * sy * sz;\n  return quat;\n}\nmat4 matrixFromRT (vec4 q, vec3 p){\n  float x2 = q.x + q.x;\n  float y2 = q.y + q.y;\n  float z2 = q.z + q.z;\n  float xx = q.x * x2;\n  float xy = q.x * y2;\n  float xz = q.x * z2;\n  float yy = q.y * y2;\n  float yz = q.y * z2;\n  float zz = q.z * z2;\n  float wx = q.w * x2;\n  float wy = q.w * y2;\n  float wz = q.w * z2;\n  return mat4(\n    1. - (yy + zz), xy + wz, xz - wy, 0,\n    xy - wz, 1. - (xx + zz), yz + wx, 0,\n    xz + wy, yz - wx, 1. - (xx + yy), 0,\n    p.x, p.y, p.z, 1\n  );\n}\nmat4 matFromRTS (vec4 q, vec3 t, vec3 s){\n  float x = q.x, y = q.y, z = q.z, w = q.w;\n  float x2 = x + x;\n  float y2 = y + y;\n  float z2 = z + z;\n  float xx = x * x2;\n  float xy = x * y2;\n  float xz = x * z2;\n  float yy = y * y2;\n  float yz = y * z2;\n  float zz = z * z2;\n  float wx = w * x2;\n  float wy = w * y2;\n  float wz = w * z2;\n  float sx = s.x;\n  float sy = s.y;\n  float sz = s.z;\n  return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n    (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n    (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n    t.x, t.y, t.z, 1);\n}\nvec4 quatMultiply (vec4 a, vec4 b){\n  vec4 quat;\n  quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n  quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n  quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n  quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n  return quat;\n}\nvoid rotateVecFromQuat (inout vec3 v, vec4 q){\n  float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n  float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n  float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n  float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n  v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n  v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n  v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace (vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n  vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n  vec4 rotQuat = quatMultiply(viewQuat, q);\n  rotateVecFromQuat(pos, rotQuat);\n  return pos;\n}\nmat3 quatToMat3(vec4 q) {\n  vec3 m0 = vec3(\n    1.0 - 2.0 * q.y * q.y - 2.0 * q.z * q.z,\n    2.0 * q.x * q.y + 2.0 * q.w * q.z,\n    2.0 * q.x * q.z - 2.0 * q.w * q.y);\n\tvec3 m1 = vec3(\n    2.0 * q.x * q.y - 2.0 * q.w * q.z,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.z * q.z,\n    2.0 * q.y * q.z + 2.0 * q.w * q.x);\n\tvec3 m2 = vec3(\n    2.0 * q.x * q.z + 2.0 * q.w * q.y,\n    2.0 * q.y * q.z - 2.0 * q.w * q.x,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.y * q.y);\n  return mat3(m0, m1, m2);\n}\nvec4 mat3ToQuat(mat3 mat) {\n  float tr = mat[0][0] + mat[1][1] + mat[2][2];\n\tfloat qw, qx, qy, qz;\n  if (tr > 0.0) {\n    float S = sqrt(tr + 1.0) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = 0.25 * S;\n\t  qx = (mat[1][2] - mat[2][1]) * invS;\n\t  qy = (mat[2][0] - mat[0][2]) * invS;\n\t  qz = (mat[0][1] - mat[1][0]) * invS;\n  } else if ((mat[0][0] > mat[1][1])&&(mat[0][0] > mat[2][2])) {\n    float S = sqrt(1.0 + mat[0][0] - mat[1][1] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[1][2] - mat[2][1]) * invS;\n\t  qx = 0.25 * S;\n\t  qy = (mat[1][0] + mat[0][1]) * invS;\n\t  qz = (mat[2][0] + mat[0][2]) * invS;\n  } else if (mat[1][1] > mat[2][2]) {\n\t  float S = sqrt(1.0 + mat[1][1] - mat[0][0] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[2][0] - mat[0][2]) * invS;\n\t  qx = (mat[1][0] + mat[0][1]) * invS;\n\t  qy = 0.25 * S;\n\t  qz = (mat[2][1] + mat[1][2]) * invS;\n  } else {\n\t  float S = sqrt(1.0 + mat[2][2] - mat[0][0] - mat[1][1]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[0][1] - mat[1][0]) * invS;\n\t  qx = (mat[2][0] + mat[0][2]) * invS;\n\t  qy = (mat[2][1] + mat[1][2]) * invS;\n\t  qz = 0.25 * S;\n  }\n  return vec4(qx, qy, qz, qw);\n}\n   uniform vec4 mainTiling_Offset;\n   uniform vec4 frameTile_velLenScale;\n   uniform vec4 scale;\n   uniform vec4 nodeRotation;\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matViewInv;\n  uniform highp mat4 cc_matViewProj;\n  uniform highp vec4 cc_cameraPos;\nuniform highp mat4 cc_matWorld;\nvarying mediump vec2 uv;\nvarying mediump vec4 color;\nvoid computeVertPos (inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n  , mat4 viewInv\n#endif\n#if CC_RENDER_MODE == 1\n  , vec3 eye\n  , vec4 velocity\n  , float velocityScale\n  , float lengthScale\n  , float xIndex\n#endif\n) {\n#if CC_RENDER_MODE == 0\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n  vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n  vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_RENDER_MODE == 1\n  vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n  vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n  pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_RENDER_MODE == 2\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = vec3(1, 0, 0);\n  vec3 camY = vec3(0, 0, -1);\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_RENDER_MODE == 3\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  rotateVecFromQuat(viewSpaceVert, q);\n  vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n  vec3 camY = vec3(0, 1, 0);\n  vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n  pos.xyz += offset;\n#else\n  pos.x += vertOffset.x;\n  pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV (float frameIndex, vec2 vertIndex, vec2 frameTile){\n  vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n  aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if CC_RENDER_MODE != 4\n  vertIndex.y = 1. - vertIndex.y;\n#endif\n  return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nattribute vec3 a_position;\nattribute vec3 a_texCoord;\nattribute vec3 a_texCoord1;\nattribute vec3 a_texCoord2;\nattribute vec4 a_color;\n#if CC_RENDER_MODE == 1\n  attribute vec3 a_color1;\n#endif\n#if CC_RENDER_MODE == 4\n  attribute vec3 a_texCoord3;\n  attribute vec3 a_normal;\n  attribute vec4 a_color1;\n#endif\nvec4 lpvs_main () {\n  vec3 compScale = scale.xyz * a_texCoord1;\n  vec4 pos = vec4(a_position, 1);\n  #if CC_RENDER_MODE == 1\n    vec4 velocity = vec4(a_color1.xyz, 0);\n  #endif\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_RENDER_MODE == 1\n      velocity = cc_matWorld * velocity;\n    #endif\n  #endif\n  #if ROTATION_OVER_TIME_MODULE_ENABLE\n    vec3 rotTmp = a_texCoord2;\n    float mulFactor = 1.0;\n    if (rotTmp.x > 10.0 * 0.5) {\n        rotTmp.x -= 10.0;\n        mulFactor = -1.0;\n    }\n    vec4 rot = vec4(rotTmp, 0.0);\n    rot.w = mulFactor * sqrt(abs(1.0 - rot.x * rot.x - rot.y * rot.y - rot.z * rot.z));\n  #else\n    #if CC_RENDER_MODE != 4\n      #if CC_RENDER_MODE == 0\n        vec3 rotEuler = a_texCoord2;\n      #elif CC_RENDER_MODE == 1\n        vec3 rotEuler = vec3(0.);\n      #else\n        vec3 rotEuler = vec3(0., 0., a_texCoord2.z);\n      #endif\n      vec4 rot = quaternionFromEuler(rotEuler);\n    #else\n      vec4 rot = quaternionFromEuler(a_texCoord2);\n    #endif\n  #endif\n  #if CC_RENDER_MODE != 4\n    vec2 cornerOffset = vec2((a_texCoord.xy - 0.5));\n    #if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_matViewInv);\n    #elif CC_RENDER_MODE == 1\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_cameraPos.xyz, velocity, frameTile_velLenScale.z, frameTile_velLenScale.w, a_texCoord.x);\n    #elif 2\n      computeVertPos(pos, cornerOffset, rot, compScale);\n    #endif\n    color = a_color;\n  #else\n    mat3 rotMat = quatToMat3(rot);\n    mat3 nodeMat = quatToMat3(nodeRotation);\n    rotMat = nodeMat * rotMat;\n    rot = mat3ToQuat(rotMat);\n    mat4 xformNoScale = matrixFromRT(rot, pos.xyz);\n    mat4 xform = matFromRTS(rot, pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color = a_color * a_color1;\n  #endif\n  uv = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n  pos = cc_matViewProj * pos;\n  return pos;\n}\nvoid main() { gl_Position = lpvs_main(); }","frag":"\nprecision mediump float;\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\nvarying vec2 uv;\nvarying vec4 color;\nuniform sampler2D mainTexture;\nvec4 addSmooth () {\n  vec4 col = color * texture2D(mainTexture, uv);\n  col.rgb *= col.a;\n  return CCFragOutput(col);\n}\nvoid main() { gl_FragColor = addSmooth(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":52,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":39}},"defines":[{"name":"CC_RENDER_MODE","type":"number","defines":[],"range":[0,4]},{"name":"CC_USE_WORLD_SPACE","type":"boolean","defines":[]},{"name":"ROTATION_OVER_TIME_MODULE_ENABLE","type":"boolean","defines":[]}]},{"hash":3775475229,"name":"builtin-particle|particle-vs-legacy:lpvs_main|no-tint-fs:premultiplied","blocks":[{"name":"Constants","stageFlags":1,"binding":0,"members":[{"name":"mainTiling_Offset","type":16,"count":1},{"name":"frameTile_velLenScale","type":16,"count":1},{"name":"scale","type":16,"count":1},{"name":"nodeRotation","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"mainTexture","type":28,"count":1,"stageFlags":16,"binding":1,"defines":[]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_texCoord","format":32,"location":1,"defines":[]},{"name":"a_texCoord1","format":32,"location":2,"defines":[]},{"name":"a_texCoord2","format":32,"location":3,"defines":[]},{"name":"a_color","format":44,"location":4,"defines":[]},{"name":"a_color1","format":32,"location":8,"defines":["CC_RENDER_MODE"]},{"name":"a_texCoord3","format":32,"location":6,"defines":["CC_RENDER_MODE"]},{"name":"a_normal","format":32,"location":7,"defines":["CC_RENDER_MODE"]}],"varyings":[{"name":"uv","type":14,"count":1,"stageFlags":17,"location":0,"defines":[]},{"name":"color","type":16,"count":1,"stageFlags":17,"location":1,"defines":[]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"glsl4":{"vert":"\nprecision highp float;\nvec4 quaternionFromAxis (vec3 xAxis,vec3 yAxis,vec3 zAxis){\n  mat3 m = mat3(xAxis,yAxis,zAxis);\n  float trace = m[0][0] + m[1][1] + m[2][2];\n  vec4 quat;\n  if (trace > 0.) {\n    float s = 0.5 / sqrt(trace + 1.0);\n    quat.w = 0.25 / s;\n    quat.x = (m[2][1] - m[1][2]) * s;\n    quat.y = (m[0][2] - m[2][0]) * s;\n    quat.z = (m[1][0] - m[0][1]) * s;\n  } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n    float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n    quat.w = (m[2][1] - m[1][2]) / s;\n    quat.x = 0.25 * s;\n    quat.y = (m[0][1] + m[1][0]) / s;\n    quat.z = (m[0][2] + m[2][0]) / s;\n  } else if (m[1][1] > m[2][2]) {\n    float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n    quat.w = (m[0][2] - m[2][0]) / s;\n    quat.x = (m[0][1] + m[1][0]) / s;\n    quat.y = 0.25 * s;\n    quat.z = (m[1][2] + m[2][1]) / s;\n  } else {\n    float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n    quat.w = (m[1][0] - m[0][1]) / s;\n    quat.x = (m[0][2] + m[2][0]) / s;\n    quat.y = (m[1][2] + m[2][1]) / s;\n    quat.z = 0.25 * s;\n  }\n  float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n  if (len > 0.) {\n    len = 1. / sqrt(len);\n    quat.x = quat.x * len;\n    quat.y = quat.y * len;\n    quat.z = quat.z * len;\n    quat.w = quat.w * len;\n  }\n  return quat;\n}\nvec4 quaternionFromEuler (vec3 angle){\n  float x = angle.x / 2.;\n  float y = angle.y / 2.;\n  float z = angle.z / 2.;\n  float sx = sin(x);\n  float cx = cos(x);\n  float sy = sin(y);\n  float cy = cos(y);\n  float sz = sin(z);\n  float cz = cos(z);\n  vec4 quat = vec4(0);\n  quat.x = sx * cy * cz + cx * sy * sz;\n  quat.y = cx * sy * cz + sx * cy * sz;\n  quat.z = cx * cy * sz - sx * sy * cz;\n  quat.w = cx * cy * cz - sx * sy * sz;\n  return quat;\n}\nmat4 matrixFromRT (vec4 q, vec3 p){\n  float x2 = q.x + q.x;\n  float y2 = q.y + q.y;\n  float z2 = q.z + q.z;\n  float xx = q.x * x2;\n  float xy = q.x * y2;\n  float xz = q.x * z2;\n  float yy = q.y * y2;\n  float yz = q.y * z2;\n  float zz = q.z * z2;\n  float wx = q.w * x2;\n  float wy = q.w * y2;\n  float wz = q.w * z2;\n  return mat4(\n    1. - (yy + zz), xy + wz, xz - wy, 0,\n    xy - wz, 1. - (xx + zz), yz + wx, 0,\n    xz + wy, yz - wx, 1. - (xx + yy), 0,\n    p.x, p.y, p.z, 1\n  );\n}\nmat4 matFromRTS (vec4 q, vec3 t, vec3 s){\n  float x = q.x, y = q.y, z = q.z, w = q.w;\n  float x2 = x + x;\n  float y2 = y + y;\n  float z2 = z + z;\n  float xx = x * x2;\n  float xy = x * y2;\n  float xz = x * z2;\n  float yy = y * y2;\n  float yz = y * z2;\n  float zz = z * z2;\n  float wx = w * x2;\n  float wy = w * y2;\n  float wz = w * z2;\n  float sx = s.x;\n  float sy = s.y;\n  float sz = s.z;\n  return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n    (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n    (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n    t.x, t.y, t.z, 1);\n}\nvec4 quatMultiply (vec4 a, vec4 b){\n  vec4 quat;\n  quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n  quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n  quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n  quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n  return quat;\n}\nvoid rotateVecFromQuat (inout vec3 v, vec4 q){\n  float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n  float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n  float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n  float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n  v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n  v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n  v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace (vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n  vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n  vec4 rotQuat = quatMultiply(viewQuat, q);\n  rotateVecFromQuat(pos, rotQuat);\n  return pos;\n}\nmat3 quatToMat3(vec4 q) {\n  vec3 m0 = vec3(\n    1.0 - 2.0 * q.y * q.y - 2.0 * q.z * q.z,\n    2.0 * q.x * q.y + 2.0 * q.w * q.z,\n    2.0 * q.x * q.z - 2.0 * q.w * q.y);\n\tvec3 m1 = vec3(\n    2.0 * q.x * q.y - 2.0 * q.w * q.z,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.z * q.z,\n    2.0 * q.y * q.z + 2.0 * q.w * q.x);\n\tvec3 m2 = vec3(\n    2.0 * q.x * q.z + 2.0 * q.w * q.y,\n    2.0 * q.y * q.z - 2.0 * q.w * q.x,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.y * q.y);\n  return mat3(m0, m1, m2);\n}\nvec4 mat3ToQuat(mat3 mat) {\n  float tr = mat[0][0] + mat[1][1] + mat[2][2];\n\tfloat qw, qx, qy, qz;\n  if (tr > 0.0) {\n    float S = sqrt(tr + 1.0) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = 0.25 * S;\n\t  qx = (mat[1][2] - mat[2][1]) * invS;\n\t  qy = (mat[2][0] - mat[0][2]) * invS;\n\t  qz = (mat[0][1] - mat[1][0]) * invS;\n  } else if ((mat[0][0] > mat[1][1])&&(mat[0][0] > mat[2][2])) {\n    float S = sqrt(1.0 + mat[0][0] - mat[1][1] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[1][2] - mat[2][1]) * invS;\n\t  qx = 0.25 * S;\n\t  qy = (mat[1][0] + mat[0][1]) * invS;\n\t  qz = (mat[2][0] + mat[0][2]) * invS;\n  } else if (mat[1][1] > mat[2][2]) {\n\t  float S = sqrt(1.0 + mat[1][1] - mat[0][0] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[2][0] - mat[0][2]) * invS;\n\t  qx = (mat[1][0] + mat[0][1]) * invS;\n\t  qy = 0.25 * S;\n\t  qz = (mat[2][1] + mat[1][2]) * invS;\n  } else {\n\t  float S = sqrt(1.0 + mat[2][2] - mat[0][0] - mat[1][1]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[0][1] - mat[1][0]) * invS;\n\t  qx = (mat[2][0] + mat[0][2]) * invS;\n\t  qy = (mat[2][1] + mat[1][2]) * invS;\n\t  qz = 0.25 * S;\n  }\n  return vec4(qx, qy, qz, qw);\n}\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 mainTiling_Offset;\n  vec4 frameTile_velLenScale;\n  vec4 scale;\n  vec4 nodeRotation;\n};\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(set = 2, binding = 0) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n};\nlayout(location = 0) out mediump vec2 uv;\nlayout(location = 1) out mediump vec4 color;\nvoid computeVertPos (inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n  , mat4 viewInv\n#endif\n#if CC_RENDER_MODE == 1\n  , vec3 eye\n  , vec4 velocity\n  , float velocityScale\n  , float lengthScale\n  , float xIndex\n#endif\n) {\n#if CC_RENDER_MODE == 0\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n  vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n  vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_RENDER_MODE == 1\n  vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n  vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n  pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_RENDER_MODE == 2\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = vec3(1, 0, 0);\n  vec3 camY = vec3(0, 0, -1);\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_RENDER_MODE == 3\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  rotateVecFromQuat(viewSpaceVert, q);\n  vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n  vec3 camY = vec3(0, 1, 0);\n  vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n  pos.xyz += offset;\n#else\n  pos.x += vertOffset.x;\n  pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV (float frameIndex, vec2 vertIndex, vec2 frameTile){\n  vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n  aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if CC_RENDER_MODE != 4\n  vertIndex.y = 1. - vertIndex.y;\n#endif\n  return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec3 a_texCoord;\nlayout(location = 2) in vec3 a_texCoord1;\nlayout(location = 3) in vec3 a_texCoord2;\nlayout(location = 4) in vec4 a_color;\n#if CC_RENDER_MODE == 1\n  layout(location = 8) in vec3 a_color1;\n#endif\n#if CC_RENDER_MODE == 4\n  layout(location = 6) in vec3 a_texCoord3;\n  layout(location = 7) in vec3 a_normal;\n  layout(location = 8) in vec4 a_color1;\n#endif\nvec4 lpvs_main () {\n  vec3 compScale = scale.xyz * a_texCoord1;\n  vec4 pos = vec4(a_position, 1);\n  #if CC_RENDER_MODE == 1\n    vec4 velocity = vec4(a_color1.xyz, 0);\n  #endif\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_RENDER_MODE == 1\n      velocity = cc_matWorld * velocity;\n    #endif\n  #endif\n  #if ROTATION_OVER_TIME_MODULE_ENABLE\n    vec3 rotTmp = a_texCoord2;\n    float mulFactor = 1.0;\n    if (rotTmp.x > 10.0 * 0.5) {\n        rotTmp.x -= 10.0;\n        mulFactor = -1.0;\n    }\n    vec4 rot = vec4(rotTmp, 0.0);\n    rot.w = mulFactor * sqrt(abs(1.0 - rot.x * rot.x - rot.y * rot.y - rot.z * rot.z));\n  #else\n    #if CC_RENDER_MODE != 4\n      #if CC_RENDER_MODE == 0\n        vec3 rotEuler = a_texCoord2;\n      #elif CC_RENDER_MODE == 1\n        vec3 rotEuler = vec3(0.);\n      #else\n        vec3 rotEuler = vec3(0., 0., a_texCoord2.z);\n      #endif\n      vec4 rot = quaternionFromEuler(rotEuler);\n    #else\n      vec4 rot = quaternionFromEuler(a_texCoord2);\n    #endif\n  #endif\n  #if CC_RENDER_MODE != 4\n    vec2 cornerOffset = vec2((a_texCoord.xy - 0.5));\n    #if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_matViewInv);\n    #elif CC_RENDER_MODE == 1\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_cameraPos.xyz, velocity, frameTile_velLenScale.z, frameTile_velLenScale.w, a_texCoord.x);\n    #elif 2\n      computeVertPos(pos, cornerOffset, rot, compScale);\n    #endif\n    color = a_color;\n  #else\n    mat3 rotMat = quatToMat3(rot);\n    mat3 nodeMat = quatToMat3(nodeRotation);\n    rotMat = nodeMat * rotMat;\n    rot = mat3ToQuat(rotMat);\n    mat4 xformNoScale = matrixFromRT(rot, pos.xyz);\n    mat4 xform = matFromRTS(rot, pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color = a_color * a_color1;\n  #endif\n  uv = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n  pos = cc_matViewProj * pos;\n  return pos;\n}\nvoid main() { gl_Position = lpvs_main(); }","frag":"\nprecision mediump float;\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\nlayout(location = 0) in vec2 uv;\nlayout(location = 1) in vec4 color;\nlayout(set = 1, binding = 1) uniform sampler2D mainTexture;\nvec4 premultiplied () {\n  vec4 col = color * texture(mainTexture, uv) * color.a;\n  return CCFragOutput(col);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = premultiplied(); }"},"glsl3":{"vert":"\nprecision highp float;\nvec4 quaternionFromAxis (vec3 xAxis,vec3 yAxis,vec3 zAxis){\n  mat3 m = mat3(xAxis,yAxis,zAxis);\n  float trace = m[0][0] + m[1][1] + m[2][2];\n  vec4 quat;\n  if (trace > 0.) {\n    float s = 0.5 / sqrt(trace + 1.0);\n    quat.w = 0.25 / s;\n    quat.x = (m[2][1] - m[1][2]) * s;\n    quat.y = (m[0][2] - m[2][0]) * s;\n    quat.z = (m[1][0] - m[0][1]) * s;\n  } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n    float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n    quat.w = (m[2][1] - m[1][2]) / s;\n    quat.x = 0.25 * s;\n    quat.y = (m[0][1] + m[1][0]) / s;\n    quat.z = (m[0][2] + m[2][0]) / s;\n  } else if (m[1][1] > m[2][2]) {\n    float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n    quat.w = (m[0][2] - m[2][0]) / s;\n    quat.x = (m[0][1] + m[1][0]) / s;\n    quat.y = 0.25 * s;\n    quat.z = (m[1][2] + m[2][1]) / s;\n  } else {\n    float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n    quat.w = (m[1][0] - m[0][1]) / s;\n    quat.x = (m[0][2] + m[2][0]) / s;\n    quat.y = (m[1][2] + m[2][1]) / s;\n    quat.z = 0.25 * s;\n  }\n  float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n  if (len > 0.) {\n    len = 1. / sqrt(len);\n    quat.x = quat.x * len;\n    quat.y = quat.y * len;\n    quat.z = quat.z * len;\n    quat.w = quat.w * len;\n  }\n  return quat;\n}\nvec4 quaternionFromEuler (vec3 angle){\n  float x = angle.x / 2.;\n  float y = angle.y / 2.;\n  float z = angle.z / 2.;\n  float sx = sin(x);\n  float cx = cos(x);\n  float sy = sin(y);\n  float cy = cos(y);\n  float sz = sin(z);\n  float cz = cos(z);\n  vec4 quat = vec4(0);\n  quat.x = sx * cy * cz + cx * sy * sz;\n  quat.y = cx * sy * cz + sx * cy * sz;\n  quat.z = cx * cy * sz - sx * sy * cz;\n  quat.w = cx * cy * cz - sx * sy * sz;\n  return quat;\n}\nmat4 matrixFromRT (vec4 q, vec3 p){\n  float x2 = q.x + q.x;\n  float y2 = q.y + q.y;\n  float z2 = q.z + q.z;\n  float xx = q.x * x2;\n  float xy = q.x * y2;\n  float xz = q.x * z2;\n  float yy = q.y * y2;\n  float yz = q.y * z2;\n  float zz = q.z * z2;\n  float wx = q.w * x2;\n  float wy = q.w * y2;\n  float wz = q.w * z2;\n  return mat4(\n    1. - (yy + zz), xy + wz, xz - wy, 0,\n    xy - wz, 1. - (xx + zz), yz + wx, 0,\n    xz + wy, yz - wx, 1. - (xx + yy), 0,\n    p.x, p.y, p.z, 1\n  );\n}\nmat4 matFromRTS (vec4 q, vec3 t, vec3 s){\n  float x = q.x, y = q.y, z = q.z, w = q.w;\n  float x2 = x + x;\n  float y2 = y + y;\n  float z2 = z + z;\n  float xx = x * x2;\n  float xy = x * y2;\n  float xz = x * z2;\n  float yy = y * y2;\n  float yz = y * z2;\n  float zz = z * z2;\n  float wx = w * x2;\n  float wy = w * y2;\n  float wz = w * z2;\n  float sx = s.x;\n  float sy = s.y;\n  float sz = s.z;\n  return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n    (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n    (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n    t.x, t.y, t.z, 1);\n}\nvec4 quatMultiply (vec4 a, vec4 b){\n  vec4 quat;\n  quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n  quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n  quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n  quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n  return quat;\n}\nvoid rotateVecFromQuat (inout vec3 v, vec4 q){\n  float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n  float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n  float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n  float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n  v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n  v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n  v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace (vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n  vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n  vec4 rotQuat = quatMultiply(viewQuat, q);\n  rotateVecFromQuat(pos, rotQuat);\n  return pos;\n}\nmat3 quatToMat3(vec4 q) {\n  vec3 m0 = vec3(\n    1.0 - 2.0 * q.y * q.y - 2.0 * q.z * q.z,\n    2.0 * q.x * q.y + 2.0 * q.w * q.z,\n    2.0 * q.x * q.z - 2.0 * q.w * q.y);\n\tvec3 m1 = vec3(\n    2.0 * q.x * q.y - 2.0 * q.w * q.z,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.z * q.z,\n    2.0 * q.y * q.z + 2.0 * q.w * q.x);\n\tvec3 m2 = vec3(\n    2.0 * q.x * q.z + 2.0 * q.w * q.y,\n    2.0 * q.y * q.z - 2.0 * q.w * q.x,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.y * q.y);\n  return mat3(m0, m1, m2);\n}\nvec4 mat3ToQuat(mat3 mat) {\n  float tr = mat[0][0] + mat[1][1] + mat[2][2];\n\tfloat qw, qx, qy, qz;\n  if (tr > 0.0) {\n    float S = sqrt(tr + 1.0) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = 0.25 * S;\n\t  qx = (mat[1][2] - mat[2][1]) * invS;\n\t  qy = (mat[2][0] - mat[0][2]) * invS;\n\t  qz = (mat[0][1] - mat[1][0]) * invS;\n  } else if ((mat[0][0] > mat[1][1])&&(mat[0][0] > mat[2][2])) {\n    float S = sqrt(1.0 + mat[0][0] - mat[1][1] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[1][2] - mat[2][1]) * invS;\n\t  qx = 0.25 * S;\n\t  qy = (mat[1][0] + mat[0][1]) * invS;\n\t  qz = (mat[2][0] + mat[0][2]) * invS;\n  } else if (mat[1][1] > mat[2][2]) {\n\t  float S = sqrt(1.0 + mat[1][1] - mat[0][0] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[2][0] - mat[0][2]) * invS;\n\t  qx = (mat[1][0] + mat[0][1]) * invS;\n\t  qy = 0.25 * S;\n\t  qz = (mat[2][1] + mat[1][2]) * invS;\n  } else {\n\t  float S = sqrt(1.0 + mat[2][2] - mat[0][0] - mat[1][1]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[0][1] - mat[1][0]) * invS;\n\t  qx = (mat[2][0] + mat[0][2]) * invS;\n\t  qy = (mat[2][1] + mat[1][2]) * invS;\n\t  qz = 0.25 * S;\n  }\n  return vec4(qx, qy, qz, qw);\n}\nlayout(std140) uniform Constants {\n  vec4 mainTiling_Offset;\n  vec4 frameTile_velLenScale;\n  vec4 scale;\n  vec4 nodeRotation;\n};\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(std140) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n};\nout mediump vec2 uv;\nout mediump vec4 color;\nvoid computeVertPos (inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n  , mat4 viewInv\n#endif\n#if CC_RENDER_MODE == 1\n  , vec3 eye\n  , vec4 velocity\n  , float velocityScale\n  , float lengthScale\n  , float xIndex\n#endif\n) {\n#if CC_RENDER_MODE == 0\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n  vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n  vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_RENDER_MODE == 1\n  vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n  vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n  pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_RENDER_MODE == 2\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = vec3(1, 0, 0);\n  vec3 camY = vec3(0, 0, -1);\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_RENDER_MODE == 3\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  rotateVecFromQuat(viewSpaceVert, q);\n  vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n  vec3 camY = vec3(0, 1, 0);\n  vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n  pos.xyz += offset;\n#else\n  pos.x += vertOffset.x;\n  pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV (float frameIndex, vec2 vertIndex, vec2 frameTile){\n  vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n  aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if CC_RENDER_MODE != 4\n  vertIndex.y = 1. - vertIndex.y;\n#endif\n  return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nin vec3 a_position;\nin vec3 a_texCoord;\nin vec3 a_texCoord1;\nin vec3 a_texCoord2;\nin vec4 a_color;\n#if CC_RENDER_MODE == 1\n  in vec3 a_color1;\n#endif\n#if CC_RENDER_MODE == 4\n  in vec3 a_texCoord3;\n  in vec3 a_normal;\n  in vec4 a_color1;\n#endif\nvec4 lpvs_main () {\n  vec3 compScale = scale.xyz * a_texCoord1;\n  vec4 pos = vec4(a_position, 1);\n  #if CC_RENDER_MODE == 1\n    vec4 velocity = vec4(a_color1.xyz, 0);\n  #endif\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_RENDER_MODE == 1\n      velocity = cc_matWorld * velocity;\n    #endif\n  #endif\n  #if ROTATION_OVER_TIME_MODULE_ENABLE\n    vec3 rotTmp = a_texCoord2;\n    float mulFactor = 1.0;\n    if (rotTmp.x > 10.0 * 0.5) {\n        rotTmp.x -= 10.0;\n        mulFactor = -1.0;\n    }\n    vec4 rot = vec4(rotTmp, 0.0);\n    rot.w = mulFactor * sqrt(abs(1.0 - rot.x * rot.x - rot.y * rot.y - rot.z * rot.z));\n  #else\n    #if CC_RENDER_MODE != 4\n      #if CC_RENDER_MODE == 0\n        vec3 rotEuler = a_texCoord2;\n      #elif CC_RENDER_MODE == 1\n        vec3 rotEuler = vec3(0.);\n      #else\n        vec3 rotEuler = vec3(0., 0., a_texCoord2.z);\n      #endif\n      vec4 rot = quaternionFromEuler(rotEuler);\n    #else\n      vec4 rot = quaternionFromEuler(a_texCoord2);\n    #endif\n  #endif\n  #if CC_RENDER_MODE != 4\n    vec2 cornerOffset = vec2((a_texCoord.xy - 0.5));\n    #if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_matViewInv);\n    #elif CC_RENDER_MODE == 1\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_cameraPos.xyz, velocity, frameTile_velLenScale.z, frameTile_velLenScale.w, a_texCoord.x);\n    #elif 2\n      computeVertPos(pos, cornerOffset, rot, compScale);\n    #endif\n    color = a_color;\n  #else\n    mat3 rotMat = quatToMat3(rot);\n    mat3 nodeMat = quatToMat3(nodeRotation);\n    rotMat = nodeMat * rotMat;\n    rot = mat3ToQuat(rotMat);\n    mat4 xformNoScale = matrixFromRT(rot, pos.xyz);\n    mat4 xform = matFromRTS(rot, pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color = a_color * a_color1;\n  #endif\n  uv = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n  pos = cc_matViewProj * pos;\n  return pos;\n}\nvoid main() { gl_Position = lpvs_main(); }","frag":"\nprecision mediump float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\nin vec2 uv;\nin vec4 color;\nuniform sampler2D mainTexture;\nvec4 premultiplied () {\n  vec4 col = color * texture(mainTexture, uv) * color.a;\n  return CCFragOutput(col);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = premultiplied(); }"},"glsl1":{"vert":"\nprecision highp float;\nvec4 quaternionFromAxis (vec3 xAxis,vec3 yAxis,vec3 zAxis){\n  mat3 m = mat3(xAxis,yAxis,zAxis);\n  float trace = m[0][0] + m[1][1] + m[2][2];\n  vec4 quat;\n  if (trace > 0.) {\n    float s = 0.5 / sqrt(trace + 1.0);\n    quat.w = 0.25 / s;\n    quat.x = (m[2][1] - m[1][2]) * s;\n    quat.y = (m[0][2] - m[2][0]) * s;\n    quat.z = (m[1][0] - m[0][1]) * s;\n  } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n    float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n    quat.w = (m[2][1] - m[1][2]) / s;\n    quat.x = 0.25 * s;\n    quat.y = (m[0][1] + m[1][0]) / s;\n    quat.z = (m[0][2] + m[2][0]) / s;\n  } else if (m[1][1] > m[2][2]) {\n    float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n    quat.w = (m[0][2] - m[2][0]) / s;\n    quat.x = (m[0][1] + m[1][0]) / s;\n    quat.y = 0.25 * s;\n    quat.z = (m[1][2] + m[2][1]) / s;\n  } else {\n    float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n    quat.w = (m[1][0] - m[0][1]) / s;\n    quat.x = (m[0][2] + m[2][0]) / s;\n    quat.y = (m[1][2] + m[2][1]) / s;\n    quat.z = 0.25 * s;\n  }\n  float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n  if (len > 0.) {\n    len = 1. / sqrt(len);\n    quat.x = quat.x * len;\n    quat.y = quat.y * len;\n    quat.z = quat.z * len;\n    quat.w = quat.w * len;\n  }\n  return quat;\n}\nvec4 quaternionFromEuler (vec3 angle){\n  float x = angle.x / 2.;\n  float y = angle.y / 2.;\n  float z = angle.z / 2.;\n  float sx = sin(x);\n  float cx = cos(x);\n  float sy = sin(y);\n  float cy = cos(y);\n  float sz = sin(z);\n  float cz = cos(z);\n  vec4 quat = vec4(0);\n  quat.x = sx * cy * cz + cx * sy * sz;\n  quat.y = cx * sy * cz + sx * cy * sz;\n  quat.z = cx * cy * sz - sx * sy * cz;\n  quat.w = cx * cy * cz - sx * sy * sz;\n  return quat;\n}\nmat4 matrixFromRT (vec4 q, vec3 p){\n  float x2 = q.x + q.x;\n  float y2 = q.y + q.y;\n  float z2 = q.z + q.z;\n  float xx = q.x * x2;\n  float xy = q.x * y2;\n  float xz = q.x * z2;\n  float yy = q.y * y2;\n  float yz = q.y * z2;\n  float zz = q.z * z2;\n  float wx = q.w * x2;\n  float wy = q.w * y2;\n  float wz = q.w * z2;\n  return mat4(\n    1. - (yy + zz), xy + wz, xz - wy, 0,\n    xy - wz, 1. - (xx + zz), yz + wx, 0,\n    xz + wy, yz - wx, 1. - (xx + yy), 0,\n    p.x, p.y, p.z, 1\n  );\n}\nmat4 matFromRTS (vec4 q, vec3 t, vec3 s){\n  float x = q.x, y = q.y, z = q.z, w = q.w;\n  float x2 = x + x;\n  float y2 = y + y;\n  float z2 = z + z;\n  float xx = x * x2;\n  float xy = x * y2;\n  float xz = x * z2;\n  float yy = y * y2;\n  float yz = y * z2;\n  float zz = z * z2;\n  float wx = w * x2;\n  float wy = w * y2;\n  float wz = w * z2;\n  float sx = s.x;\n  float sy = s.y;\n  float sz = s.z;\n  return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n    (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n    (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n    t.x, t.y, t.z, 1);\n}\nvec4 quatMultiply (vec4 a, vec4 b){\n  vec4 quat;\n  quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n  quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n  quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n  quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n  return quat;\n}\nvoid rotateVecFromQuat (inout vec3 v, vec4 q){\n  float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n  float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n  float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n  float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n  v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n  v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n  v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace (vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n  vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n  vec4 rotQuat = quatMultiply(viewQuat, q);\n  rotateVecFromQuat(pos, rotQuat);\n  return pos;\n}\nmat3 quatToMat3(vec4 q) {\n  vec3 m0 = vec3(\n    1.0 - 2.0 * q.y * q.y - 2.0 * q.z * q.z,\n    2.0 * q.x * q.y + 2.0 * q.w * q.z,\n    2.0 * q.x * q.z - 2.0 * q.w * q.y);\n\tvec3 m1 = vec3(\n    2.0 * q.x * q.y - 2.0 * q.w * q.z,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.z * q.z,\n    2.0 * q.y * q.z + 2.0 * q.w * q.x);\n\tvec3 m2 = vec3(\n    2.0 * q.x * q.z + 2.0 * q.w * q.y,\n    2.0 * q.y * q.z - 2.0 * q.w * q.x,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.y * q.y);\n  return mat3(m0, m1, m2);\n}\nvec4 mat3ToQuat(mat3 mat) {\n  float tr = mat[0][0] + mat[1][1] + mat[2][2];\n\tfloat qw, qx, qy, qz;\n  if (tr > 0.0) {\n    float S = sqrt(tr + 1.0) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = 0.25 * S;\n\t  qx = (mat[1][2] - mat[2][1]) * invS;\n\t  qy = (mat[2][0] - mat[0][2]) * invS;\n\t  qz = (mat[0][1] - mat[1][0]) * invS;\n  } else if ((mat[0][0] > mat[1][1])&&(mat[0][0] > mat[2][2])) {\n    float S = sqrt(1.0 + mat[0][0] - mat[1][1] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[1][2] - mat[2][1]) * invS;\n\t  qx = 0.25 * S;\n\t  qy = (mat[1][0] + mat[0][1]) * invS;\n\t  qz = (mat[2][0] + mat[0][2]) * invS;\n  } else if (mat[1][1] > mat[2][2]) {\n\t  float S = sqrt(1.0 + mat[1][1] - mat[0][0] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[2][0] - mat[0][2]) * invS;\n\t  qx = (mat[1][0] + mat[0][1]) * invS;\n\t  qy = 0.25 * S;\n\t  qz = (mat[2][1] + mat[1][2]) * invS;\n  } else {\n\t  float S = sqrt(1.0 + mat[2][2] - mat[0][0] - mat[1][1]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[0][1] - mat[1][0]) * invS;\n\t  qx = (mat[2][0] + mat[0][2]) * invS;\n\t  qy = (mat[2][1] + mat[1][2]) * invS;\n\t  qz = 0.25 * S;\n  }\n  return vec4(qx, qy, qz, qw);\n}\n   uniform vec4 mainTiling_Offset;\n   uniform vec4 frameTile_velLenScale;\n   uniform vec4 scale;\n   uniform vec4 nodeRotation;\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matViewInv;\n  uniform highp mat4 cc_matViewProj;\n  uniform highp vec4 cc_cameraPos;\nuniform highp mat4 cc_matWorld;\nvarying mediump vec2 uv;\nvarying mediump vec4 color;\nvoid computeVertPos (inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n  , mat4 viewInv\n#endif\n#if CC_RENDER_MODE == 1\n  , vec3 eye\n  , vec4 velocity\n  , float velocityScale\n  , float lengthScale\n  , float xIndex\n#endif\n) {\n#if CC_RENDER_MODE == 0\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n  vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n  vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_RENDER_MODE == 1\n  vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n  vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n  pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_RENDER_MODE == 2\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = vec3(1, 0, 0);\n  vec3 camY = vec3(0, 0, -1);\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_RENDER_MODE == 3\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  rotateVecFromQuat(viewSpaceVert, q);\n  vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n  vec3 camY = vec3(0, 1, 0);\n  vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n  pos.xyz += offset;\n#else\n  pos.x += vertOffset.x;\n  pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV (float frameIndex, vec2 vertIndex, vec2 frameTile){\n  vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n  aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if CC_RENDER_MODE != 4\n  vertIndex.y = 1. - vertIndex.y;\n#endif\n  return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nattribute vec3 a_position;\nattribute vec3 a_texCoord;\nattribute vec3 a_texCoord1;\nattribute vec3 a_texCoord2;\nattribute vec4 a_color;\n#if CC_RENDER_MODE == 1\n  attribute vec3 a_color1;\n#endif\n#if CC_RENDER_MODE == 4\n  attribute vec3 a_texCoord3;\n  attribute vec3 a_normal;\n  attribute vec4 a_color1;\n#endif\nvec4 lpvs_main () {\n  vec3 compScale = scale.xyz * a_texCoord1;\n  vec4 pos = vec4(a_position, 1);\n  #if CC_RENDER_MODE == 1\n    vec4 velocity = vec4(a_color1.xyz, 0);\n  #endif\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_RENDER_MODE == 1\n      velocity = cc_matWorld * velocity;\n    #endif\n  #endif\n  #if ROTATION_OVER_TIME_MODULE_ENABLE\n    vec3 rotTmp = a_texCoord2;\n    float mulFactor = 1.0;\n    if (rotTmp.x > 10.0 * 0.5) {\n        rotTmp.x -= 10.0;\n        mulFactor = -1.0;\n    }\n    vec4 rot = vec4(rotTmp, 0.0);\n    rot.w = mulFactor * sqrt(abs(1.0 - rot.x * rot.x - rot.y * rot.y - rot.z * rot.z));\n  #else\n    #if CC_RENDER_MODE != 4\n      #if CC_RENDER_MODE == 0\n        vec3 rotEuler = a_texCoord2;\n      #elif CC_RENDER_MODE == 1\n        vec3 rotEuler = vec3(0.);\n      #else\n        vec3 rotEuler = vec3(0., 0., a_texCoord2.z);\n      #endif\n      vec4 rot = quaternionFromEuler(rotEuler);\n    #else\n      vec4 rot = quaternionFromEuler(a_texCoord2);\n    #endif\n  #endif\n  #if CC_RENDER_MODE != 4\n    vec2 cornerOffset = vec2((a_texCoord.xy - 0.5));\n    #if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_matViewInv);\n    #elif CC_RENDER_MODE == 1\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_cameraPos.xyz, velocity, frameTile_velLenScale.z, frameTile_velLenScale.w, a_texCoord.x);\n    #elif 2\n      computeVertPos(pos, cornerOffset, rot, compScale);\n    #endif\n    color = a_color;\n  #else\n    mat3 rotMat = quatToMat3(rot);\n    mat3 nodeMat = quatToMat3(nodeRotation);\n    rotMat = nodeMat * rotMat;\n    rot = mat3ToQuat(rotMat);\n    mat4 xformNoScale = matrixFromRT(rot, pos.xyz);\n    mat4 xform = matFromRTS(rot, pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color = a_color * a_color1;\n  #endif\n  uv = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n  pos = cc_matViewProj * pos;\n  return pos;\n}\nvoid main() { gl_Position = lpvs_main(); }","frag":"\nprecision mediump float;\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\nvarying vec2 uv;\nvarying vec4 color;\nuniform sampler2D mainTexture;\nvec4 premultiplied () {\n  vec4 col = color * texture2D(mainTexture, uv) * color.a;\n  return CCFragOutput(col);\n}\nvoid main() { gl_FragColor = premultiplied(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":52,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":39}},"defines":[{"name":"CC_RENDER_MODE","type":"number","defines":[],"range":[0,4]},{"name":"CC_USE_WORLD_SPACE","type":"boolean","defines":[]},{"name":"ROTATION_OVER_TIME_MODULE_ENABLE","type":"boolean","defines":[]}]}],[{"name":"add","passes":[{"program":"builtin-particle|particle-vs-legacy:lpvs_main|tinted-fs:add","rasterizerState":{"cullMode":0},"blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":1,"blendSrcAlpha":2,"blendDstAlpha":1}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"mainTexture":{"value":"grey","type":28},"mainTiling_Offset":{"type":16,"value":[1,1,0,0]},"tintColor":{"type":16,"value":[0.5,0.5,0.5,0.5],"editor":{"type":"color"}}}}]},{"name":"alpha-blend","passes":[{"program":"builtin-particle|particle-vs-legacy:lpvs_main|tinted-fs:add","rasterizerState":{"cullMode":0},"blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendSrcAlpha":0,"blendDstAlpha":1}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"mainTexture":{"value":"grey","type":28},"mainTiling_Offset":{"type":16,"value":[1,1,0,0]},"tintColor":{"type":16,"value":[0.5,0.5,0.5,0.5],"editor":{"type":"color"}}}}]},{"name":"add-multiply","passes":[{"program":"builtin-particle|particle-vs-legacy:lpvs_main|tinted-fs:multiply","rasterizerState":{"cullMode":0},"blendState":{"targets":[{"blend":true,"blendSrc":7,"blendDst":1,"blendSrcAlpha":0,"blendDstAlpha":3}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"mainTexture":{"value":"grey","type":28},"mainTiling_Offset":{"type":16,"value":[1,1,0,0]},"tintColor":{"type":16,"value":[0.5,0.5,0.5,0.5],"editor":{"type":"color"}}}}]},{"name":"add-smooth","passes":[{"program":"builtin-particle|particle-vs-legacy:lpvs_main|no-tint-fs:addSmooth","rasterizerState":{"cullMode":0},"blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":1,"blendSrcAlpha":2,"blendDstAlpha":1}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"mainTexture":{"value":"grey","type":28},"mainTiling_Offset":{"type":16,"value":[1,1,0,0]}}}]},{"name":"premultiply-blend","passes":[{"program":"builtin-particle|particle-vs-legacy:lpvs_main|no-tint-fs:premultiplied","rasterizerState":{"cullMode":0},"blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendSrcAlpha":0,"blendDstAlpha":1}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"mainTexture":{"value":"grey","type":28},"mainTiling_Offset":{"type":16,"value":[1,1,0,0]}}}]}]]],0,0,[],[],[]],[[[15,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{},{}],[{"USE_ALBEDO_MAP":true,"USE_EMISSIVE_MAP":true},{},{}],[[[{"roughness":1,"metallic":0},"emissive",8,[4,4290032820],"mainTexture",6,0,"emissiveMap",6,1],{},{}],11,0,0]]],0,0,[0,0,0],[3,5,2],[52,52,7]],[[[10,"1",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_TEXTURE":true}],[[[{},"tilingOffset",8,[2,1.5,1,-0.26,0],"mainTexture",6,0]],11]]],0,0,[0,0],[3,2],[232,5]],[[[10,"1",[{"priority":127,"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_TEXTURE":true}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[3,2],[233,5]],[[[4,".bin",625454020,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":2352,"length":864,"count":216,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":2352,"count":49,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.10000000149011612,-0.10000000149011612,-0.0016798535361886024],"maxPosition",8,[1,0.10000001639127731,0.10000001639127731,0.06152573227882385]]],-1],0,0,[],[],[]],[[[4,".bin",647093550,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1968,"length":768,"count":192,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1968,"count":41,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.11605294048786163,-0.11605294048786163,0],"maxPosition",8,[1,0.11605294048786163,0.11605294048786163,0.413274347782135]]],-1],0,0,[],[],[]],[[[4,".bin",4292948988,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1968,"length":768,"count":192,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1968,"count":41,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.11605294048786163,-0.11605294048786163,0],"maxPosition",8,[1,0.11605294048786163,0.11605294048786163,0.413274347782135]]],-1],0,0,[],[],[]],[[[4,".bin",3064209383,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":2352,"length":864,"count":216,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":2352,"count":49,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.10000000149011612,-0.10000000149011612,-0.0021107059437781572],"maxPosition",8,[1,0.10000001639127731,0.10000001639127731,0.03000192902982235]]],-1],0,0,[],[],[]],[[[4,".bin",2719974144,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":192,"length":24,"count":6,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":192,"count":4,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.699999988079071,-0.699999988079071,0],"maxPosition",8,[1,0.699999988079071,0.699999988079071,0]]],-1],0,0,[],[],[]],[[[4,".bin",138609356,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":30624,"length":12984,"count":3246,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":30624,"count":638,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.01145604345947504,-0.000009032717571244575,-0.011449737474322319],"maxPosition",8,[1,0.011509665288031101,0.0011231227545067668,0.01151333935558796]]],-1],0,0,[],[],[]],[[[15,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{},{}],[{"USE_ALBEDO_MAP":true,"USE_EMISSIVE_MAP":true},{},{}],[[[{"roughness":1},"emissive",8,[4,4290032820],"mainTexture",6,0,"emissiveMap",6,1],{},{}],11,0,0]]],0,0,[0,0,0],[3,5,2],[53,53,7]],[[[10,"1",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_TEXTURE":true}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[3,2],[30,5]],[[[60,[{}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[3,2],[25,21]],[[[10,"1",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_TEXTURE":true}],[[[{"progress":-0.1},"mainTexture",6,0]],11]]],0,0,[0,0],[3,2],[234,13]],[[[15,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{},{}],[{"USE_ALBEDO_MAP":true,"USE_EMISSIVE_MAP":true},{},{}],[[[{"roughness":1},"emissive",8,[4,4291480266],"mainTexture",6,0,"emissiveMap",6,1],{},{}],11,0,0]]],0,0,[0,0,0],[3,5,2],[54,54,7]],[[[10,"1",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_TEXTURE":true}],[[[{},"tilingOffset",8,[2,1,1.015,0,0],"mainTexture",6,0]],11]]],0,0,[0,0],[3,2],[235,5]]]]
